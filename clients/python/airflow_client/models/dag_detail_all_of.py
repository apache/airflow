# coding: utf-8

"""
    Airflow API (Stable)

    Apache Airflow management API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@airflow.apache.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from airflow_client.configuration import Configuration


class DAGDetailAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timezone': 'str',
        'catchup': 'bool',
        'orientation': 'str',
        'concurrency': 'float',
        'start_date': 'datetime',
        'dag_run_timeout': 'TimeDelta',
        'doc_md': 'str',
        'default_view': 'str'
    }

    attribute_map = {
        'timezone': 'timezone',
        'catchup': 'catchup',
        'orientation': 'orientation',
        'concurrency': 'concurrency',
        'start_date': 'start_date',
        'dag_run_timeout': 'dag_run_timeout',
        'doc_md': 'doc_md',
        'default_view': 'default_view'
    }

    def __init__(self, timezone=None, catchup=None, orientation=None, concurrency=None, start_date=None, dag_run_timeout=None, doc_md=None, default_view=None, local_vars_configuration=None):  # noqa: E501
        """DAGDetailAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timezone = None
        self._catchup = None
        self._orientation = None
        self._concurrency = None
        self._start_date = None
        self._dag_run_timeout = None
        self._doc_md = None
        self._default_view = None
        self.discriminator = None

        if timezone is not None:
            self.timezone = timezone
        if catchup is not None:
            self.catchup = catchup
        if orientation is not None:
            self.orientation = orientation
        if concurrency is not None:
            self.concurrency = concurrency
        if start_date is not None:
            self.start_date = start_date
        if dag_run_timeout is not None:
            self.dag_run_timeout = dag_run_timeout
        if doc_md is not None:
            self.doc_md = doc_md
        if default_view is not None:
            self.default_view = default_view

    @property
    def timezone(self):
        """Gets the timezone of this DAGDetailAllOf.  # noqa: E501


        :return: The timezone of this DAGDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DAGDetailAllOf.


        :param timezone: The timezone of this DAGDetailAllOf.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def catchup(self):
        """Gets the catchup of this DAGDetailAllOf.  # noqa: E501


        :return: The catchup of this DAGDetailAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._catchup

    @catchup.setter
    def catchup(self, catchup):
        """Sets the catchup of this DAGDetailAllOf.


        :param catchup: The catchup of this DAGDetailAllOf.  # noqa: E501
        :type: bool
        """

        self._catchup = catchup

    @property
    def orientation(self):
        """Gets the orientation of this DAGDetailAllOf.  # noqa: E501


        :return: The orientation of this DAGDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this DAGDetailAllOf.


        :param orientation: The orientation of this DAGDetailAllOf.  # noqa: E501
        :type: str
        """

        self._orientation = orientation

    @property
    def concurrency(self):
        """Gets the concurrency of this DAGDetailAllOf.  # noqa: E501


        :return: The concurrency of this DAGDetailAllOf.  # noqa: E501
        :rtype: float
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this DAGDetailAllOf.


        :param concurrency: The concurrency of this DAGDetailAllOf.  # noqa: E501
        :type: float
        """

        self._concurrency = concurrency

    @property
    def start_date(self):
        """Gets the start_date of this DAGDetailAllOf.  # noqa: E501


        :return: The start_date of this DAGDetailAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DAGDetailAllOf.


        :param start_date: The start_date of this DAGDetailAllOf.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def dag_run_timeout(self):
        """Gets the dag_run_timeout of this DAGDetailAllOf.  # noqa: E501


        :return: The dag_run_timeout of this DAGDetailAllOf.  # noqa: E501
        :rtype: TimeDelta
        """
        return self._dag_run_timeout

    @dag_run_timeout.setter
    def dag_run_timeout(self, dag_run_timeout):
        """Sets the dag_run_timeout of this DAGDetailAllOf.


        :param dag_run_timeout: The dag_run_timeout of this DAGDetailAllOf.  # noqa: E501
        :type: TimeDelta
        """

        self._dag_run_timeout = dag_run_timeout

    @property
    def doc_md(self):
        """Gets the doc_md of this DAGDetailAllOf.  # noqa: E501


        :return: The doc_md of this DAGDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._doc_md

    @doc_md.setter
    def doc_md(self, doc_md):
        """Sets the doc_md of this DAGDetailAllOf.


        :param doc_md: The doc_md of this DAGDetailAllOf.  # noqa: E501
        :type: str
        """

        self._doc_md = doc_md

    @property
    def default_view(self):
        """Gets the default_view of this DAGDetailAllOf.  # noqa: E501


        :return: The default_view of this DAGDetailAllOf.  # noqa: E501
        :rtype: str
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view):
        """Sets the default_view of this DAGDetailAllOf.


        :param default_view: The default_view of this DAGDetailAllOf.  # noqa: E501
        :type: str
        """

        self._default_view = default_view

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DAGDetailAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DAGDetailAllOf):
            return True

        return self.to_dict() != other.to_dict()
