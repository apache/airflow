# coding: utf-8

"""
    Airflow API (Stable)

    Apache Airflow management API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@airflow.apache.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from airflow_client.configuration import Configuration


class Pool(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'slots': 'int',
        'occupied_slots': 'int',
        'used_slots': 'int',
        'queued_slots': 'int',
        'open_slots': 'int'
    }

    attribute_map = {
        'name': 'name',
        'slots': 'slots',
        'occupied_slots': 'occupied_slots',
        'used_slots': 'used_slots',
        'queued_slots': 'queued_slots',
        'open_slots': 'open_slots'
    }

    def __init__(self, name=None, slots=None, occupied_slots=None, used_slots=None, queued_slots=None, open_slots=None, local_vars_configuration=None):  # noqa: E501
        """Pool - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._slots = None
        self._occupied_slots = None
        self._used_slots = None
        self._queued_slots = None
        self._open_slots = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if slots is not None:
            self.slots = slots
        if occupied_slots is not None:
            self.occupied_slots = occupied_slots
        if used_slots is not None:
            self.used_slots = used_slots
        if queued_slots is not None:
            self.queued_slots = queued_slots
        if open_slots is not None:
            self.open_slots = open_slots

    @property
    def name(self):
        """Gets the name of this Pool.  # noqa: E501


        :return: The name of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pool.


        :param name: The name of this Pool.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slots(self):
        """Gets the slots of this Pool.  # noqa: E501


        :return: The slots of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this Pool.


        :param slots: The slots of this Pool.  # noqa: E501
        :type: int
        """

        self._slots = slots

    @property
    def occupied_slots(self):
        """Gets the occupied_slots of this Pool.  # noqa: E501


        :return: The occupied_slots of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._occupied_slots

    @occupied_slots.setter
    def occupied_slots(self, occupied_slots):
        """Sets the occupied_slots of this Pool.


        :param occupied_slots: The occupied_slots of this Pool.  # noqa: E501
        :type: int
        """

        self._occupied_slots = occupied_slots

    @property
    def used_slots(self):
        """Gets the used_slots of this Pool.  # noqa: E501


        :return: The used_slots of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._used_slots

    @used_slots.setter
    def used_slots(self, used_slots):
        """Sets the used_slots of this Pool.


        :param used_slots: The used_slots of this Pool.  # noqa: E501
        :type: int
        """

        self._used_slots = used_slots

    @property
    def queued_slots(self):
        """Gets the queued_slots of this Pool.  # noqa: E501


        :return: The queued_slots of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._queued_slots

    @queued_slots.setter
    def queued_slots(self, queued_slots):
        """Sets the queued_slots of this Pool.


        :param queued_slots: The queued_slots of this Pool.  # noqa: E501
        :type: int
        """

        self._queued_slots = queued_slots

    @property
    def open_slots(self):
        """Gets the open_slots of this Pool.  # noqa: E501


        :return: The open_slots of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._open_slots

    @open_slots.setter
    def open_slots(self, open_slots):
        """Sets the open_slots of this Pool.


        :param open_slots: The open_slots of this Pool.  # noqa: E501
        :type: int
        """

        self._open_slots = open_slots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pool):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pool):
            return True

        return self.to_dict() != other.to_dict()
