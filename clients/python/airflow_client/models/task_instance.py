# coding: utf-8

"""
    Airflow API (Stable)

    Apache Airflow management API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@airflow.apache.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from airflow_client.configuration import Configuration


class TaskInstance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'task_id': 'str',
        'dag_id': 'str',
        'execution_date': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'duration': 'float',
        'state': 'TaskState',
        'try_number': 'int',
        'max_tries': 'int',
        'hostname': 'str',
        'unixname': 'str',
        'pool': 'str',
        'pool_slots': 'int',
        'queue': 'str',
        'priority_weight': 'int',
        'operator': 'str',
        'queued_when': 'str',
        'pid': 'int',
        'executor_config': 'str',
        'sla_miss': 'SLAMiss'
    }

    attribute_map = {
        'task_id': 'task_id',
        'dag_id': 'dag_id',
        'execution_date': 'execution_date',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'duration': 'duration',
        'state': 'state',
        'try_number': 'try_number',
        'max_tries': 'max_tries',
        'hostname': 'hostname',
        'unixname': 'unixname',
        'pool': 'pool',
        'pool_slots': 'pool_slots',
        'queue': 'queue',
        'priority_weight': 'priority_weight',
        'operator': 'operator',
        'queued_when': 'queued_when',
        'pid': 'pid',
        'executor_config': 'executor_config',
        'sla_miss': 'sla_miss'
    }

    def __init__(self, task_id=None, dag_id=None, execution_date=None, start_date=None, end_date=None, duration=None, state=None, try_number=None, max_tries=None, hostname=None, unixname=None, pool=None, pool_slots=None, queue=None, priority_weight=None, operator=None, queued_when=None, pid=None, executor_config=None, sla_miss=None, local_vars_configuration=None):  # noqa: E501
        """TaskInstance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_id = None
        self._dag_id = None
        self._execution_date = None
        self._start_date = None
        self._end_date = None
        self._duration = None
        self._state = None
        self._try_number = None
        self._max_tries = None
        self._hostname = None
        self._unixname = None
        self._pool = None
        self._pool_slots = None
        self._queue = None
        self._priority_weight = None
        self._operator = None
        self._queued_when = None
        self._pid = None
        self._executor_config = None
        self._sla_miss = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        if dag_id is not None:
            self.dag_id = dag_id
        if execution_date is not None:
            self.execution_date = execution_date
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if duration is not None:
            self.duration = duration
        if state is not None:
            self.state = state
        if try_number is not None:
            self.try_number = try_number
        if max_tries is not None:
            self.max_tries = max_tries
        if hostname is not None:
            self.hostname = hostname
        if unixname is not None:
            self.unixname = unixname
        if pool is not None:
            self.pool = pool
        if pool_slots is not None:
            self.pool_slots = pool_slots
        if queue is not None:
            self.queue = queue
        if priority_weight is not None:
            self.priority_weight = priority_weight
        if operator is not None:
            self.operator = operator
        if queued_when is not None:
            self.queued_when = queued_when
        if pid is not None:
            self.pid = pid
        if executor_config is not None:
            self.executor_config = executor_config
        if sla_miss is not None:
            self.sla_miss = sla_miss

    @property
    def task_id(self):
        """Gets the task_id of this TaskInstance.  # noqa: E501


        :return: The task_id of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskInstance.


        :param task_id: The task_id of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def dag_id(self):
        """Gets the dag_id of this TaskInstance.  # noqa: E501


        :return: The dag_id of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._dag_id

    @dag_id.setter
    def dag_id(self, dag_id):
        """Sets the dag_id of this TaskInstance.


        :param dag_id: The dag_id of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._dag_id = dag_id

    @property
    def execution_date(self):
        """Gets the execution_date of this TaskInstance.  # noqa: E501


        :return: The execution_date of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this TaskInstance.


        :param execution_date: The execution_date of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._execution_date = execution_date

    @property
    def start_date(self):
        """Gets the start_date of this TaskInstance.  # noqa: E501


        :return: The start_date of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TaskInstance.


        :param start_date: The start_date of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this TaskInstance.  # noqa: E501


        :return: The end_date of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TaskInstance.


        :param end_date: The end_date of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def duration(self):
        """Gets the duration of this TaskInstance.  # noqa: E501


        :return: The duration of this TaskInstance.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TaskInstance.


        :param duration: The duration of this TaskInstance.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def state(self):
        """Gets the state of this TaskInstance.  # noqa: E501


        :return: The state of this TaskInstance.  # noqa: E501
        :rtype: TaskState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskInstance.


        :param state: The state of this TaskInstance.  # noqa: E501
        :type: TaskState
        """

        self._state = state

    @property
    def try_number(self):
        """Gets the try_number of this TaskInstance.  # noqa: E501


        :return: The try_number of this TaskInstance.  # noqa: E501
        :rtype: int
        """
        return self._try_number

    @try_number.setter
    def try_number(self, try_number):
        """Sets the try_number of this TaskInstance.


        :param try_number: The try_number of this TaskInstance.  # noqa: E501
        :type: int
        """

        self._try_number = try_number

    @property
    def max_tries(self):
        """Gets the max_tries of this TaskInstance.  # noqa: E501


        :return: The max_tries of this TaskInstance.  # noqa: E501
        :rtype: int
        """
        return self._max_tries

    @max_tries.setter
    def max_tries(self, max_tries):
        """Sets the max_tries of this TaskInstance.


        :param max_tries: The max_tries of this TaskInstance.  # noqa: E501
        :type: int
        """

        self._max_tries = max_tries

    @property
    def hostname(self):
        """Gets the hostname of this TaskInstance.  # noqa: E501


        :return: The hostname of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this TaskInstance.


        :param hostname: The hostname of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def unixname(self):
        """Gets the unixname of this TaskInstance.  # noqa: E501


        :return: The unixname of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._unixname

    @unixname.setter
    def unixname(self, unixname):
        """Sets the unixname of this TaskInstance.


        :param unixname: The unixname of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._unixname = unixname

    @property
    def pool(self):
        """Gets the pool of this TaskInstance.  # noqa: E501


        :return: The pool of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this TaskInstance.


        :param pool: The pool of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def pool_slots(self):
        """Gets the pool_slots of this TaskInstance.  # noqa: E501


        :return: The pool_slots of this TaskInstance.  # noqa: E501
        :rtype: int
        """
        return self._pool_slots

    @pool_slots.setter
    def pool_slots(self, pool_slots):
        """Sets the pool_slots of this TaskInstance.


        :param pool_slots: The pool_slots of this TaskInstance.  # noqa: E501
        :type: int
        """

        self._pool_slots = pool_slots

    @property
    def queue(self):
        """Gets the queue of this TaskInstance.  # noqa: E501


        :return: The queue of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this TaskInstance.


        :param queue: The queue of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._queue = queue

    @property
    def priority_weight(self):
        """Gets the priority_weight of this TaskInstance.  # noqa: E501


        :return: The priority_weight of this TaskInstance.  # noqa: E501
        :rtype: int
        """
        return self._priority_weight

    @priority_weight.setter
    def priority_weight(self, priority_weight):
        """Sets the priority_weight of this TaskInstance.


        :param priority_weight: The priority_weight of this TaskInstance.  # noqa: E501
        :type: int
        """

        self._priority_weight = priority_weight

    @property
    def operator(self):
        """Gets the operator of this TaskInstance.  # noqa: E501


        :return: The operator of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this TaskInstance.


        :param operator: The operator of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def queued_when(self):
        """Gets the queued_when of this TaskInstance.  # noqa: E501


        :return: The queued_when of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._queued_when

    @queued_when.setter
    def queued_when(self, queued_when):
        """Sets the queued_when of this TaskInstance.


        :param queued_when: The queued_when of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._queued_when = queued_when

    @property
    def pid(self):
        """Gets the pid of this TaskInstance.  # noqa: E501


        :return: The pid of this TaskInstance.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this TaskInstance.


        :param pid: The pid of this TaskInstance.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def executor_config(self):
        """Gets the executor_config of this TaskInstance.  # noqa: E501


        :return: The executor_config of this TaskInstance.  # noqa: E501
        :rtype: str
        """
        return self._executor_config

    @executor_config.setter
    def executor_config(self, executor_config):
        """Sets the executor_config of this TaskInstance.


        :param executor_config: The executor_config of this TaskInstance.  # noqa: E501
        :type: str
        """

        self._executor_config = executor_config

    @property
    def sla_miss(self):
        """Gets the sla_miss of this TaskInstance.  # noqa: E501


        :return: The sla_miss of this TaskInstance.  # noqa: E501
        :rtype: SLAMiss
        """
        return self._sla_miss

    @sla_miss.setter
    def sla_miss(self, sla_miss):
        """Sets the sla_miss of this TaskInstance.


        :param sla_miss: The sla_miss of this TaskInstance.  # noqa: E501
        :type: SLAMiss
        """

        self._sla_miss = sla_miss

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskInstance):
            return True

        return self.to_dict() != other.to_dict()
