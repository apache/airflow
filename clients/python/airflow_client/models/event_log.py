# coding: utf-8

"""
    Airflow API (Stable)

    Apache Airflow management API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@airflow.apache.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from airflow_client.configuration import Configuration


class EventLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_log_id': 'int',
        'when': 'str',
        'dag_id': 'str',
        'task_id': 'str',
        'event': 'str',
        'execution_date': 'str',
        'owner': 'str',
        'extra': 'str'
    }

    attribute_map = {
        'event_log_id': 'event_log_id',
        'when': 'when',
        'dag_id': 'dag_id',
        'task_id': 'task_id',
        'event': 'event',
        'execution_date': 'execution_date',
        'owner': 'owner',
        'extra': 'extra'
    }

    def __init__(self, event_log_id=None, when=None, dag_id=None, task_id=None, event=None, execution_date=None, owner=None, extra=None, local_vars_configuration=None):  # noqa: E501
        """EventLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._event_log_id = None
        self._when = None
        self._dag_id = None
        self._task_id = None
        self._event = None
        self._execution_date = None
        self._owner = None
        self._extra = None
        self.discriminator = None

        if event_log_id is not None:
            self.event_log_id = event_log_id
        if when is not None:
            self.when = when
        if dag_id is not None:
            self.dag_id = dag_id
        if task_id is not None:
            self.task_id = task_id
        if event is not None:
            self.event = event
        if execution_date is not None:
            self.execution_date = execution_date
        if owner is not None:
            self.owner = owner
        self.extra = extra

    @property
    def event_log_id(self):
        """Gets the event_log_id of this EventLog.  # noqa: E501


        :return: The event_log_id of this EventLog.  # noqa: E501
        :rtype: int
        """
        return self._event_log_id

    @event_log_id.setter
    def event_log_id(self, event_log_id):
        """Sets the event_log_id of this EventLog.


        :param event_log_id: The event_log_id of this EventLog.  # noqa: E501
        :type: int
        """

        self._event_log_id = event_log_id

    @property
    def when(self):
        """Gets the when of this EventLog.  # noqa: E501


        :return: The when of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this EventLog.


        :param when: The when of this EventLog.  # noqa: E501
        :type: str
        """

        self._when = when

    @property
    def dag_id(self):
        """Gets the dag_id of this EventLog.  # noqa: E501


        :return: The dag_id of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._dag_id

    @dag_id.setter
    def dag_id(self, dag_id):
        """Sets the dag_id of this EventLog.


        :param dag_id: The dag_id of this EventLog.  # noqa: E501
        :type: str
        """

        self._dag_id = dag_id

    @property
    def task_id(self):
        """Gets the task_id of this EventLog.  # noqa: E501


        :return: The task_id of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this EventLog.


        :param task_id: The task_id of this EventLog.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def event(self):
        """Gets the event of this EventLog.  # noqa: E501


        :return: The event of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventLog.


        :param event: The event of this EventLog.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def execution_date(self):
        """Gets the execution_date of this EventLog.  # noqa: E501


        :return: The execution_date of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this EventLog.


        :param execution_date: The execution_date of this EventLog.  # noqa: E501
        :type: str
        """

        self._execution_date = execution_date

    @property
    def owner(self):
        """Gets the owner of this EventLog.  # noqa: E501


        :return: The owner of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this EventLog.


        :param owner: The owner of this EventLog.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def extra(self):
        """Gets the extra of this EventLog.  # noqa: E501


        :return: The extra of this EventLog.  # noqa: E501
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this EventLog.


        :param extra: The extra of this EventLog.  # noqa: E501
        :type: str
        """

        self._extra = extra

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventLog):
            return True

        return self.to_dict() != other.to_dict()
