# coding: utf-8

"""
    Airflow API (Stable)

    Apache Airflow management API.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: dev@airflow.apache.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from airflow_client.configuration import Configuration


class ListTaskInstanceForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dag_ids': 'list[str]',
        'execution_date_gte': 'datetime',
        'execution_date_lte': 'datetime',
        'start_date_gte': 'datetime',
        'start_date_lte': 'datetime',
        'end_date_gte': 'datetime',
        'end_date_lte': 'datetime',
        'duration_gte': 'float',
        'duration_lte': 'float',
        'state': 'list[str]',
        'pool': 'list[str]',
        'queue': 'list[str]'
    }

    attribute_map = {
        'dag_ids': 'dag_ids',
        'execution_date_gte': 'execution_date_gte',
        'execution_date_lte': 'execution_date_lte',
        'start_date_gte': 'start_date_gte',
        'start_date_lte': 'start_date_lte',
        'end_date_gte': 'end_date_gte',
        'end_date_lte': 'end_date_lte',
        'duration_gte': 'duration_gte',
        'duration_lte': 'duration_lte',
        'state': 'State',
        'pool': 'Pool',
        'queue': 'Queue'
    }

    def __init__(self, dag_ids=None, execution_date_gte=None, execution_date_lte=None, start_date_gte=None, start_date_lte=None, end_date_gte=None, end_date_lte=None, duration_gte=None, duration_lte=None, state=None, pool=None, queue=None, local_vars_configuration=None):  # noqa: E501
        """ListTaskInstanceForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dag_ids = None
        self._execution_date_gte = None
        self._execution_date_lte = None
        self._start_date_gte = None
        self._start_date_lte = None
        self._end_date_gte = None
        self._end_date_lte = None
        self._duration_gte = None
        self._duration_lte = None
        self._state = None
        self._pool = None
        self._queue = None
        self.discriminator = None

        if dag_ids is not None:
            self.dag_ids = dag_ids
        if execution_date_gte is not None:
            self.execution_date_gte = execution_date_gte
        if execution_date_lte is not None:
            self.execution_date_lte = execution_date_lte
        if start_date_gte is not None:
            self.start_date_gte = start_date_gte
        if start_date_lte is not None:
            self.start_date_lte = start_date_lte
        if end_date_gte is not None:
            self.end_date_gte = end_date_gte
        if end_date_lte is not None:
            self.end_date_lte = end_date_lte
        if duration_gte is not None:
            self.duration_gte = duration_gte
        if duration_lte is not None:
            self.duration_lte = duration_lte
        if state is not None:
            self.state = state
        if pool is not None:
            self.pool = pool
        if queue is not None:
            self.queue = queue

    @property
    def dag_ids(self):
        """Gets the dag_ids of this ListTaskInstanceForm.  # noqa: E501

        Return objects with specific DAG IDs. The value can be repeated to retrieve multiple matching values (OR condition).  # noqa: E501

        :return: The dag_ids of this ListTaskInstanceForm.  # noqa: E501
        :rtype: list[str]
        """
        return self._dag_ids

    @dag_ids.setter
    def dag_ids(self, dag_ids):
        """Sets the dag_ids of this ListTaskInstanceForm.

        Return objects with specific DAG IDs. The value can be repeated to retrieve multiple matching values (OR condition).  # noqa: E501

        :param dag_ids: The dag_ids of this ListTaskInstanceForm.  # noqa: E501
        :type: list[str]
        """

        self._dag_ids = dag_ids

    @property
    def execution_date_gte(self):
        """Gets the execution_date_gte of this ListTaskInstanceForm.  # noqa: E501

        Returns objects greater or equal to the specified date. This can be combined with execution_date_lte parameter to receive only the selected period.   # noqa: E501

        :return: The execution_date_gte of this ListTaskInstanceForm.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_date_gte

    @execution_date_gte.setter
    def execution_date_gte(self, execution_date_gte):
        """Sets the execution_date_gte of this ListTaskInstanceForm.

        Returns objects greater or equal to the specified date. This can be combined with execution_date_lte parameter to receive only the selected period.   # noqa: E501

        :param execution_date_gte: The execution_date_gte of this ListTaskInstanceForm.  # noqa: E501
        :type: datetime
        """

        self._execution_date_gte = execution_date_gte

    @property
    def execution_date_lte(self):
        """Gets the execution_date_lte of this ListTaskInstanceForm.  # noqa: E501

        Returns objects less than or equal to the specified date. This can be combined with execution_date_gte parameter to receive only the selected period.   # noqa: E501

        :return: The execution_date_lte of this ListTaskInstanceForm.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_date_lte

    @execution_date_lte.setter
    def execution_date_lte(self, execution_date_lte):
        """Sets the execution_date_lte of this ListTaskInstanceForm.

        Returns objects less than or equal to the specified date. This can be combined with execution_date_gte parameter to receive only the selected period.   # noqa: E501

        :param execution_date_lte: The execution_date_lte of this ListTaskInstanceForm.  # noqa: E501
        :type: datetime
        """

        self._execution_date_lte = execution_date_lte

    @property
    def start_date_gte(self):
        """Gets the start_date_gte of this ListTaskInstanceForm.  # noqa: E501

        Returns objects greater or equal the specified date. This can be combined with startd_ate_lte parameter to receive only the selected period.   # noqa: E501

        :return: The start_date_gte of this ListTaskInstanceForm.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_gte

    @start_date_gte.setter
    def start_date_gte(self, start_date_gte):
        """Sets the start_date_gte of this ListTaskInstanceForm.

        Returns objects greater or equal the specified date. This can be combined with startd_ate_lte parameter to receive only the selected period.   # noqa: E501

        :param start_date_gte: The start_date_gte of this ListTaskInstanceForm.  # noqa: E501
        :type: datetime
        """

        self._start_date_gte = start_date_gte

    @property
    def start_date_lte(self):
        """Gets the start_date_lte of this ListTaskInstanceForm.  # noqa: E501

        Returns objects less or equal the specified date. This can be combined with start_date_gte parameter to receive only the selected period.   # noqa: E501

        :return: The start_date_lte of this ListTaskInstanceForm.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_lte

    @start_date_lte.setter
    def start_date_lte(self, start_date_lte):
        """Sets the start_date_lte of this ListTaskInstanceForm.

        Returns objects less or equal the specified date. This can be combined with start_date_gte parameter to receive only the selected period.   # noqa: E501

        :param start_date_lte: The start_date_lte of this ListTaskInstanceForm.  # noqa: E501
        :type: datetime
        """

        self._start_date_lte = start_date_lte

    @property
    def end_date_gte(self):
        """Gets the end_date_gte of this ListTaskInstanceForm.  # noqa: E501

        Returns objects greater or equal the specified date. This can be combined with start_date_lte parameter to receive only the selected period.   # noqa: E501

        :return: The end_date_gte of this ListTaskInstanceForm.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_gte

    @end_date_gte.setter
    def end_date_gte(self, end_date_gte):
        """Sets the end_date_gte of this ListTaskInstanceForm.

        Returns objects greater or equal the specified date. This can be combined with start_date_lte parameter to receive only the selected period.   # noqa: E501

        :param end_date_gte: The end_date_gte of this ListTaskInstanceForm.  # noqa: E501
        :type: datetime
        """

        self._end_date_gte = end_date_gte

    @property
    def end_date_lte(self):
        """Gets the end_date_lte of this ListTaskInstanceForm.  # noqa: E501

        Returns objects less than or equal to the specified date. This can be combined with start_date_gte parameter to receive only the selected period.   # noqa: E501

        :return: The end_date_lte of this ListTaskInstanceForm.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_lte

    @end_date_lte.setter
    def end_date_lte(self, end_date_lte):
        """Sets the end_date_lte of this ListTaskInstanceForm.

        Returns objects less than or equal to the specified date. This can be combined with start_date_gte parameter to receive only the selected period.   # noqa: E501

        :param end_date_lte: The end_date_lte of this ListTaskInstanceForm.  # noqa: E501
        :type: datetime
        """

        self._end_date_lte = end_date_lte

    @property
    def duration_gte(self):
        """Gets the duration_gte of this ListTaskInstanceForm.  # noqa: E501

        Returns objects greater than or equal to the specified values. This can be combined with duration_lte parameter to receive only the selected period.   # noqa: E501

        :return: The duration_gte of this ListTaskInstanceForm.  # noqa: E501
        :rtype: float
        """
        return self._duration_gte

    @duration_gte.setter
    def duration_gte(self, duration_gte):
        """Sets the duration_gte of this ListTaskInstanceForm.

        Returns objects greater than or equal to the specified values. This can be combined with duration_lte parameter to receive only the selected period.   # noqa: E501

        :param duration_gte: The duration_gte of this ListTaskInstanceForm.  # noqa: E501
        :type: float
        """

        self._duration_gte = duration_gte

    @property
    def duration_lte(self):
        """Gets the duration_lte of this ListTaskInstanceForm.  # noqa: E501

        Returns objects less than or equal to the specified values. This can be combined with duration_gte parameter to receive only the selected range.   # noqa: E501

        :return: The duration_lte of this ListTaskInstanceForm.  # noqa: E501
        :rtype: float
        """
        return self._duration_lte

    @duration_lte.setter
    def duration_lte(self, duration_lte):
        """Sets the duration_lte of this ListTaskInstanceForm.

        Returns objects less than or equal to the specified values. This can be combined with duration_gte parameter to receive only the selected range.   # noqa: E501

        :param duration_lte: The duration_lte of this ListTaskInstanceForm.  # noqa: E501
        :type: float
        """

        self._duration_lte = duration_lte

    @property
    def state(self):
        """Gets the state of this ListTaskInstanceForm.  # noqa: E501

        The value can be repeated to retrieve multiple matching values (OR condition).  # noqa: E501

        :return: The state of this ListTaskInstanceForm.  # noqa: E501
        :rtype: list[str]
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ListTaskInstanceForm.

        The value can be repeated to retrieve multiple matching values (OR condition).  # noqa: E501

        :param state: The state of this ListTaskInstanceForm.  # noqa: E501
        :type: list[str]
        """

        self._state = state

    @property
    def pool(self):
        """Gets the pool of this ListTaskInstanceForm.  # noqa: E501

        The value can be repeated to retrieve multiple matching values (OR condition).  # noqa: E501

        :return: The pool of this ListTaskInstanceForm.  # noqa: E501
        :rtype: list[str]
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this ListTaskInstanceForm.

        The value can be repeated to retrieve multiple matching values (OR condition).  # noqa: E501

        :param pool: The pool of this ListTaskInstanceForm.  # noqa: E501
        :type: list[str]
        """

        self._pool = pool

    @property
    def queue(self):
        """Gets the queue of this ListTaskInstanceForm.  # noqa: E501

        The value can be repeated to retrieve multiple matching values (OR condition).  # noqa: E501

        :return: The queue of this ListTaskInstanceForm.  # noqa: E501
        :rtype: list[str]
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this ListTaskInstanceForm.

        The value can be repeated to retrieve multiple matching values (OR condition).  # noqa: E501

        :param queue: The queue of this ListTaskInstanceForm.  # noqa: E501
        :type: list[str]
        """

        self._queue = queue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListTaskInstanceForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListTaskInstanceForm):
            return True

        return self.to_dict() != other.to_dict()
