/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Variable from '../model/Variable';
import VariableCollection from '../model/VariableCollection';

/**
* Variable service.
* @module api/VariableApi
* @version 1.0.0
*/
export default class VariableApi {

    /**
    * Constructs a new VariableApi. 
    * @alias module:api/VariableApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteVariable operation.
     * @callback module:api/VariableApi~deleteVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete variable
     * @param {String} variableKey The Variable Key.
     * @param {module:api/VariableApi~deleteVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVariable(variableKey, callback) {
      let postBody = null;
      // verify the required parameter 'variableKey' is set
      if (variableKey === undefined || variableKey === null) {
        throw new Error("Missing the required parameter 'variableKey' when calling deleteVariable");
      }

      let pathParams = {
        'variable_key': variableKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/variables/{variable_key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariable operation.
     * @callback module:api/VariableApi~getVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a variable by key
     * @param {String} variableKey The Variable Key.
     * @param {module:api/VariableApi~getVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    getVariable(variableKey, callback) {
      let postBody = null;
      // verify the required parameter 'variableKey' is set
      if (variableKey === undefined || variableKey === null) {
        throw new Error("Missing the required parameter 'variableKey' when calling getVariable");
      }

      let pathParams = {
        'variable_key': variableKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/variables/{variable_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVariables operation.
     * @callback module:api/VariableApi~getVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all variables
     * The collection does not contain data. To get data, you must get a single entity.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set.
     * @param {module:api/VariableApi~getVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableCollection}
     */
    getVariables(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VariableCollection;
      return this.apiClient.callApi(
        '/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchVariable operation.
     * @callback module:api/VariableApi~patchVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a variable by key
     * @param {String} variableKey The Variable Key.
     * @param {module:model/Variable} variable 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields. 
     * @param {module:api/VariableApi~patchVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    patchVariable(variableKey, variable, opts, callback) {
      opts = opts || {};
      let postBody = variable;
      // verify the required parameter 'variableKey' is set
      if (variableKey === undefined || variableKey === null) {
        throw new Error("Missing the required parameter 'variableKey' when calling patchVariable");
      }
      // verify the required parameter 'variable' is set
      if (variable === undefined || variable === null) {
        throw new Error("Missing the required parameter 'variable' when calling patchVariable");
      }

      let pathParams = {
        'variable_key': variableKey
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/variables/{variable_key}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVariables operation.
     * @callback module:api/VariableApi~postVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a variable
     * @param {module:model/Variable} variable 
     * @param {module:api/VariableApi~postVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    postVariables(variable, callback) {
      let postBody = variable;
      // verify the required parameter 'variable' is set
      if (variable === undefined || variable === null) {
        throw new Error("Missing the required parameter 'variable' when calling postVariables");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
