/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ImportError from '../model/ImportError';
import ImportErrorCollection from '../model/ImportErrorCollection';

/**
* ImportError service.
* @module api/ImportErrorApi
* @version 1.0.0
*/
export default class ImportErrorApi {

    /**
    * Constructs a new ImportErrorApi. 
    * @alias module:api/ImportErrorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getImportError operation.
     * @callback module:api/ImportErrorApi~getImportErrorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportError} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an import error
     * @param {Number} importErrorId The Import Error ID.
     * @param {module:api/ImportErrorApi~getImportErrorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportError}
     */
    getImportError(importErrorId, callback) {
      let postBody = null;
      // verify the required parameter 'importErrorId' is set
      if (importErrorId === undefined || importErrorId === null) {
        throw new Error("Missing the required parameter 'importErrorId' when calling getImportError");
      }

      let pathParams = {
        'import_error_id': importErrorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportError;
      return this.apiClient.callApi(
        '/importErrors/{import_error_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImportErrors operation.
     * @callback module:api/ImportErrorApi~getImportErrorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportErrorCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all import errors
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set.
     * @param {module:api/ImportErrorApi~getImportErrorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportErrorCollection}
     */
    getImportErrors(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImportErrorCollection;
      return this.apiClient.callApi(
        '/importErrors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
