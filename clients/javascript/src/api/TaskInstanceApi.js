/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ExtraLinkCollection from '../model/ExtraLinkCollection';
import InlineResponse200 from '../model/InlineResponse200';
import ListTaskInstanceForm from '../model/ListTaskInstanceForm';
import TaskInstance from '../model/TaskInstance';
import TaskInstanceCollection from '../model/TaskInstanceCollection';

/**
* TaskInstance service.
* @module api/TaskInstanceApi
* @version 1.0.0
*/
export default class TaskInstanceApi {

    /**
    * Constructs a new TaskInstanceApi. 
    * @alias module:api/TaskInstanceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getExtraLinks operation.
     * @callback module:api/TaskInstanceApi~getExtraLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtraLinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get extra links for task instance
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {String} taskId The Task ID.
     * @param {module:api/TaskInstanceApi~getExtraLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtraLinkCollection}
     */
    getExtraLinks(dagId, dagRunId, taskId, callback) {
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling getExtraLinks");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling getExtraLinks");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getExtraLinks");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtraLinkCollection;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLog operation.
     * @callback module:api/TaskInstanceApi~getLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs for a task instance
     * Get logs for a specific task instance and its try number
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {String} taskId The Task ID.
     * @param {Number} taskTryNumber The Task Try Number.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fullContent A full content will be returned. By default, only the first fragment will be returned. 
     * @param {String} opts.token A token that allows you to continue fetching logs. If passed, it will specify the location from which the download should be continued. 
     * @param {module:api/TaskInstanceApi~getLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    getLog(dagId, dagRunId, taskId, taskTryNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling getLog");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling getLog");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getLog");
      }
      // verify the required parameter 'taskTryNumber' is set
      if (taskTryNumber === undefined || taskTryNumber === null) {
        throw new Error("Missing the required parameter 'taskTryNumber' when calling getLog");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId,
        'task_id': taskId,
        'task_try_number': taskTryNumber
      };
      let queryParams = {
        'full_content': opts['fullContent'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/logs/{task_try_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskInstance operation.
     * @callback module:api/TaskInstanceApi~getTaskInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a task instance
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {String} taskId The Task ID.
     * @param {module:api/TaskInstanceApi~getTaskInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskInstance}
     */
    getTaskInstance(dagId, dagRunId, taskId, callback) {
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling getTaskInstance");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling getTaskInstance");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getTaskInstance");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskInstance;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskInstances operation.
     * @callback module:api/TaskInstanceApi~getTaskInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of task instance of DAG.
     * This endpoint allows specifying `~` as the dag_id, dag_run_id to retrieve DAG Runs for all DAGs and DAG Runs. 
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.executionDateGte Returns objects greater or equal to the specified date. This can be combined with execution_date_lte parameter to receive only the selected period. 
     * @param {Date} opts.executionDateLte Returns objects less than or equal to the specified date. This can be combined with execution_date_gte parameter to receive only the selected period. 
     * @param {Date} opts.startDateGte Returns objects greater or equal the specified date. This can be combined with startd_ate_lte parameter to receive only the selected period. 
     * @param {Date} opts.startDateLte Returns objects less or equal the specified date. This can be combined with start_date_gte parameter to receive only the selected period. 
     * @param {Date} opts.endDateGte Returns objects greater or equal the specified date. This can be combined with start_date_lte parameter to receive only the selected period. 
     * @param {Date} opts.endDateLte Returns objects less than or equal to the specified date. This can be combined with start_date_gte parameter to receive only the selected period. 
     * @param {Number} opts.durationGte Returns objects greater than or equal to the specified values. This can be combined with duration_lte parameter to receive only the selected period. 
     * @param {Number} opts.durationLte Returns objects less than or equal to the specified values. This can be combined with duration_gte parameter to receive only the selected range. 
     * @param {Array.<String>} opts.state The value can be repeated to retrieve multiple matching values (OR condition).
     * @param {Array.<String>} opts.pool The value can be repeated to retrieve multiple matching values (OR condition).
     * @param {Array.<String>} opts.queue The value can be repeated to retrieve multiple matching values (OR condition).
     * @param {Number} opts.limit The numbers of items to return. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set.
     * @param {module:api/TaskInstanceApi~getTaskInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskInstanceCollection}
     */
    getTaskInstances(dagId, dagRunId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling getTaskInstances");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling getTaskInstances");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId
      };
      let queryParams = {
        'execution_date_gte': opts['executionDateGte'],
        'execution_date_lte': opts['executionDateLte'],
        'start_date_gte': opts['startDateGte'],
        'start_date_lte': opts['startDateLte'],
        'end_date_gte': opts['endDateGte'],
        'end_date_lte': opts['endDateLte'],
        'duration_gte': opts['durationGte'],
        'duration_lte': opts['durationLte'],
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'pool': this.apiClient.buildCollectionParam(opts['pool'], 'multi'),
        'queue': this.apiClient.buildCollectionParam(opts['queue'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskInstanceCollection;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskInstancesBatch operation.
     * @callback module:api/TaskInstanceApi~getTaskInstancesBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of task instances from all DAGs and DAG Runs.
     * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL lengthlimits 
     * @param {module:model/ListTaskInstanceForm} listTaskInstanceForm 
     * @param {module:api/TaskInstanceApi~getTaskInstancesBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskInstanceCollection}
     */
    getTaskInstancesBatch(listTaskInstanceForm, callback) {
      let postBody = listTaskInstanceForm;
      // verify the required parameter 'listTaskInstanceForm' is set
      if (listTaskInstanceForm === undefined || listTaskInstanceForm === null) {
        throw new Error("Missing the required parameter 'listTaskInstanceForm' when calling getTaskInstancesBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskInstanceCollection;
      return this.apiClient.callApi(
        '/dags/~/dagRuns/~/taskInstances/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
