/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import EventLog from '../model/EventLog';
import EventLogCollection from '../model/EventLogCollection';

/**
* EventLog service.
* @module api/EventLogApi
* @version 1.0.0
*/
export default class EventLogApi {

    /**
    * Constructs a new EventLogApi. 
    * @alias module:api/EventLogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEventLog operation.
     * @callback module:api/EventLogApi~getEventLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a log entry
     * @param {Number} eventLogId The Event Log ID.
     * @param {module:api/EventLogApi~getEventLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventLog}
     */
    getEventLog(eventLogId, callback) {
      let postBody = null;
      // verify the required parameter 'eventLogId' is set
      if (eventLogId === undefined || eventLogId === null) {
        throw new Error("Missing the required parameter 'eventLogId' when calling getEventLog");
      }

      let pathParams = {
        'event_log_id': eventLogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventLog;
      return this.apiClient.callApi(
        '/eventLogs/{event_log_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventLogs operation.
     * @callback module:api/EventLogApi~getEventLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventLogCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all log entries from event log
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set.
     * @param {module:api/EventLogApi~getEventLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventLogCollection}
     */
    getEventLogs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventLogCollection;
      return this.apiClient.callApi(
        '/eventLogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
