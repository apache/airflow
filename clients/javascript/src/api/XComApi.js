/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import XCom from '../model/XCom';
import XComCollection from '../model/XComCollection';

/**
* XCom service.
* @module api/XComApi
* @version 1.0.0
*/
export default class XComApi {

    /**
    * Constructs a new XComApi. 
    * @alias module:api/XComApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteXcomEntry operation.
     * @callback module:api/XComApi~deleteXcomEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an XCom entry
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {String} taskId The Task ID.
     * @param {String} xcomKey The XCom Key.
     * @param {module:api/XComApi~deleteXcomEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteXcomEntry(dagId, dagRunId, taskId, xcomKey, callback) {
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling deleteXcomEntry");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling deleteXcomEntry");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling deleteXcomEntry");
      }
      // verify the required parameter 'xcomKey' is set
      if (xcomKey === undefined || xcomKey === null) {
        throw new Error("Missing the required parameter 'xcomKey' when calling deleteXcomEntry");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId,
        'task_id': taskId,
        'xcom_key': xcomKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getXcomEntries operation.
     * @callback module:api/XComApi~getXcomEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/XComCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all XCom entries
     * This endpoint allows specifying `~` as the dag_id, dag_run_id, task_id to retrieve XCOM entries for for all DAGs, DAG Runs and task instances.
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {String} taskId The Task ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set.
     * @param {module:api/XComApi~getXcomEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/XComCollection}
     */
    getXcomEntries(dagId, dagRunId, taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling getXcomEntries");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling getXcomEntries");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getXcomEntries");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId,
        'task_id': taskId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = XComCollection;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getXcomEntry operation.
     * @callback module:api/XComApi~getXcomEntryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/XCom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an XCom entry
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {String} taskId The Task ID.
     * @param {String} xcomKey The XCom Key.
     * @param {module:api/XComApi~getXcomEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/XCom}
     */
    getXcomEntry(dagId, dagRunId, taskId, xcomKey, callback) {
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling getXcomEntry");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling getXcomEntry");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getXcomEntry");
      }
      // verify the required parameter 'xcomKey' is set
      if (xcomKey === undefined || xcomKey === null) {
        throw new Error("Missing the required parameter 'xcomKey' when calling getXcomEntry");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId,
        'task_id': taskId,
        'xcom_key': xcomKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = XCom;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchXcomEntry operation.
     * @callback module:api/XComApi~patchXcomEntryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/XCom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an XCom entry
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {String} taskId The Task ID.
     * @param {String} xcomKey The XCom Key.
     * @param {module:model/XCom} xCom 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields. 
     * @param {module:api/XComApi~patchXcomEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/XCom}
     */
    patchXcomEntry(dagId, dagRunId, taskId, xcomKey, xCom, opts, callback) {
      opts = opts || {};
      let postBody = xCom;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling patchXcomEntry");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling patchXcomEntry");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling patchXcomEntry");
      }
      // verify the required parameter 'xcomKey' is set
      if (xcomKey === undefined || xcomKey === null) {
        throw new Error("Missing the required parameter 'xcomKey' when calling patchXcomEntry");
      }
      // verify the required parameter 'xCom' is set
      if (xCom === undefined || xCom === null) {
        throw new Error("Missing the required parameter 'xCom' when calling patchXcomEntry");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId,
        'task_id': taskId,
        'xcom_key': xcomKey
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = XCom;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postXcomEntries operation.
     * @callback module:api/XComApi~postXcomEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/XCom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an XCom entry
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {String} taskId The Task ID.
     * @param {module:model/XCom} xCom 
     * @param {module:api/XComApi~postXcomEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/XCom}
     */
    postXcomEntries(dagId, dagRunId, taskId, xCom, callback) {
      let postBody = xCom;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling postXcomEntries");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling postXcomEntries");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling postXcomEntries");
      }
      // verify the required parameter 'xCom' is set
      if (xCom === undefined || xCom === null) {
        throw new Error("Missing the required parameter 'xCom' when calling postXcomEntries");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = XCom;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
