/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Connection from '../model/Connection';
import ConnectionCollection from '../model/ConnectionCollection';
import Error from '../model/Error';

/**
* Connection service.
* @module api/ConnectionApi
* @version 1.0.0
*/
export default class ConnectionApi {

    /**
    * Constructs a new ConnectionApi. 
    * @alias module:api/ConnectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteConnection operation.
     * @callback module:api/ConnectionApi~deleteConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a connection entry
     * @param {String} connectionId The Connection ID.
     * @param {module:api/ConnectionApi~deleteConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConnection(connectionId, callback) {
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling deleteConnection");
      }

      let pathParams = {
        'connection_id': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/connections/{connection_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnection operation.
     * @callback module:api/ConnectionApi~getConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a connection entry
     * @param {String} connectionId The Connection ID.
     * @param {module:api/ConnectionApi~getConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connection}
     */
    getConnection(connectionId, callback) {
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling getConnection");
      }

      let pathParams = {
        'connection_id': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Connection;
      return this.apiClient.callApi(
        '/connections/{connection_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnections operation.
     * @callback module:api/ConnectionApi~getConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all connection entries
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set.
     * @param {module:api/ConnectionApi~getConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionCollection}
     */
    getConnections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionCollection;
      return this.apiClient.callApi(
        '/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchConnection operation.
     * @callback module:api/ConnectionApi~patchConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a connection entry
     * @param {String} connectionId The Connection ID.
     * @param {module:model/Connection} connection 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields. 
     * @param {module:api/ConnectionApi~patchConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connection}
     */
    patchConnection(connectionId, connection, opts, callback) {
      opts = opts || {};
      let postBody = connection;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling patchConnection");
      }
      // verify the required parameter 'connection' is set
      if (connection === undefined || connection === null) {
        throw new Error("Missing the required parameter 'connection' when calling patchConnection");
      }

      let pathParams = {
        'connection_id': connectionId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Connection;
      return this.apiClient.callApi(
        '/connections/{connection_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConnection operation.
     * @callback module:api/ConnectionApi~postConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create connection entry
     * @param {module:model/Connection} connection 
     * @param {module:api/ConnectionApi~postConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connection}
     */
    postConnection(connection, callback) {
      let postBody = connection;
      // verify the required parameter 'connection' is set
      if (connection === undefined || connection === null) {
        throw new Error("Missing the required parameter 'connection' when calling postConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Connection;
      return this.apiClient.callApi(
        '/connections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
