/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DAGRun from '../model/DAGRun';
import DAGRunCollection from '../model/DAGRunCollection';
import Error from '../model/Error';
import ListDagRunsForm from '../model/ListDagRunsForm';

/**
* DAGRun service.
* @module api/DAGRunApi
* @version 1.0.0
*/
export default class DAGRunApi {

    /**
    * Constructs a new DAGRunApi. 
    * @alias module:api/DAGRunApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDagRun operation.
     * @callback module:api/DAGRunApi~deleteDagRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a DAG Run
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {module:api/DAGRunApi~deleteDagRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDagRun(dagId, dagRunId, callback) {
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling deleteDagRun");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling deleteDagRun");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDagRun operation.
     * @callback module:api/DAGRunApi~getDagRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DAGRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a DAG Run
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {module:api/DAGRunApi~getDagRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DAGRun}
     */
    getDagRun(dagId, dagRunId, callback) {
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling getDagRun");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling getDagRun");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DAGRun;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDagRuns operation.
     * @callback module:api/DAGRunApi~getDagRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DAGRunCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all DAG Runs
     * This endpoint allows specifying `~` as the dag_id to retrieve DAG Runs for all DAGs. 
     * @param {String} dagId The DAG ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The numbers of items to return. (default to 100)
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set.
     * @param {Date} opts.executionDateGte Returns objects greater or equal to the specified date. This can be combined with execution_date_lte parameter to receive only the selected period. 
     * @param {Date} opts.executionDateLte Returns objects less than or equal to the specified date. This can be combined with execution_date_gte parameter to receive only the selected period. 
     * @param {Date} opts.startDateGte Returns objects greater or equal the specified date. This can be combined with startd_ate_lte parameter to receive only the selected period. 
     * @param {Date} opts.startDateLte Returns objects less or equal the specified date. This can be combined with start_date_gte parameter to receive only the selected period. 
     * @param {Date} opts.endDateGte Returns objects greater or equal the specified date. This can be combined with start_date_lte parameter to receive only the selected period. 
     * @param {Date} opts.endDateLte Returns objects less than or equal to the specified date. This can be combined with start_date_gte parameter to receive only the selected period. 
     * @param {module:api/DAGRunApi~getDagRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DAGRunCollection}
     */
    getDagRuns(dagId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling getDagRuns");
      }

      let pathParams = {
        'dag_id': dagId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'execution_date_gte': opts['executionDateGte'],
        'execution_date_lte': opts['executionDateLte'],
        'start_date_gte': opts['startDateGte'],
        'start_date_lte': opts['startDateLte'],
        'end_date_gte': opts['endDateGte'],
        'end_date_lte': opts['endDateLte']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DAGRunCollection;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDagRunsBatch operation.
     * @callback module:api/DAGRunApi~getDagRunsBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DAGRunCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all DAG Runs from aall DAGs.
     * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL lengthlimits 
     * @param {module:model/ListDagRunsForm} listDagRunsForm 
     * @param {module:api/DAGRunApi~getDagRunsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DAGRunCollection}
     */
    getDagRunsBatch(listDagRunsForm, callback) {
      let postBody = listDagRunsForm;
      // verify the required parameter 'listDagRunsForm' is set
      if (listDagRunsForm === undefined || listDagRunsForm === null) {
        throw new Error("Missing the required parameter 'listDagRunsForm' when calling getDagRunsBatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DAGRunCollection;
      return this.apiClient.callApi(
        '/dags/~/dagRuns/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDagRun operation.
     * @callback module:api/DAGRunApi~patchDagRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DAGRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a DAG Run
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {module:model/DAGRun} dAGRun 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask The fields to update on the connection (connection, pool etc). If absent or empty, all modifiable fields are updated. A comma-separated list of fully qualified names of fields. 
     * @param {module:api/DAGRunApi~patchDagRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DAGRun}
     */
    patchDagRun(dagId, dagRunId, dAGRun, opts, callback) {
      opts = opts || {};
      let postBody = dAGRun;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling patchDagRun");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling patchDagRun");
      }
      // verify the required parameter 'dAGRun' is set
      if (dAGRun === undefined || dAGRun === null) {
        throw new Error("Missing the required parameter 'dAGRun' when calling patchDagRun");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DAGRun;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDagRun operation.
     * @callback module:api/DAGRunApi~postDagRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DAGRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a DAG Run
     * @param {String} dagId The DAG ID.
     * @param {String} dagRunId The DAG Run ID.
     * @param {module:model/DAGRun} dAGRun 
     * @param {module:api/DAGRunApi~postDagRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DAGRun}
     */
    postDagRun(dagId, dagRunId, dAGRun, callback) {
      let postBody = dAGRun;
      // verify the required parameter 'dagId' is set
      if (dagId === undefined || dagId === null) {
        throw new Error("Missing the required parameter 'dagId' when calling postDagRun");
      }
      // verify the required parameter 'dagRunId' is set
      if (dagRunId === undefined || dagRunId === null) {
        throw new Error("Missing the required parameter 'dagRunId' when calling postDagRun");
      }
      // verify the required parameter 'dAGRun' is set
      if (dAGRun === undefined || dAGRun === null) {
        throw new Error("Missing the required parameter 'dAGRun' when calling postDagRun");
      }

      let pathParams = {
        'dag_id': dagId,
        'dag_run_id': dagRunId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DAGRun;
      return this.apiClient.callApi(
        '/dags/{dag_id}/dagRuns/{dag_run_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
