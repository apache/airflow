/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Error model module.
 * @module model/Error
 * @version 1.0.0
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * [RFC7807](https://tools.ietf.org/html/rfc7807) compliant response 
     * @alias module:model/Error
     * @param type {String} A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. 
     * @param title {String} A short, human-readable summary of the problem  type.
     * @param status {Number} The HTTP status code generated by the API server for this occurrence of the problem.
     */
    constructor(type, title, status) { 
        
        Error.initialize(this, type, title, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, title, status) { 
        obj['type'] = type;
        obj['title'] = title;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. 
 * @member {String} type
 */
Error.prototype['type'] = undefined;

/**
 * A short, human-readable summary of the problem  type.
 * @member {String} title
 */
Error.prototype['title'] = undefined;

/**
 * The HTTP status code generated by the API server for this occurrence of the problem.
 * @member {Number} status
 */
Error.prototype['status'] = undefined;

/**
 * A human-readable explanation specific to this occurrence of the problem.
 * @member {String} detail
 */
Error.prototype['detail'] = undefined;

/**
 * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. 
 * @member {String} instance
 */
Error.prototype['instance'] = undefined;






export default Error;

