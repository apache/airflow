/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScheduleInterval from './ScheduleInterval';
import Tag from './Tag';

/**
 * The DAG model module.
 * @module model/DAG
 * @version 1.0.0
 */
class DAG {
    /**
     * Constructs a new <code>DAG</code>.
     * @alias module:model/DAG
     */
    constructor() { 
        
        DAG.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DAG</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DAG} obj Optional instance to populate.
     * @return {module:model/DAG} The populated <code>DAG</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DAG();

            if (data.hasOwnProperty('dag_id')) {
                obj['dag_id'] = ApiClient.convertToType(data['dag_id'], 'String');
            }
            if (data.hasOwnProperty('root_dag_id')) {
                obj['root_dag_id'] = ApiClient.convertToType(data['root_dag_id'], 'String');
            }
            if (data.hasOwnProperty('is_paused')) {
                obj['is_paused'] = ApiClient.convertToType(data['is_paused'], 'Boolean');
            }
            if (data.hasOwnProperty('is_subdag')) {
                obj['is_subdag'] = ApiClient.convertToType(data['is_subdag'], 'Boolean');
            }
            if (data.hasOwnProperty('fileloc')) {
                obj['fileloc'] = ApiClient.convertToType(data['fileloc'], 'String');
            }
            if (data.hasOwnProperty('file_token')) {
                obj['file_token'] = ApiClient.convertToType(data['file_token'], 'String');
            }
            if (data.hasOwnProperty('owners')) {
                obj['owners'] = ApiClient.convertToType(data['owners'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('schedule_interval')) {
                obj['schedule_interval'] = ScheduleInterval.constructFromObject(data['schedule_interval']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} dag_id
 */
DAG.prototype['dag_id'] = undefined;

/**
 * @member {String} root_dag_id
 */
DAG.prototype['root_dag_id'] = undefined;

/**
 * @member {Boolean} is_paused
 */
DAG.prototype['is_paused'] = undefined;

/**
 * @member {Boolean} is_subdag
 */
DAG.prototype['is_subdag'] = undefined;

/**
 * @member {String} fileloc
 */
DAG.prototype['fileloc'] = undefined;

/**
 * The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change. 
 * @member {String} file_token
 */
DAG.prototype['file_token'] = undefined;

/**
 * @member {Array.<String>} owners
 */
DAG.prototype['owners'] = undefined;

/**
 * @member {String} description
 */
DAG.prototype['description'] = undefined;

/**
 * @member {module:model/ScheduleInterval} schedule_interval
 */
DAG.prototype['schedule_interval'] = undefined;

/**
 * @member {Array.<module:model/Tag>} tags
 */
DAG.prototype['tags'] = undefined;






export default DAG;

