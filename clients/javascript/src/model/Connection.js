/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionAllOf from './ConnectionAllOf';
import ConnectionCollectionItem from './ConnectionCollectionItem';

/**
 * The Connection model module.
 * @module model/Connection
 * @version 1.0.0
 */
class Connection {
    /**
     * Constructs a new <code>Connection</code>.
     * @alias module:model/Connection
     * @implements module:model/ConnectionCollectionItem
     * @implements module:model/ConnectionAllOf
     * @param connectionId {String} 
     * @param connType {String} 
     */
    constructor(connectionId, connType) { 
        ConnectionCollectionItem.initialize(this, connectionId, connType);ConnectionAllOf.initialize(this);
        Connection.initialize(this, connectionId, connType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionId, connType) { 
        obj['connection_id'] = connectionId;
        obj['conn_type'] = connType;
    }

    /**
     * Constructs a <code>Connection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connection} obj Optional instance to populate.
     * @return {module:model/Connection} The populated <code>Connection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connection();
            ConnectionCollectionItem.constructFromObject(data, obj);
            ConnectionAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('connection_id')) {
                obj['connection_id'] = ApiClient.convertToType(data['connection_id'], 'String');
            }
            if (data.hasOwnProperty('conn_type')) {
                obj['conn_type'] = ApiClient.convertToType(data['conn_type'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = ApiClient.convertToType(data['extra'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} connection_id
 */
Connection.prototype['connection_id'] = undefined;

/**
 * @member {String} conn_type
 */
Connection.prototype['conn_type'] = undefined;

/**
 * @member {String} host
 */
Connection.prototype['host'] = undefined;

/**
 * @member {String} login
 */
Connection.prototype['login'] = undefined;

/**
 * @member {String} schema
 */
Connection.prototype['schema'] = undefined;

/**
 * @member {Number} port
 */
Connection.prototype['port'] = undefined;

/**
 * @member {String} password
 */
Connection.prototype['password'] = undefined;

/**
 * @member {String} extra
 */
Connection.prototype['extra'] = undefined;


// Implement ConnectionCollectionItem interface:
/**
 * @member {String} connection_id
 */
ConnectionCollectionItem.prototype['connection_id'] = undefined;
/**
 * @member {String} conn_type
 */
ConnectionCollectionItem.prototype['conn_type'] = undefined;
/**
 * @member {String} host
 */
ConnectionCollectionItem.prototype['host'] = undefined;
/**
 * @member {String} login
 */
ConnectionCollectionItem.prototype['login'] = undefined;
/**
 * @member {String} schema
 */
ConnectionCollectionItem.prototype['schema'] = undefined;
/**
 * @member {Number} port
 */
ConnectionCollectionItem.prototype['port'] = undefined;
// Implement ConnectionAllOf interface:
/**
 * @member {String} password
 */
ConnectionAllOf.prototype['password'] = undefined;
/**
 * @member {String} extra
 */
ConnectionAllOf.prototype['extra'] = undefined;




export default Connection;

