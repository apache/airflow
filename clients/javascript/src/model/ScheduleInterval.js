/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CronExpression from './CronExpression';
import RelativeDelta from './RelativeDelta';
import TimeDelta from './TimeDelta';

/**
 * The ScheduleInterval model module.
 * @module model/ScheduleInterval
 * @version 1.0.0
 */
class ScheduleInterval {
    /**
     * Constructs a new <code>ScheduleInterval</code>.
     * @alias module:model/ScheduleInterval
     * @implements module:model/TimeDelta
     * @implements module:model/RelativeDelta
     * @implements module:model/CronExpression
     * @param type {String} 
     */
    constructor(type) { 
        TimeDelta.initialize(this, type);RelativeDelta.initialize(this, type);CronExpression.initialize(this, type);
        ScheduleInterval.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['__type'] = type;
    }

    /**
     * Constructs a <code>ScheduleInterval</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduleInterval} obj Optional instance to populate.
     * @return {module:model/ScheduleInterval} The populated <code>ScheduleInterval</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduleInterval();
            TimeDelta.constructFromObject(data, obj);
            RelativeDelta.constructFromObject(data, obj);
            CronExpression.constructFromObject(data, obj);

            if (data.hasOwnProperty('__type')) {
                obj['__type'] = ApiClient.convertToType(data['__type'], 'String');
            }
            if (data.hasOwnProperty('days')) {
                obj['days'] = ApiClient.convertToType(data['days'], 'Number');
            }
            if (data.hasOwnProperty('seconds')) {
                obj['seconds'] = ApiClient.convertToType(data['seconds'], 'Number');
            }
            if (data.hasOwnProperty('microsecond')) {
                obj['microsecond'] = ApiClient.convertToType(data['microsecond'], 'Number');
            }
            if (data.hasOwnProperty('years')) {
                obj['years'] = ApiClient.convertToType(data['years'], 'Number');
            }
            if (data.hasOwnProperty('months')) {
                obj['months'] = ApiClient.convertToType(data['months'], 'Number');
            }
            if (data.hasOwnProperty('leapdays')) {
                obj['leapdays'] = ApiClient.convertToType(data['leapdays'], 'Number');
            }
            if (data.hasOwnProperty('hours')) {
                obj['hours'] = ApiClient.convertToType(data['hours'], 'Number');
            }
            if (data.hasOwnProperty('minutes')) {
                obj['minutes'] = ApiClient.convertToType(data['minutes'], 'Number');
            }
            if (data.hasOwnProperty('microseconds')) {
                obj['microseconds'] = ApiClient.convertToType(data['microseconds'], 'Number');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'Number');
            }
            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'Number');
            }
            if (data.hasOwnProperty('hour')) {
                obj['hour'] = ApiClient.convertToType(data['hour'], 'Number');
            }
            if (data.hasOwnProperty('minute')) {
                obj['minute'] = ApiClient.convertToType(data['minute'], 'Number');
            }
            if (data.hasOwnProperty('second')) {
                obj['second'] = ApiClient.convertToType(data['second'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} __type
 */
ScheduleInterval.prototype['__type'] = undefined;

/**
 * @member {Number} days
 */
ScheduleInterval.prototype['days'] = undefined;

/**
 * @member {Number} seconds
 */
ScheduleInterval.prototype['seconds'] = undefined;

/**
 * @member {Number} microsecond
 */
ScheduleInterval.prototype['microsecond'] = undefined;

/**
 * @member {Number} years
 */
ScheduleInterval.prototype['years'] = undefined;

/**
 * @member {Number} months
 */
ScheduleInterval.prototype['months'] = undefined;

/**
 * @member {Number} leapdays
 */
ScheduleInterval.prototype['leapdays'] = undefined;

/**
 * @member {Number} hours
 */
ScheduleInterval.prototype['hours'] = undefined;

/**
 * @member {Number} minutes
 */
ScheduleInterval.prototype['minutes'] = undefined;

/**
 * @member {Number} microseconds
 */
ScheduleInterval.prototype['microseconds'] = undefined;

/**
 * @member {Number} year
 */
ScheduleInterval.prototype['year'] = undefined;

/**
 * @member {Number} month
 */
ScheduleInterval.prototype['month'] = undefined;

/**
 * @member {Number} day
 */
ScheduleInterval.prototype['day'] = undefined;

/**
 * @member {Number} hour
 */
ScheduleInterval.prototype['hour'] = undefined;

/**
 * @member {Number} minute
 */
ScheduleInterval.prototype['minute'] = undefined;

/**
 * @member {Number} second
 */
ScheduleInterval.prototype['second'] = undefined;

/**
 * @member {String} value
 */
ScheduleInterval.prototype['value'] = undefined;


// Implement TimeDelta interface:
/**
 * @member {String} __type
 */
TimeDelta.prototype['__type'] = undefined;
/**
 * @member {Number} days
 */
TimeDelta.prototype['days'] = undefined;
/**
 * @member {Number} seconds
 */
TimeDelta.prototype['seconds'] = undefined;
/**
 * @member {Number} microsecond
 */
TimeDelta.prototype['microsecond'] = undefined;
// Implement RelativeDelta interface:
/**
 * @member {String} __type
 */
RelativeDelta.prototype['__type'] = undefined;
/**
 * @member {Number} years
 */
RelativeDelta.prototype['years'] = undefined;
/**
 * @member {Number} months
 */
RelativeDelta.prototype['months'] = undefined;
/**
 * @member {Number} days
 */
RelativeDelta.prototype['days'] = undefined;
/**
 * @member {Number} leapdays
 */
RelativeDelta.prototype['leapdays'] = undefined;
/**
 * @member {Number} hours
 */
RelativeDelta.prototype['hours'] = undefined;
/**
 * @member {Number} minutes
 */
RelativeDelta.prototype['minutes'] = undefined;
/**
 * @member {Number} seconds
 */
RelativeDelta.prototype['seconds'] = undefined;
/**
 * @member {Number} microseconds
 */
RelativeDelta.prototype['microseconds'] = undefined;
/**
 * @member {Number} year
 */
RelativeDelta.prototype['year'] = undefined;
/**
 * @member {Number} month
 */
RelativeDelta.prototype['month'] = undefined;
/**
 * @member {Number} day
 */
RelativeDelta.prototype['day'] = undefined;
/**
 * @member {Number} hour
 */
RelativeDelta.prototype['hour'] = undefined;
/**
 * @member {Number} minute
 */
RelativeDelta.prototype['minute'] = undefined;
/**
 * @member {Number} second
 */
RelativeDelta.prototype['second'] = undefined;
/**
 * @member {Number} microsecond
 */
RelativeDelta.prototype['microsecond'] = undefined;
// Implement CronExpression interface:
/**
 * @member {String} __type
 */
CronExpression.prototype['__type'] = undefined;
/**
 * @member {String} value
 */
CronExpression.prototype['value'] = undefined;




export default ScheduleInterval;

