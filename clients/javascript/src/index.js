/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ClassReference from './model/ClassReference';
import ClearTaskInstance from './model/ClearTaskInstance';
import CollectionInfo from './model/CollectionInfo';
import Config from './model/Config';
import ConfigOption from './model/ConfigOption';
import ConfigSection from './model/ConfigSection';
import Connection from './model/Connection';
import ConnectionAllOf from './model/ConnectionAllOf';
import ConnectionCollection from './model/ConnectionCollection';
import ConnectionCollectionItem from './model/ConnectionCollectionItem';
import CronExpression from './model/CronExpression';
import DAG from './model/DAG';
import DAGCollection from './model/DAGCollection';
import DAGDetail from './model/DAGDetail';
import DAGDetailAllOf from './model/DAGDetailAllOf';
import DAGRun from './model/DAGRun';
import DAGRunCollection from './model/DAGRunCollection';
import DagState from './model/DagState';
import Error from './model/Error';
import EventLog from './model/EventLog';
import EventLogCollection from './model/EventLogCollection';
import ExtraLink from './model/ExtraLink';
import ExtraLinkCollection from './model/ExtraLinkCollection';
import ImportError from './model/ImportError';
import ImportErrorCollection from './model/ImportErrorCollection';
import InlineResponse200 from './model/InlineResponse200';
import InlineResponse2001 from './model/InlineResponse2001';
import ListDagRunsForm from './model/ListDagRunsForm';
import ListTaskInstanceForm from './model/ListTaskInstanceForm';
import Pool from './model/Pool';
import PoolCollection from './model/PoolCollection';
import RelativeDelta from './model/RelativeDelta';
import SLAMiss from './model/SLAMiss';
import SLAMissCollection from './model/SLAMissCollection';
import ScheduleInterval from './model/ScheduleInterval';
import Tag from './model/Tag';
import Task from './model/Task';
import TaskCollection from './model/TaskCollection';
import TaskExtraLinks from './model/TaskExtraLinks';
import TaskFail from './model/TaskFail';
import TaskInstance from './model/TaskInstance';
import TaskInstanceCollection from './model/TaskInstanceCollection';
import TaskInstanceReference from './model/TaskInstanceReference';
import TaskInstanceReferenceCollection from './model/TaskInstanceReferenceCollection';
import TaskState from './model/TaskState';
import TimeDelta from './model/TimeDelta';
import TriggerRule from './model/TriggerRule';
import Variable from './model/Variable';
import VariableAllOf from './model/VariableAllOf';
import VariableCollection from './model/VariableCollection';
import VariableCollectionItem from './model/VariableCollectionItem';
import VersionInfo from './model/VersionInfo';
import WeightRule from './model/WeightRule';
import XCom from './model/XCom';
import XComCollection from './model/XComCollection';
import XComCollectionItem from './model/XComCollectionItem';
import ConfigApi from './api/ConfigApi';
import ConnectionApi from './api/ConnectionApi';
import DAGApi from './api/DAGApi';
import DAGRunApi from './api/DAGRunApi';
import EventLogApi from './api/EventLogApi';
import ImportErrorApi from './api/ImportErrorApi';
import MonitoringApi from './api/MonitoringApi';
import PoolApi from './api/PoolApi';
import TaskInstanceApi from './api/TaskInstanceApi';
import VariableApi from './api/VariableApi';
import XComApi from './api/XComApi';


/**
* Apache_Airflow_management_API_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AirflowApiStable = require('index'); // See note below*.
* var xxxSvc = new AirflowApiStable.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AirflowApiStable.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AirflowApiStable.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AirflowApiStable.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ClassReference model constructor.
     * @property {module:model/ClassReference}
     */
    ClassReference,

    /**
     * The ClearTaskInstance model constructor.
     * @property {module:model/ClearTaskInstance}
     */
    ClearTaskInstance,

    /**
     * The CollectionInfo model constructor.
     * @property {module:model/CollectionInfo}
     */
    CollectionInfo,

    /**
     * The Config model constructor.
     * @property {module:model/Config}
     */
    Config,

    /**
     * The ConfigOption model constructor.
     * @property {module:model/ConfigOption}
     */
    ConfigOption,

    /**
     * The ConfigSection model constructor.
     * @property {module:model/ConfigSection}
     */
    ConfigSection,

    /**
     * The Connection model constructor.
     * @property {module:model/Connection}
     */
    Connection,

    /**
     * The ConnectionAllOf model constructor.
     * @property {module:model/ConnectionAllOf}
     */
    ConnectionAllOf,

    /**
     * The ConnectionCollection model constructor.
     * @property {module:model/ConnectionCollection}
     */
    ConnectionCollection,

    /**
     * The ConnectionCollectionItem model constructor.
     * @property {module:model/ConnectionCollectionItem}
     */
    ConnectionCollectionItem,

    /**
     * The CronExpression model constructor.
     * @property {module:model/CronExpression}
     */
    CronExpression,

    /**
     * The DAG model constructor.
     * @property {module:model/DAG}
     */
    DAG,

    /**
     * The DAGCollection model constructor.
     * @property {module:model/DAGCollection}
     */
    DAGCollection,

    /**
     * The DAGDetail model constructor.
     * @property {module:model/DAGDetail}
     */
    DAGDetail,

    /**
     * The DAGDetailAllOf model constructor.
     * @property {module:model/DAGDetailAllOf}
     */
    DAGDetailAllOf,

    /**
     * The DAGRun model constructor.
     * @property {module:model/DAGRun}
     */
    DAGRun,

    /**
     * The DAGRunCollection model constructor.
     * @property {module:model/DAGRunCollection}
     */
    DAGRunCollection,

    /**
     * The DagState model constructor.
     * @property {module:model/DagState}
     */
    DagState,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The EventLog model constructor.
     * @property {module:model/EventLog}
     */
    EventLog,

    /**
     * The EventLogCollection model constructor.
     * @property {module:model/EventLogCollection}
     */
    EventLogCollection,

    /**
     * The ExtraLink model constructor.
     * @property {module:model/ExtraLink}
     */
    ExtraLink,

    /**
     * The ExtraLinkCollection model constructor.
     * @property {module:model/ExtraLinkCollection}
     */
    ExtraLinkCollection,

    /**
     * The ImportError model constructor.
     * @property {module:model/ImportError}
     */
    ImportError,

    /**
     * The ImportErrorCollection model constructor.
     * @property {module:model/ImportErrorCollection}
     */
    ImportErrorCollection,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The InlineResponse2001 model constructor.
     * @property {module:model/InlineResponse2001}
     */
    InlineResponse2001,

    /**
     * The ListDagRunsForm model constructor.
     * @property {module:model/ListDagRunsForm}
     */
    ListDagRunsForm,

    /**
     * The ListTaskInstanceForm model constructor.
     * @property {module:model/ListTaskInstanceForm}
     */
    ListTaskInstanceForm,

    /**
     * The Pool model constructor.
     * @property {module:model/Pool}
     */
    Pool,

    /**
     * The PoolCollection model constructor.
     * @property {module:model/PoolCollection}
     */
    PoolCollection,

    /**
     * The RelativeDelta model constructor.
     * @property {module:model/RelativeDelta}
     */
    RelativeDelta,

    /**
     * The SLAMiss model constructor.
     * @property {module:model/SLAMiss}
     */
    SLAMiss,

    /**
     * The SLAMissCollection model constructor.
     * @property {module:model/SLAMissCollection}
     */
    SLAMissCollection,

    /**
     * The ScheduleInterval model constructor.
     * @property {module:model/ScheduleInterval}
     */
    ScheduleInterval,

    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag,

    /**
     * The Task model constructor.
     * @property {module:model/Task}
     */
    Task,

    /**
     * The TaskCollection model constructor.
     * @property {module:model/TaskCollection}
     */
    TaskCollection,

    /**
     * The TaskExtraLinks model constructor.
     * @property {module:model/TaskExtraLinks}
     */
    TaskExtraLinks,

    /**
     * The TaskFail model constructor.
     * @property {module:model/TaskFail}
     */
    TaskFail,

    /**
     * The TaskInstance model constructor.
     * @property {module:model/TaskInstance}
     */
    TaskInstance,

    /**
     * The TaskInstanceCollection model constructor.
     * @property {module:model/TaskInstanceCollection}
     */
    TaskInstanceCollection,

    /**
     * The TaskInstanceReference model constructor.
     * @property {module:model/TaskInstanceReference}
     */
    TaskInstanceReference,

    /**
     * The TaskInstanceReferenceCollection model constructor.
     * @property {module:model/TaskInstanceReferenceCollection}
     */
    TaskInstanceReferenceCollection,

    /**
     * The TaskState model constructor.
     * @property {module:model/TaskState}
     */
    TaskState,

    /**
     * The TimeDelta model constructor.
     * @property {module:model/TimeDelta}
     */
    TimeDelta,

    /**
     * The TriggerRule model constructor.
     * @property {module:model/TriggerRule}
     */
    TriggerRule,

    /**
     * The Variable model constructor.
     * @property {module:model/Variable}
     */
    Variable,

    /**
     * The VariableAllOf model constructor.
     * @property {module:model/VariableAllOf}
     */
    VariableAllOf,

    /**
     * The VariableCollection model constructor.
     * @property {module:model/VariableCollection}
     */
    VariableCollection,

    /**
     * The VariableCollectionItem model constructor.
     * @property {module:model/VariableCollectionItem}
     */
    VariableCollectionItem,

    /**
     * The VersionInfo model constructor.
     * @property {module:model/VersionInfo}
     */
    VersionInfo,

    /**
     * The WeightRule model constructor.
     * @property {module:model/WeightRule}
     */
    WeightRule,

    /**
     * The XCom model constructor.
     * @property {module:model/XCom}
     */
    XCom,

    /**
     * The XComCollection model constructor.
     * @property {module:model/XComCollection}
     */
    XComCollection,

    /**
     * The XComCollectionItem model constructor.
     * @property {module:model/XComCollectionItem}
     */
    XComCollectionItem,

    /**
    * The ConfigApi service constructor.
    * @property {module:api/ConfigApi}
    */
    ConfigApi,

    /**
    * The ConnectionApi service constructor.
    * @property {module:api/ConnectionApi}
    */
    ConnectionApi,

    /**
    * The DAGApi service constructor.
    * @property {module:api/DAGApi}
    */
    DAGApi,

    /**
    * The DAGRunApi service constructor.
    * @property {module:api/DAGRunApi}
    */
    DAGRunApi,

    /**
    * The EventLogApi service constructor.
    * @property {module:api/EventLogApi}
    */
    EventLogApi,

    /**
    * The ImportErrorApi service constructor.
    * @property {module:api/ImportErrorApi}
    */
    ImportErrorApi,

    /**
    * The MonitoringApi service constructor.
    * @property {module:api/MonitoringApi}
    */
    MonitoringApi,

    /**
    * The PoolApi service constructor.
    * @property {module:api/PoolApi}
    */
    PoolApi,

    /**
    * The TaskInstanceApi service constructor.
    * @property {module:api/TaskInstanceApi}
    */
    TaskInstanceApi,

    /**
    * The VariableApi service constructor.
    * @property {module:api/VariableApi}
    */
    VariableApi,

    /**
    * The XComApi service constructor.
    * @property {module:api/XComApi}
    */
    XComApi
};
