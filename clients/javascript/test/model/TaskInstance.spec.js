/**
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AirflowApiStable);
  }
}(this, function(expect, AirflowApiStable) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AirflowApiStable.TaskInstance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TaskInstance', function() {
    it('should create an instance of TaskInstance', function() {
      // uncomment below and update the code to test TaskInstance
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be.a(AirflowApiStable.TaskInstance);
    });

    it('should have the property taskId (base name: "task_id")', function() {
      // uncomment below and update the code to test the property taskId
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property dagId (base name: "dag_id")', function() {
      // uncomment below and update the code to test the property dagId
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property executionDate (base name: "execution_date")', function() {
      // uncomment below and update the code to test the property executionDate
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "start_date")', function() {
      // uncomment below and update the code to test the property startDate
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "end_date")', function() {
      // uncomment below and update the code to test the property endDate
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property tryNumber (base name: "try_number")', function() {
      // uncomment below and update the code to test the property tryNumber
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property maxTries (base name: "max_tries")', function() {
      // uncomment below and update the code to test the property maxTries
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property unixname (base name: "unixname")', function() {
      // uncomment below and update the code to test the property unixname
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property pool (base name: "pool")', function() {
      // uncomment below and update the code to test the property pool
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property poolSlots (base name: "pool_slots")', function() {
      // uncomment below and update the code to test the property poolSlots
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property queue (base name: "queue")', function() {
      // uncomment below and update the code to test the property queue
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property priorityWeight (base name: "priority_weight")', function() {
      // uncomment below and update the code to test the property priorityWeight
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property operator (base name: "operator")', function() {
      // uncomment below and update the code to test the property operator
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property queuedWhen (base name: "queued_when")', function() {
      // uncomment below and update the code to test the property queuedWhen
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property pid (base name: "pid")', function() {
      // uncomment below and update the code to test the property pid
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property executorConfig (base name: "executor_config")', function() {
      // uncomment below and update the code to test the property executorConfig
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

    it('should have the property slaMiss (base name: "sla_miss")', function() {
      // uncomment below and update the code to test the property slaMiss
      //var instane = new AirflowApiStable.TaskInstance();
      //expect(instance).to.be();
    });

  });

}));
