/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.airflow.client.api;

import org.apache.airflow.client.ApiException;
import org.openapitools.client.model.ClearTaskInstance;
import org.openapitools.client.model.DAG;
import org.openapitools.client.model.DAGCollection;
import org.openapitools.client.model.DAGDetail;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskCollection;
import org.openapitools.client.model.TaskInstanceReferenceCollection;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DagApi
 */
public class DagApiTest {

    private final DagApi api = new DagApi();

    /**
     * Get basic information about a DAG
     *
     * Presents only information available in database (DAGModel). If you need detailed information, consider using GET /dags/{dag_id}/detail. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsDagEndpointGetDagTest() throws ApiException {
        //
        //String dagId = null;
        //
        //DAG response = api.airflowApiConnexionEndpointsDagEndpointGetDag(dagId);

        // TODO: test validations
    }
    /**
     * Get a simplified representation of DAG.
     *
     * The response contains many DAG attributes, so the response can be large. If possible, consider using GET /dags/{dag_id}. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsDagEndpointGetDagDetailsTest() throws ApiException {
        //
        //String dagId = null;
        //
        //DAGDetail response = api.airflowApiConnexionEndpointsDagEndpointGetDagDetails(dagId);

        // TODO: test validations
    }
    /**
     * Get all DAGs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsDagEndpointGetDagsTest() throws ApiException {
        //
        //Integer limit = null;
        //
        //Integer offset = null;
        //
        //DAGCollection response = api.airflowApiConnexionEndpointsDagEndpointGetDags(limit, offset);

        // TODO: test validations
    }
    /**
     * Update a DAG
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsDagEndpointPatchDagTest() throws ApiException {
        //
        //String dagId = null;
        //
        //DAG DAG = null;
        //
        //DAG response = api.airflowApiConnexionEndpointsDagEndpointPatchDag(dagId, DAG);

        // TODO: test validations
    }
    /**
     * Get source code using file token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsDagSourceEndpointGetDagSourceTest() throws ApiException {
        //
        //String fileToken = null;
        //
        //InlineResponse2001 response = api.airflowApiConnexionEndpointsDagSourceEndpointGetDagSource(fileToken);

        // TODO: test validations
    }
    /**
     * Get simplified representation of a task.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsTaskEndpointGetTaskTest() throws ApiException {
        //
        //String dagId = null;
        //
        //String taskId = null;
        //
        //Task response = api.airflowApiConnexionEndpointsTaskEndpointGetTask(dagId, taskId);

        // TODO: test validations
    }
    /**
     * Get tasks for DAG
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsTaskEndpointGetTasksTest() throws ApiException {
        //
        //String dagId = null;
        //
        //TaskCollection response = api.airflowApiConnexionEndpointsTaskEndpointGetTasks(dagId);

        // TODO: test validations
    }
    /**
     * Clears a set of task instances associated with the DAG for a specified date range.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsTaskInstanceEndpointPostClearTaskInstancesTest() throws ApiException {
        //
        //String dagId = null;
        //
        //ClearTaskInstance clearTaskInstance = null;
        //
        //TaskInstanceReferenceCollection response = api.airflowApiConnexionEndpointsTaskInstanceEndpointPostClearTaskInstances(dagId, clearTaskInstance);

        // TODO: test validations
    }
}
