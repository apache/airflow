/*
 * Airflow API (Stable)
 * Apache Airflow management API.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@airflow.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.apache.airflow.client.api;

import org.apache.airflow.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.XCom;
import org.openapitools.client.model.XComCollection;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for XComApi
 */
public class XComApiTest {

    private final XComApi api = new XComApi();

    /**
     * Delete an XCom entry
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsXcomEndpointDeleteXcomEntryTest() throws ApiException {
        //
        //String dagId = null;
        //
        //String dagRunId = null;
        //
        //String taskId = null;
        //
        //String xcomKey = null;
        //
        //api.airflowApiConnexionEndpointsXcomEndpointDeleteXcomEntry(dagId, dagRunId, taskId, xcomKey);

        // TODO: test validations
    }
    /**
     * Get all XCom entries
     *
     * This endpoint allows specifying &#x60;~&#x60; as the dag_id, dag_run_id, task_id to retrieve XCOM entries for for all DAGs, DAG Runs and task instances.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsXcomEndpointGetXcomEntriesTest() throws ApiException {
        //
        //String dagId = null;
        //
        //String dagRunId = null;
        //
        //String taskId = null;
        //
        //Integer limit = null;
        //
        //Integer offset = null;
        //
        //XComCollection response = api.airflowApiConnexionEndpointsXcomEndpointGetXcomEntries(dagId, dagRunId, taskId, limit, offset);

        // TODO: test validations
    }
    /**
     * Get an XCom entry
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsXcomEndpointGetXcomEntryTest() throws ApiException {
        //
        //String dagId = null;
        //
        //String dagRunId = null;
        //
        //String taskId = null;
        //
        //String xcomKey = null;
        //
        //XCom response = api.airflowApiConnexionEndpointsXcomEndpointGetXcomEntry(dagId, dagRunId, taskId, xcomKey);

        // TODO: test validations
    }
    /**
     * Update an XCom entry
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsXcomEndpointPatchXcomEntryTest() throws ApiException {
        //
        //String dagId = null;
        //
        //String dagRunId = null;
        //
        //String taskId = null;
        //
        //String xcomKey = null;
        //
        //XCom xcom = null;
        //
        //List<String> updateMask = null;
        //
        //XCom response = api.airflowApiConnexionEndpointsXcomEndpointPatchXcomEntry(dagId, dagRunId, taskId, xcomKey, xcom, updateMask);

        // TODO: test validations
    }
    /**
     * Create an XCom entry
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void airflowApiConnexionEndpointsXcomEndpointPostXcomEntriesTest() throws ApiException {
        //
        //String dagId = null;
        //
        //String dagRunId = null;
        //
        //String taskId = null;
        //
        //XCom xcom = null;
        //
        //XCom response = api.airflowApiConnexionEndpointsXcomEndpointPostXcomEntries(dagId, dagRunId, taskId, xcom);

        // TODO: test validations
    }
}
