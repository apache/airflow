Fix connection access in API server contexts (plugins, log handlers)

Previously, hooks used in API server contexts (plugins, middlewares, log handlers) would fail with an ``ImportError``
for ``SUPERVISOR_COMMS``, because ``SUPERVISOR_COMMS`` only exists in worker execution contexts.

This has been fixed by implementing automatic context detection with separate secrets backend chains:

**Context Detection:**

- **Client contexts** (workers, DAG processors, triggerers): Automatically detected via ``SUPERVISOR_COMMS`` presence
- **Server contexts** (API server, scheduler, plugins): Automatically detected when ``SUPERVISOR_COMMS`` is not available
- No configuration required - works regardless of import order or plugin loading timing

**Backend Chains:**

- **Client**: ``EnvironmentVariablesBackend`` → ``ExecutionAPISecretsBackend`` (routes to Execution API)
- **Server**: ``EnvironmentVariablesBackend`` → ``MetastoreBackend`` (direct DB access)

This maintains the architectural separation where workers access resources only through the Execution API,
while API server components have direct database access.

**Impact:**

- Hooks like ``GCSHook``, ``S3Hook`` now work correctly in log handlers and plugins
- No code changes required for existing plugins or hooks
- Workers remain isolated from direct database access (network-level blocking still possible)
- External secrets backends (AWS Secrets Manager, Vault, etc.) continue to work in all contexts
- Automatic detection works regardless of initialization order

See: `#56120 <https://github.com/apache/airflow/issues/56120>`__, `#56583 <https://github.com/apache/airflow/issues/56583>`__

* Types of change

  * [ ] Dag changes
  * [ ] Config changes
  * [ ] API changes
  * [ ] CLI changes
  * [ ] Behaviour changes
  * [ ] Plugin changes
  * [ ] Dependency changes
  * [ ] Code interface changes
