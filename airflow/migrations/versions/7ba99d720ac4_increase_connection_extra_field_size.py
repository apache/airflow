#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

"""Increase connection.extra field size

Revision ID: 7ba99d720ac4
Revises: 852ae6c715af
Create Date: 2020-03-15 20:27:55.013805

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = '7ba99d720ac4'
down_revision = '852ae6c715af'
branch_labels = None
depends_on = None


def upgrade():
    """Apply Increase connection.extra field size"""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('job', schema=None) as batch_op:
        batch_op.drop_index('idx_job_state_heartbeat')
        batch_op.drop_index('job_type_heart')

    op.drop_table('job')
    # ### end Alembic commands ###


def downgrade():
    """Unapply Increase connection.extra field size"""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('job',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), nullable=True),
    sa.Column('state', sa.VARCHAR(length=20), nullable=True),
    sa.Column('job_type', sa.VARCHAR(length=30), nullable=True),
    sa.Column('start_date', sa.DATETIME(), nullable=True),
    sa.Column('end_date', sa.DATETIME(), nullable=True),
    sa.Column('latest_heartbeat', sa.DATETIME(), nullable=True),
    sa.Column('executor_class', sa.VARCHAR(length=500), nullable=True),
    sa.Column('hostname', sa.VARCHAR(length=500), nullable=True),
    sa.Column('unixname', sa.VARCHAR(length=1000), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('job', schema=None) as batch_op:
        batch_op.create_index('job_type_heart', ['job_type', 'latest_heartbeat'], unique=False)
        batch_op.create_index('idx_job_state_heartbeat', ['state', 'latest_heartbeat'], unique=False)

    # ### end Alembic commands ###
