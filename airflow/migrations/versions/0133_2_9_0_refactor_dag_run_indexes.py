#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

"""refactor dag run indexes

Revision ID: 24416f6bb2e2
Revises: 10b52ebd31f7
Create Date: 2024-01-10 13:34:19.038446

"""

import sqlalchemy as sa
from alembic import op


# revision identifiers, used by Alembic.
revision = "24416f6bb2e2"
down_revision = "10b52ebd31f7"
branch_labels = None
depends_on = None
airflow_version = '2.9.0'


def upgrade():
    """Apply refactor dag run indexes"""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("dag_run", schema=None) as batch_op:
        batch_op.drop_index("idx_dag_run_queued_dags", sqlite_where=sa.text("state='queued'"))
        batch_op.drop_index("idx_dag_run_running_dags", sqlite_where=sa.text("state='running'"))
        batch_op.drop_index("idx_last_scheduling_decision")
        batch_op.create_index(
            "idx_dag_run_running_queued",
            ["state", "dag_id"],
            unique=False,
            postgresql_where=sa.text("state IN ('running', 'queued')"),
            sqlite_where=sa.text("state IN ('running', 'queued')"),
        )

    # ### end Alembic commands ###


def downgrade():
    """Unapply refactor dag run indexes"""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("dag_run", schema=None) as batch_op:
        batch_op.drop_index(
            "idx_dag_run_running_queued",
            postgresql_where=sa.text("state IN ('running', 'queued')"),
            sqlite_where=sa.text("state IN ('running', 'queued')"),
        )
        batch_op.create_index("idx_last_scheduling_decision", ["last_scheduling_decision"], unique=False)
        batch_op.create_index(
            "idx_dag_run_running_dags",
            ["state", "dag_id"],
            unique=False,
            sqlite_where=sa.text("state='running'"),
        )
        batch_op.create_index(
            "idx_dag_run_queued_dags",
            ["state", "dag_id"],
            unique=False,
            sqlite_where=sa.text("state='queued'"),
        )
    # ### end Alembic commands ###
