# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
from __future__ import annotations

from typing import Any

import msgspec
from flask import request
from flask.sessions import SecureCookieSessionInterface
from flask_session.sqlalchemy import SqlAlchemySessionInterface
from markupsafe import Markup

MARKUP_TYPE_CODE = 100


def enc_hook(obj: Any) -> Any:
    if isinstance(obj, Markup):
        return msgspec.msgpack.Ext(MARKUP_TYPE_CODE, str(obj).encode())

    raise NotImplementedError(f"Objects of type {type(obj)} are not supported")


def ext_hook(code: int, data: memoryview) -> Any:
    if code == MARKUP_TYPE_CODE:
        msg = data.tobytes().decode()
        return Markup(msg)
    else:
        raise NotImplementedError(f"Extension type code {code} is not supported")


class _MsgSpecSerializer:
    def __init__(self):
        self.encoder = msgspec.msgpack.Encoder(enc_hook=enc_hook)
        self.decoder = msgspec.msgpack.Decoder(ext_hook=ext_hook)

    def encode(self, session):
        return self.encoder.encode(session)

    def decode(self, serialized_data):
        return self.decoder.decode(serialized_data)


class SessionExemptMixin:
    """Exempt certain blueprints/paths from autogenerated sessions."""

    def save_session(self, *args, **kwargs):
        """Prevent creating session from REST API and health requests."""
        if request.blueprint == "/api/v1":
            return None
        if request.path == "/health":
            return None
        return super().save_session(*args, **kwargs)


class AirflowDatabaseSessionInterface(SessionExemptMixin, SqlAlchemySessionInterface):
    """Session interface that exempts some routes and stores session data in the database."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.serializer = _MsgSpecSerializer()


class AirflowSecureCookieSessionInterface(SessionExemptMixin, SecureCookieSessionInterface):
    """Session interface that exempts some routes and stores session data in a signed cookie."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
