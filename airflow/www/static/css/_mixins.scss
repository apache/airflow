/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements. See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership. The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied. See the License for the
* specific language governing permissions and limitations
* under the License.
*/

/// Returns an appropriate color to ensure proper contrast
/// @param {Color} $base - The color to be tested
/// @param {Color} $dark - The color to return if $base is light
/// @param {Color} $light - The color to return if $base is dark
/// @param {Number} $threshold [$yiq-contrasted-threshold] - The YIQ lightness value that $base should be tested against. Acceptable values are between 0 and 255.
/// @returns {Color} - $dark if $base is light, $light is $base if dark
@function color-yiq($color, $dark, $light, $threshold: $yiq-contrasted-threshold) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= $threshold) {
    @return $dark;
  } @else {
    @return $light;
  }
}
