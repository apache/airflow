// This file is auto-generated by @hey-api/openapi-ts

/**
 * Serializer for AppBuilder Menu Item responses.
 */
export type AppBuilderMenuItemResponse = {
  name: string;
  href?: string | null;
  category?: string | null;
  [key: string]: unknown | string;
};

/**
 * Serializer for AppBuilder View responses.
 */
export type AppBuilderViewResponse = {
  name?: string | null;
  category?: string | null;
  view?: string | null;
  label?: string | null;
  [key: string]: unknown;
};

/**
 * Asset alias serializer for assets.
 */
export type AssetAliasSchema = {
  id: number;
  name: string;
};

/**
 * Asset collection response.
 */
export type AssetCollectionResponse = {
  assets: Array<AssetResponse>;
  total_entries: number;
};

/**
 * Asset event collection response.
 */
export type AssetEventCollectionResponse = {
  asset_events: Array<AssetEventResponse>;
  total_entries: number;
};

/**
 * Asset event serializer for responses.
 */
export type AssetEventResponse = {
  id: number;
  asset_id: number;
  uri: string;
  extra?: {
    [key: string]: unknown;
  } | null;
  source_task_id?: string | null;
  source_dag_id?: string | null;
  source_run_id?: string | null;
  source_map_index: number;
  created_dagruns: Array<DagRunAssetReference>;
  timestamp: string;
};

/**
 * Asset serializer for responses.
 */
export type AssetResponse = {
  id: number;
  uri: string;
  extra?: {
    [key: string]: unknown;
  } | null;
  created_at: string;
  updated_at: string;
  consuming_dags: Array<DagScheduleAssetReference>;
  producing_tasks: Array<TaskOutletAssetReference>;
  aliases: Array<AssetAliasSchema>;
};

/**
 * Backfill Collection serializer for responses.
 */
export type BackfillCollectionResponse = {
  backfills: Array<BackfillResponse>;
  total_entries: number;
};

/**
 * Object used for create backfill request.
 */
export type BackfillPostBody = {
  dag_id: string;
  from_date: string;
  to_date: string;
  run_backwards?: boolean;
  dag_run_conf?: {
    [key: string]: unknown;
  };
  reprocess_behavior?: ReprocessBehavior;
  max_active_runs?: number;
};

/**
 * Base serializer for Backfill.
 */
export type BackfillResponse = {
  id: number;
  dag_id: string;
  from_date: string;
  to_date: string;
  dag_run_conf: {
    [key: string]: unknown;
  };
  is_paused: boolean;
  reprocess_behavior: ReprocessBehavior;
  max_active_runs: number;
  created_at: string;
  completed_at: string | null;
  updated_at: string;
};

/**
 * Base status field for metadatabase and scheduler.
 */
export type BaseInfoSchema = {
  status: string | null;
};

/**
 * Connection Serializer for requests body.
 */
export type ConnectionBody = {
  connection_id: string;
  conn_type: string;
  description?: string | null;
  host?: string | null;
  login?: string | null;
  schema?: string | null;
  port?: number | null;
  password?: string | null;
  extra?: string | null;
};

/**
 * Connection Collection serializer for responses.
 */
export type ConnectionCollectionResponse = {
  connections: Array<ConnectionResponse>;
  total_entries: number;
};

/**
 * Connection serializer for responses.
 */
export type ConnectionResponse = {
  connection_id: string;
  conn_type: string;
  description: string | null;
  host: string | null;
  login: string | null;
  schema: string | null;
  port: number | null;
  password: string | null;
  extra: string | null;
};

/**
 * Connection Test serializer for responses.
 */
export type ConnectionTestResponse = {
  status: boolean;
  message: string;
};

/**
 * Create asset events request.
 */
export type CreateAssetEventsBody = {
  uri: string;
  extra?: {
    [key: string]: unknown;
  };
};

/**
 * DAG Collection serializer for responses.
 */
export type DAGCollectionResponse = {
  dags: Array<DAGResponse>;
  total_entries: number;
};

/**
 * Specific serializer for DAG Details responses.
 */
export type DAGDetailsResponse = {
  dag_id: string;
  dag_display_name: string;
  is_paused: boolean;
  is_active: boolean;
  last_parsed_time: string | null;
  last_expired: string | null;
  default_view: string | null;
  fileloc: string;
  description: string | null;
  timetable_summary: string | null;
  timetable_description: string | null;
  tags: Array<DagTagPydantic>;
  max_active_tasks: number;
  max_active_runs: number | null;
  max_consecutive_failed_dag_runs: number;
  has_task_concurrency_limits: boolean;
  has_import_errors: boolean;
  next_dagrun: string | null;
  next_dagrun_data_interval_start: string | null;
  next_dagrun_data_interval_end: string | null;
  next_dagrun_create_after: string | null;
  owners: Array<string>;
  catchup: boolean;
  dag_run_timeout: string | null;
  asset_expression: {
    [key: string]: unknown;
  } | null;
  doc_md: string | null;
  start_date: string | null;
  end_date: string | null;
  is_paused_upon_creation: boolean | null;
  params: {
    [key: string]: unknown;
  } | null;
  render_template_as_native_obj: boolean;
  template_search_path: Array<string> | null;
  timezone: string | null;
  last_parsed: string | null;
  /**
   * Return file token.
   */
  readonly file_token: string;
  /**
   * Return max_active_tasks as concurrency.
   */
  readonly concurrency: number;
};

/**
 * Dag Serializer for updatable bodies.
 */
export type DAGPatchBody = {
  is_paused: boolean;
};

/**
 * DAG serializer for responses.
 */
export type DAGResponse = {
  dag_id: string;
  dag_display_name: string;
  is_paused: boolean;
  is_active: boolean;
  last_parsed_time: string | null;
  last_expired: string | null;
  default_view: string | null;
  fileloc: string;
  description: string | null;
  timetable_summary: string | null;
  timetable_description: string | null;
  tags: Array<DagTagPydantic>;
  max_active_tasks: number;
  max_active_runs: number | null;
  max_consecutive_failed_dag_runs: number;
  has_task_concurrency_limits: boolean;
  has_import_errors: boolean;
  next_dagrun: string | null;
  next_dagrun_data_interval_start: string | null;
  next_dagrun_data_interval_end: string | null;
  next_dagrun_create_after: string | null;
  owners: Array<string>;
  /**
   * Return file token.
   */
  readonly file_token: string;
};

/**
 * DAG Run serializer for clear endpoint body.
 */
export type DAGRunClearBody = {
  dry_run?: boolean;
};

/**
 * DAG Run Serializer for PATCH requests.
 */
export type DAGRunPatchBody = {
  state?: DAGRunPatchStates | null;
  note?: string | null;
};

/**
 * Enum for DAG Run states when updating a DAG Run.
 */
export type DAGRunPatchStates = "queued" | "success" | "failed";

/**
 * DAG Run serializer for responses.
 */
export type DAGRunResponse = {
  run_id: string | null;
  dag_id: string;
  logical_date: string | null;
  queued_at: string | null;
  start_date: string | null;
  end_date: string | null;
  data_interval_start: string | null;
  data_interval_end: string | null;
  last_scheduling_decision: string | null;
  run_type: DagRunType;
  state: DagRunState;
  external_trigger: boolean;
  triggered_by: DagRunTriggeredByType;
  conf: {
    [key: string]: unknown;
  };
  note: string | null;
};

/**
 * DAG Run States for responses.
 */
export type DAGRunStates = {
  queued: number;
  running: number;
  success: number;
  failed: number;
};

/**
 * DAG Run Types for responses.
 */
export type DAGRunTypes = {
  backfill: number;
  scheduled: number;
  manual: number;
  asset_triggered: number;
};

/**
 * DAG Source serializer for responses.
 */
export type DAGSourceResponse = {
  content: string | null;
  dag_id: string;
  version_number: number | null;
};

/**
 * DAG Tags Collection serializer for responses.
 */
export type DAGTagCollectionResponse = {
  tags: Array<string>;
  total_entries: number;
};

/**
 * DAG warning collection serializer for responses.
 */
export type DAGWarningCollectionResponse = {
  dag_warnings: Array<DAGWarningResponse>;
  total_entries: number;
};

/**
 * DAG Warning serializer for responses.
 */
export type DAGWarningResponse = {
  dag_id: string;
  warning_type: DagWarningType;
  message: string;
  timestamp: string;
};

/**
 * DAG with latest dag runs collection response serializer.
 */
export type DAGWithLatestDagRunsCollectionResponse = {
  total_entries: number;
  dags: Array<DAGWithLatestDagRunsResponse>;
};

/**
 * DAG with latest dag runs response serializer.
 */
export type DAGWithLatestDagRunsResponse = {
  dag_id: string;
  dag_display_name: string;
  is_paused: boolean;
  is_active: boolean;
  last_parsed_time: string | null;
  last_expired: string | null;
  default_view: string | null;
  fileloc: string;
  description: string | null;
  timetable_summary: string | null;
  timetable_description: string | null;
  tags: Array<DagTagPydantic>;
  max_active_tasks: number;
  max_active_runs: number | null;
  max_consecutive_failed_dag_runs: number;
  has_task_concurrency_limits: boolean;
  has_import_errors: boolean;
  next_dagrun: string | null;
  next_dagrun_data_interval_start: string | null;
  next_dagrun_data_interval_end: string | null;
  next_dagrun_create_after: string | null;
  owners: Array<string>;
  latest_dag_runs: Array<DAGRunResponse>;
  /**
   * Return file token.
   */
  readonly file_token: string;
};

/**
 * Schema for DagProcessor info.
 */
export type DagProcessorInfoSchema = {
  status: string | null;
  latest_dag_processor_heartbeat: string | null;
};

/**
 * DAGRun serializer for asset responses.
 */
export type DagRunAssetReference = {
  run_id: string;
  dag_id: string;
  logical_date: string;
  start_date: string;
  end_date: string | null;
  state: string;
  data_interval_start: string;
  data_interval_end: string;
};

/**
 * All possible states that a DagRun can be in.
 *
 * These are "shared" with TaskInstanceState in some parts of the code,
 * so please ensure that their values always match the ones with the
 * same name in TaskInstanceState.
 */
export type DagRunState = "queued" | "running" | "success" | "failed";

/**
 * Class with TriggeredBy types for DagRun.
 */
export type DagRunTriggeredByType =
  | "cli"
  | "operator"
  | "rest_api"
  | "ui"
  | "test"
  | "timetable"
  | "asset"
  | "backfill";

/**
 * Class with DagRun types.
 */
export type DagRunType =
  | "backfill"
  | "scheduled"
  | "manual"
  | "asset_triggered";

/**
 * DAG schedule reference serializer for assets.
 */
export type DagScheduleAssetReference = {
  dag_id: string;
  created_at: string;
  updated_at: string;
};

/**
 * DAG Stats Collection serializer for responses.
 */
export type DagStatsCollectionResponse = {
  dags: Array<DagStatsResponse>;
  total_entries: number;
};

/**
 * DAG Stats serializer for responses.
 */
export type DagStatsResponse = {
  dag_id: string;
  stats: Array<DagStatsStateResponse>;
};

/**
 * DagStatsState serializer for responses.
 */
export type DagStatsStateResponse = {
  state: DagRunState;
  count: number;
};

/**
 * Serializable representation of the DagTag ORM SqlAlchemyModel used by internal API.
 */
export type DagTagPydantic = {
  name: string;
  dag_id: string;
};

/**
 * Enum for DAG warning types.
 *
 * This is the set of allowable values for the ``warning_type`` field
 * in the DagWarning model.
 */
export type DagWarningType = "asset conflict" | "non-existent pool";

/**
 * Event Log Collection Response.
 */
export type EventLogCollectionResponse = {
  event_logs: Array<EventLogResponse>;
  total_entries: number;
};

/**
 * Event Log Response.
 */
export type EventLogResponse = {
  event_log_id: number;
  when: string;
  dag_id: string | null;
  task_id: string | null;
  run_id: string | null;
  map_index: number | null;
  try_number: number | null;
  event: string;
  logical_date: string | null;
  owner: string | null;
  extra: string | null;
};

/**
 * Serializer for Plugin FastAPI App responses.
 */
export type FastAPIAppResponse = {
  app: string;
  url_prefix: string;
  name: string;
  [key: string]: unknown | string;
};

/**
 * HTTPException Model used for error response.
 */
export type HTTPExceptionResponse = {
  detail:
    | string
    | {
        [key: string]: unknown;
      };
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

/**
 * Schema for the Health endpoint.
 */
export type HealthInfoSchema = {
  metadatabase: BaseInfoSchema;
  scheduler: SchedulerInfoSchema;
  triggerer: TriggererInfoSchema;
  dag_processor: DagProcessorInfoSchema;
};

/**
 * Historical Metric Data serializer for responses.
 */
export type HistoricalMetricDataResponse = {
  dag_run_types: DAGRunTypes;
  dag_run_states: DAGRunStates;
  task_instance_states: TaskInstanceStateCount;
};

/**
 * Import Error Collection Response.
 */
export type ImportErrorCollectionResponse = {
  import_errors: Array<ImportErrorResponse>;
  total_entries: number;
};

/**
 * Import Error Response.
 */
export type ImportErrorResponse = {
  import_error_id: number;
  timestamp: string;
  filename: string;
  stack_trace: string;
};

/**
 * Job serializer for responses.
 */
export type JobResponse = {
  id: number;
  dag_id: string | null;
  state: string | null;
  job_type: string | null;
  start_date: string | null;
  end_date: string | null;
  latest_heartbeat: string | null;
  executor_class: string | null;
  hostname: string | null;
  unixname: string | null;
};

/**
 * Plugin Collection serializer.
 */
export type PluginCollectionResponse = {
  plugins: Array<PluginResponse>;
  total_entries: number;
};

/**
 * Plugin serializer.
 */
export type PluginResponse = {
  name: string;
  macros: Array<string>;
  flask_blueprints: Array<string>;
  fastapi_apps: Array<FastAPIAppResponse>;
  appbuilder_views: Array<AppBuilderViewResponse>;
  appbuilder_menu_items: Array<AppBuilderMenuItemResponse>;
  global_operator_extra_links: Array<string>;
  operator_extra_links: Array<string>;
  source: string;
  ti_deps: Array<string>;
  listeners: Array<string>;
  timetables: Array<string>;
};

/**
 * Pool Collection serializer for responses.
 */
export type PoolCollectionResponse = {
  pools: Array<PoolResponse>;
  total_entries: number;
};

/**
 * Pool serializer for patch bodies.
 */
export type PoolPatchBody = {
  pool?: string | null;
  slots?: number | null;
  description?: string | null;
  include_deferred?: boolean | null;
};

/**
 * Pool serializer for post bodies.
 */
export type PoolPostBody = {
  name: string;
  slots: number;
  description?: string | null;
  include_deferred?: boolean;
};

/**
 * Pool serializer for responses.
 */
export type PoolResponse = {
  name: string;
  slots: number;
  description: string | null;
  include_deferred: boolean;
  occupied_slots: number;
  running_slots: number;
  queued_slots: number;
  scheduled_slots: number;
  open_slots: number;
  deferred_slots: number;
};

/**
 * Provider Collection serializer for responses.
 */
export type ProviderCollectionResponse = {
  providers: Array<ProviderResponse>;
  total_entries: number;
};

/**
 * Provider serializer for responses.
 */
export type ProviderResponse = {
  package_name: string;
  description: string;
  version: string;
};

/**
 * Queued Event Collection serializer for responses.
 */
export type QueuedEventCollectionResponse = {
  queued_events: Array<QueuedEventResponse>;
  total_entries: number;
};

/**
 * Queued Event serializer for responses..
 */
export type QueuedEventResponse = {
  uri: string;
  dag_id: string;
  created_at: string;
};

/**
 * Internal enum for setting reprocess behavior in a backfill.
 *
 * :meta private:
 */
export type ReprocessBehavior = "failed" | "completed" | "none";

/**
 * Schema for Scheduler info.
 */
export type SchedulerInfoSchema = {
  status: string | null;
  latest_scheduler_heartbeat: string | null;
};

/**
 * Task collection serializer for responses.
 */
export type TaskCollectionResponse = {
  tasks: Array<TaskResponse>;
  total_entries: number;
};

/**
 * Task scheduling dependencies collection serializer for responses.
 */
export type TaskDependencyCollectionResponse = {
  dependencies: Array<TaskDependencyResponse>;
};

/**
 * Task Dependency serializer for responses.
 */
export type TaskDependencyResponse = {
  name: string;
  reason: string;
};

/**
 * Task Instance Collection serializer for responses.
 */
export type TaskInstanceCollectionResponse = {
  task_instances: Array<TaskInstanceResponse>;
  total_entries: number;
};

/**
 * TaskInstanceHistory serializer for responses.
 */
export type TaskInstanceHistoryResponse = {
  task_id: string;
  dag_id: string;
  dag_run_id: string;
  map_index: number;
  start_date: string | null;
  end_date: string | null;
  duration: number | null;
  state: TaskInstanceState | null;
  try_number: number;
  max_tries: number;
  task_display_name: string;
  hostname: string | null;
  unixname: string | null;
  pool: string;
  pool_slots: number;
  queue: string | null;
  priority_weight: number | null;
  operator: string | null;
  queued_when: string | null;
  pid: number | null;
  executor: string | null;
  executor_config: string;
};

/**
 * TaskInstance serializer for responses.
 */
export type TaskInstanceResponse = {
  id: string;
  task_id: string;
  dag_id: string;
  dag_run_id: string;
  map_index: number;
  logical_date: string;
  start_date: string | null;
  end_date: string | null;
  duration: number | null;
  state: TaskInstanceState | null;
  try_number: number;
  max_tries: number;
  task_display_name: string;
  hostname: string | null;
  unixname: string | null;
  pool: string;
  pool_slots: number;
  queue: string | null;
  priority_weight: number | null;
  operator: string | null;
  queued_when: string | null;
  pid: number | null;
  executor: string | null;
  executor_config: string;
  note: string | null;
  rendered_map_index: string | null;
  rendered_fields?: {
    [key: string]: unknown;
  };
  trigger: TriggerResponse | null;
  triggerer_job: JobResponse | null;
};

/**
 * All possible states that a Task Instance can be in.
 *
 * Note that None is also allowed, so always use this in a type hint with Optional.
 */
export type TaskInstanceState =
  | "removed"
  | "scheduled"
  | "queued"
  | "running"
  | "success"
  | "restarting"
  | "failed"
  | "up_for_retry"
  | "up_for_reschedule"
  | "upstream_failed"
  | "skipped"
  | "deferred";

/**
 * TaskInstance serializer for responses.
 */
export type TaskInstanceStateCount = {
  no_status: number;
  removed: number;
  scheduled: number;
  queued: number;
  running: number;
  success: number;
  restarting: number;
  failed: number;
  up_for_retry: number;
  up_for_reschedule: number;
  upstream_failed: number;
  skipped: number;
  deferred: number;
};

/**
 * Task Instance body for get batch.
 */
export type TaskInstancesBatchBody = {
  dag_ids?: Array<string> | null;
  dag_run_ids?: Array<string> | null;
  task_ids?: Array<string> | null;
  state?: Array<TaskInstanceState | null> | null;
  logical_date_gte?: string | null;
  logical_date_lte?: string | null;
  start_date_gte?: string | null;
  start_date_lte?: string | null;
  end_date_gte?: string | null;
  end_date_lte?: string | null;
  duration_gte?: number | null;
  duration_lte?: number | null;
  pool?: Array<string> | null;
  queue?: Array<string> | null;
  executor?: Array<string> | null;
  page_offset?: number;
  page_limit?: number;
  order_by?: string | null;
};

/**
 * Task outlet reference serializer for assets.
 */
export type TaskOutletAssetReference = {
  dag_id: string;
  task_id: string;
  created_at: string;
  updated_at: string;
};

/**
 * Task serializer for responses.
 */
export type TaskResponse = {
  task_id: string | null;
  task_display_name: string | null;
  owner: string | null;
  start_date: string | null;
  end_date: string | null;
  trigger_rule: string | null;
  depends_on_past: boolean;
  wait_for_downstream: boolean;
  retries: number | null;
  queue: string | null;
  pool: string | null;
  pool_slots: number | null;
  execution_timeout: TimeDelta | null;
  retry_delay: TimeDelta | null;
  retry_exponential_backoff: boolean;
  priority_weight: number | null;
  weight_rule: string | null;
  ui_color: string | null;
  ui_fgcolor: string | null;
  template_fields: Array<string> | null;
  downstream_task_ids: Array<string> | null;
  doc_md: string | null;
  operator_name: string | null;
  params: {
    [key: string]: unknown;
  } | null;
  class_ref: {
    [key: string]: unknown;
  } | null;
  is_mapped: boolean | null;
  /**
   * Extract and return extra_links.
   */
  readonly extra_links: Array<string>;
};

/**
 * TimeDelta can be used to interact with datetime.timedelta objects.
 */
export type TimeDelta = {
  __type?: string;
  days: number;
  seconds: number;
  microseconds: number;
};

/**
 * Trigger serializer for responses.
 */
export type TriggerResponse = {
  id: number;
  classpath: string;
  kwargs: string;
  created_date: string;
  triggerer_id: number | null;
};

/**
 * Schema for Triggerer info.
 */
export type TriggererInfoSchema = {
  status: string | null;
  latest_triggerer_heartbeat: string | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

/**
 * Variable serializer for bodies.
 */
export type VariableBody = {
  key: string;
  value: string | null;
  description?: string | null;
};

/**
 * Variable Collection serializer for responses.
 */
export type VariableCollectionResponse = {
  variables: Array<VariableResponse>;
  total_entries: number;
};

/**
 * Variable serializer for responses.
 */
export type VariableResponse = {
  key: string;
  value: string | null;
  description: string | null;
};

/**
 * Version information serializer for responses.
 */
export type VersionInfo = {
  version: string;
  git_version: string | null;
};

/**
 * XCom response serializer with native return type.
 */
export type XComResponseNative = {
  key: string;
  timestamp: string;
  logical_date: string;
  map_index: number;
  task_id: string;
  dag_id: string;
  value: unknown;
};

/**
 * XCom response serializer with string return type.
 */
export type XComResponseString = {
  key: string;
  timestamp: string;
  logical_date: string;
  map_index: number;
  task_id: string;
  dag_id: string;
  value: string | null;
};

export type NextRunAssetsData = {
  dagId: string;
};

export type NextRunAssetsResponse = {
  [key: string]: unknown;
};

export type GetAssetsData = {
  dagIds?: Array<string>;
  limit?: number;
  offset?: number;
  orderBy?: string;
  uriPattern?: string | null;
};

export type GetAssetsResponse = AssetCollectionResponse;

export type GetAssetEventsData = {
  assetId?: number | null;
  limit?: number;
  offset?: number;
  orderBy?: string;
  sourceDagId?: string | null;
  sourceMapIndex?: number | null;
  sourceRunId?: string | null;
  sourceTaskId?: string | null;
};

export type GetAssetEventsResponse = AssetEventCollectionResponse;

export type CreateAssetEventData = {
  requestBody: CreateAssetEventsBody;
};

export type CreateAssetEventResponse = AssetEventResponse;

export type GetAssetQueuedEventsData = {
  before?: string | null;
  uri: string;
};

export type GetAssetQueuedEventsResponse = QueuedEventCollectionResponse;

export type DeleteAssetQueuedEventsData = {
  before?: string | null;
  uri: string;
};

export type DeleteAssetQueuedEventsResponse = void;

export type GetAssetData = {
  uri: string;
};

export type GetAssetResponse = AssetResponse;

export type GetDagAssetQueuedEventsData = {
  before?: string | null;
  dagId: string;
};

export type GetDagAssetQueuedEventsResponse = QueuedEventCollectionResponse;

export type DeleteDagAssetQueuedEventsData = {
  before?: string | null;
  dagId: string;
};

export type DeleteDagAssetQueuedEventsResponse = void;

export type GetDagAssetQueuedEventData = {
  before?: string | null;
  dagId: string;
  uri: string;
};

export type GetDagAssetQueuedEventResponse = QueuedEventResponse;

export type DeleteDagAssetQueuedEventData = {
  before?: string | null;
  dagId: string;
  uri: string;
};

export type DeleteDagAssetQueuedEventResponse = void;

export type HistoricalMetricsData = {
  endDate?: string | null;
  startDate: string;
};

export type HistoricalMetricsResponse = HistoricalMetricDataResponse;

export type RecentDagRunsData = {
  dagDisplayNamePattern?: string | null;
  dagIdPattern?: string | null;
  dagRunsLimit?: number;
  lastDagRunState?: DagRunState | null;
  limit?: number;
  offset?: number;
  onlyActive?: boolean;
  owners?: Array<string>;
  paused?: boolean | null;
  tags?: Array<string>;
};

export type RecentDagRunsResponse = DAGWithLatestDagRunsCollectionResponse;

export type ListBackfillsData = {
  dagId: string;
  limit?: number;
  offset?: number;
  orderBy?: string;
};

export type ListBackfillsResponse = BackfillCollectionResponse;

export type CreateBackfillData = {
  requestBody: BackfillPostBody;
};

export type CreateBackfillResponse = BackfillResponse;

export type GetBackfillData = {
  backfillId: string;
};

export type GetBackfillResponse = BackfillResponse;

export type PauseBackfillData = {
  backfillId: unknown;
};

export type PauseBackfillResponse = BackfillResponse;

export type UnpauseBackfillData = {
  backfillId: unknown;
};

export type UnpauseBackfillResponse = BackfillResponse;

export type CancelBackfillData = {
  backfillId: unknown;
};

export type CancelBackfillResponse = BackfillResponse;

export type DeleteConnectionData = {
  connectionId: string;
};

export type DeleteConnectionResponse = void;

export type GetConnectionData = {
  connectionId: string;
};

export type GetConnectionResponse = ConnectionResponse;

export type PatchConnectionData = {
  connectionId: string;
  requestBody: ConnectionBody;
  updateMask?: Array<string> | null;
};

export type PatchConnectionResponse = ConnectionResponse;

export type GetConnectionsData = {
  limit?: number;
  offset?: number;
  orderBy?: string;
};

export type GetConnectionsResponse = ConnectionCollectionResponse;

export type PostConnectionData = {
  requestBody: ConnectionBody;
};

export type PostConnectionResponse = ConnectionResponse;

export type TestConnectionData = {
  requestBody: ConnectionBody;
};

export type TestConnectionResponse = ConnectionTestResponse;

export type GetDagRunData = {
  dagId: string;
  dagRunId: string;
};

export type GetDagRunResponse = DAGRunResponse;

export type DeleteDagRunData = {
  dagId: string;
  dagRunId: string;
};

export type DeleteDagRunResponse = void;

export type PatchDagRunData = {
  dagId: string;
  dagRunId: string;
  requestBody: DAGRunPatchBody;
  updateMask?: Array<string> | null;
};

export type PatchDagRunResponse = DAGRunResponse;

export type GetUpstreamAssetEventsData = {
  dagId: string;
  dagRunId: string;
};

export type GetUpstreamAssetEventsResponse = AssetEventCollectionResponse;

export type ClearDagRunData = {
  dagId: string;
  dagRunId: string;
  requestBody: DAGRunClearBody;
};

export type ClearDagRunResponse =
  | TaskInstanceCollectionResponse
  | DAGRunResponse;

export type GetDagSourceData = {
  accept?: string;
  dagId: string;
  versionNumber?: number | null;
};

export type GetDagSourceResponse = DAGSourceResponse;

export type GetDagStatsData = {
  dagIds?: Array<string>;
};

export type GetDagStatsResponse = DagStatsCollectionResponse;

export type ListDagWarningsData = {
  dagId?: string | null;
  limit?: number;
  offset?: number;
  orderBy?: string;
  warningType?: DagWarningType | null;
};

export type ListDagWarningsResponse = DAGWarningCollectionResponse;

export type GetDagsData = {
  dagDisplayNamePattern?: string | null;
  dagIdPattern?: string | null;
  lastDagRunState?: DagRunState | null;
  limit?: number;
  offset?: number;
  onlyActive?: boolean;
  orderBy?: string;
  owners?: Array<string>;
  paused?: boolean | null;
  tags?: Array<string>;
};

export type GetDagsResponse = DAGCollectionResponse;

export type PatchDagsData = {
  dagIdPattern?: string | null;
  lastDagRunState?: DagRunState | null;
  limit?: number;
  offset?: number;
  onlyActive?: boolean;
  owners?: Array<string>;
  paused?: boolean | null;
  requestBody: DAGPatchBody;
  tags?: Array<string>;
  updateMask?: Array<string> | null;
};

export type PatchDagsResponse = DAGCollectionResponse;

export type GetDagTagsData = {
  limit?: number;
  offset?: number;
  orderBy?: string;
  tagNamePattern?: string | null;
};

export type GetDagTagsResponse = DAGTagCollectionResponse;

export type GetDagData = {
  dagId: string;
};

export type GetDagResponse = DAGResponse;

export type PatchDagData = {
  dagId: string;
  requestBody: DAGPatchBody;
  updateMask?: Array<string> | null;
};

export type PatchDagResponse = DAGResponse;

export type DeleteDagData = {
  dagId: string;
};

export type DeleteDagResponse = unknown;

export type GetDagDetailsData = {
  dagId: string;
};

export type GetDagDetailsResponse = DAGDetailsResponse;

export type GetEventLogData = {
  eventLogId: number;
};

export type GetEventLogResponse = EventLogResponse;

export type GetEventLogsData = {
  after?: string | null;
  before?: string | null;
  dagId?: string | null;
  event?: string | null;
  excludedEvents?: Array<string> | null;
  includedEvents?: Array<string> | null;
  limit?: number;
  mapIndex?: number | null;
  offset?: number;
  orderBy?: string;
  owner?: string | null;
  runId?: string | null;
  taskId?: string | null;
  tryNumber?: number | null;
};

export type GetEventLogsResponse = EventLogCollectionResponse;

export type GetImportErrorData = {
  importErrorId: number;
};

export type GetImportErrorResponse = ImportErrorResponse;

export type GetImportErrorsData = {
  limit?: number;
  offset?: number;
  orderBy?: string;
};

export type GetImportErrorsResponse = ImportErrorCollectionResponse;

export type GetPluginsData = {
  limit?: number;
  offset?: number;
};

export type GetPluginsResponse = PluginCollectionResponse;

export type DeletePoolData = {
  poolName: string;
};

export type DeletePoolResponse = void;

export type GetPoolData = {
  poolName: string;
};

export type GetPoolResponse = PoolResponse;

export type PatchPoolData = {
  poolName: string;
  requestBody: PoolPatchBody;
  updateMask?: Array<string> | null;
};

export type PatchPoolResponse = PoolResponse;

export type GetPoolsData = {
  limit?: number;
  offset?: number;
  orderBy?: string;
};

export type GetPoolsResponse = PoolCollectionResponse;

export type PostPoolData = {
  requestBody: PoolPostBody;
};

export type PostPoolResponse = PoolResponse;

export type GetProvidersData = {
  limit?: number;
  offset?: number;
};

export type GetProvidersResponse = ProviderCollectionResponse;

export type GetTaskInstanceData = {
  dagId: string;
  dagRunId: string;
  taskId: string;
};

export type GetTaskInstanceResponse = TaskInstanceResponse;

export type GetMappedTaskInstancesData = {
  dagId: string;
  dagRunId: string;
  durationGte?: number | null;
  durationLte?: number | null;
  endDateGte?: string | null;
  endDateLte?: string | null;
  executor?: Array<string>;
  limit?: number;
  logicalDateGte?: string | null;
  logicalDateLte?: string | null;
  offset?: number;
  orderBy?: string;
  pool?: Array<string>;
  queue?: Array<string>;
  startDateGte?: string | null;
  startDateLte?: string | null;
  state?: Array<string>;
  taskId: string;
  updatedAtGte?: string | null;
  updatedAtLte?: string | null;
};

export type GetMappedTaskInstancesResponse = TaskInstanceCollectionResponse;

export type GetTaskInstanceDependenciesData = {
  dagId: string;
  dagRunId: string;
  mapIndex: number;
  taskId: string;
};

export type GetTaskInstanceDependenciesResponse =
  TaskDependencyCollectionResponse;

export type GetTaskInstanceDependencies1Data = {
  dagId: string;
  dagRunId: string;
  mapIndex?: number;
  taskId: string;
};

export type GetTaskInstanceDependencies1Response =
  TaskDependencyCollectionResponse;

export type GetMappedTaskInstanceData = {
  dagId: string;
  dagRunId: string;
  mapIndex: number;
  taskId: string;
};

export type GetMappedTaskInstanceResponse = TaskInstanceResponse;

export type GetTaskInstancesData = {
  dagId: string;
  dagRunId: string;
  durationGte?: number | null;
  durationLte?: number | null;
  endDateGte?: string | null;
  endDateLte?: string | null;
  executor?: Array<string>;
  limit?: number;
  logicalDateGte?: string | null;
  logicalDateLte?: string | null;
  offset?: number;
  orderBy?: string;
  pool?: Array<string>;
  queue?: Array<string>;
  startDateGte?: string | null;
  startDateLte?: string | null;
  state?: Array<string>;
  updatedAtGte?: string | null;
  updatedAtLte?: string | null;
};

export type GetTaskInstancesResponse = TaskInstanceCollectionResponse;

export type GetTaskInstancesBatchData = {
  dagId: "~";
  dagRunId: "~";
  requestBody: TaskInstancesBatchBody;
};

export type GetTaskInstancesBatchResponse = TaskInstanceCollectionResponse;

export type GetTaskInstanceTryDetailsData = {
  dagId: string;
  dagRunId: string;
  mapIndex?: number;
  taskId: string;
  taskTryNumber: number;
};

export type GetTaskInstanceTryDetailsResponse = TaskInstanceHistoryResponse;

export type GetTasksData = {
  dagId: string;
  orderBy?: string;
};

export type GetTasksResponse = TaskCollectionResponse;

export type GetTaskData = {
  dagId: string;
  taskId: unknown;
};

export type GetTaskResponse = TaskResponse;

export type DeleteVariableData = {
  variableKey: string;
};

export type DeleteVariableResponse = void;

export type GetVariableData = {
  variableKey: string;
};

export type GetVariableResponse = VariableResponse;

export type PatchVariableData = {
  requestBody: VariableBody;
  updateMask?: Array<string> | null;
  variableKey: string;
};

export type PatchVariableResponse = VariableResponse;

export type GetVariablesData = {
  limit?: number;
  offset?: number;
  orderBy?: string;
};

export type GetVariablesResponse = VariableCollectionResponse;

export type PostVariableData = {
  requestBody: VariableBody;
};

export type PostVariableResponse = VariableResponse;

export type GetXcomEntryData = {
  dagId: string;
  dagRunId: string;
  deserialize?: boolean;
  mapIndex?: number;
  stringify?: boolean;
  taskId: string;
  xcomKey: string;
};

export type GetXcomEntryResponse = XComResponseNative | XComResponseString;

export type GetHealthResponse = HealthInfoSchema;

export type GetVersionResponse = VersionInfo;

export type $OpenApiTs = {
  "/ui/next_run_assets/{dag_id}": {
    get: {
      req: NextRunAssetsData;
      res: {
        /**
         * Successful Response
         */
        200: {
          [key: string]: unknown;
        };
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/assets": {
    get: {
      req: GetAssetsData;
      res: {
        /**
         * Successful Response
         */
        200: AssetCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/assets/events": {
    get: {
      req: GetAssetEventsData;
      res: {
        /**
         * Successful Response
         */
        200: AssetEventCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateAssetEventData;
      res: {
        /**
         * Successful Response
         */
        200: AssetEventResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/assets/queuedEvent/{uri}": {
    get: {
      req: GetAssetQueuedEventsData;
      res: {
        /**
         * Successful Response
         */
        200: QueuedEventCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAssetQueuedEventsData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/assets/{uri}": {
    get: {
      req: GetAssetData;
      res: {
        /**
         * Successful Response
         */
        200: AssetResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/assets/queuedEvent": {
    get: {
      req: GetDagAssetQueuedEventsData;
      res: {
        /**
         * Successful Response
         */
        200: QueuedEventCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteDagAssetQueuedEventsData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/assets/queuedEvent/{uri}": {
    get: {
      req: GetDagAssetQueuedEventData;
      res: {
        /**
         * Successful Response
         */
        200: QueuedEventResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteDagAssetQueuedEventData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/ui/dashboard/historical_metrics_data": {
    get: {
      req: HistoricalMetricsData;
      res: {
        /**
         * Successful Response
         */
        200: HistoricalMetricDataResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/ui/dags/recent_dag_runs": {
    get: {
      req: RecentDagRunsData;
      res: {
        /**
         * Successful Response
         */
        200: DAGWithLatestDagRunsCollectionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/backfills/": {
    get: {
      req: ListBackfillsData;
      res: {
        /**
         * Successful Response
         */
        200: BackfillCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateBackfillData;
      res: {
        /**
         * Successful Response
         */
        200: BackfillResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Conflict
         */
        409: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/backfills/{backfill_id}": {
    get: {
      req: GetBackfillData;
      res: {
        /**
         * Successful Response
         */
        200: BackfillResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/backfills/{backfill_id}/pause": {
    put: {
      req: PauseBackfillData;
      res: {
        /**
         * Successful Response
         */
        200: BackfillResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Conflict
         */
        409: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/backfills/{backfill_id}/unpause": {
    put: {
      req: UnpauseBackfillData;
      res: {
        /**
         * Successful Response
         */
        200: BackfillResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Conflict
         */
        409: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/backfills/{backfill_id}/cancel": {
    put: {
      req: CancelBackfillData;
      res: {
        /**
         * Successful Response
         */
        200: BackfillResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Conflict
         */
        409: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/connections/{connection_id}": {
    delete: {
      req: DeleteConnectionData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetConnectionData;
      res: {
        /**
         * Successful Response
         */
        200: ConnectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: PatchConnectionData;
      res: {
        /**
         * Successful Response
         */
        200: ConnectionResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/connections/": {
    get: {
      req: GetConnectionsData;
      res: {
        /**
         * Successful Response
         */
        200: ConnectionCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: PostConnectionData;
      res: {
        /**
         * Successful Response
         */
        201: ConnectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Conflict
         */
        409: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/connections/test": {
    post: {
      req: TestConnectionData;
      res: {
        /**
         * Successful Response
         */
        200: ConnectionTestResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}": {
    get: {
      req: GetDagRunData;
      res: {
        /**
         * Successful Response
         */
        200: DAGRunResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteDagRunData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: PatchDagRunData;
      res: {
        /**
         * Successful Response
         */
        200: DAGRunResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/upstreamAssetEvents": {
    get: {
      req: GetUpstreamAssetEventsData;
      res: {
        /**
         * Successful Response
         */
        200: AssetEventCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/clear": {
    post: {
      req: ClearDagRunData;
      res: {
        /**
         * Successful Response
         */
        200: TaskInstanceCollectionResponse | DAGRunResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dagSources/{dag_id}": {
    get: {
      req: GetDagSourceData;
      res: {
        /**
         * Successful Response
         */
        200: DAGSourceResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Not Acceptable
         */
        406: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dagStats/": {
    get: {
      req: GetDagStatsData;
      res: {
        /**
         * Successful Response
         */
        200: DagStatsCollectionResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dagWarnings": {
    get: {
      req: ListDagWarningsData;
      res: {
        /**
         * Successful Response
         */
        200: DAGWarningCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/": {
    get: {
      req: GetDagsData;
      res: {
        /**
         * Successful Response
         */
        200: DAGCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: PatchDagsData;
      res: {
        /**
         * Successful Response
         */
        200: DAGCollectionResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/tags": {
    get: {
      req: GetDagTagsData;
      res: {
        /**
         * Successful Response
         */
        200: DAGTagCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}": {
    get: {
      req: GetDagData;
      res: {
        /**
         * Successful Response
         */
        200: DAGResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Unprocessable Entity
         */
        422: HTTPExceptionResponse;
      };
    };
    patch: {
      req: PatchDagData;
      res: {
        /**
         * Successful Response
         */
        200: DAGResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteDagData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Unprocessable Entity
         */
        422: HTTPExceptionResponse;
      };
    };
  };
  "/public/dags/{dag_id}/details": {
    get: {
      req: GetDagDetailsData;
      res: {
        /**
         * Successful Response
         */
        200: DAGDetailsResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/eventLogs/{event_log_id}": {
    get: {
      req: GetEventLogData;
      res: {
        /**
         * Successful Response
         */
        200: EventLogResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/eventLogs/": {
    get: {
      req: GetEventLogsData;
      res: {
        /**
         * Successful Response
         */
        200: EventLogCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/importErrors/{import_error_id}": {
    get: {
      req: GetImportErrorData;
      res: {
        /**
         * Successful Response
         */
        200: ImportErrorResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/importErrors/": {
    get: {
      req: GetImportErrorsData;
      res: {
        /**
         * Successful Response
         */
        200: ImportErrorCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/plugins/": {
    get: {
      req: GetPluginsData;
      res: {
        /**
         * Successful Response
         */
        200: PluginCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/pools/{pool_name}": {
    delete: {
      req: DeletePoolData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetPoolData;
      res: {
        /**
         * Successful Response
         */
        200: PoolResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: PatchPoolData;
      res: {
        /**
         * Successful Response
         */
        200: PoolResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/pools/": {
    get: {
      req: GetPoolsData;
      res: {
        /**
         * Successful Response
         */
        200: PoolCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: PostPoolData;
      res: {
        /**
         * Successful Response
         */
        201: PoolResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/providers/": {
    get: {
      req: GetProvidersData;
      res: {
        /**
         * Successful Response
         */
        200: ProviderCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}": {
    get: {
      req: GetTaskInstanceData;
      res: {
        /**
         * Successful Response
         */
        200: TaskInstanceResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/listMapped": {
    get: {
      req: GetMappedTaskInstancesData;
      res: {
        /**
         * Successful Response
         */
        200: TaskInstanceCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/dependencies": {
    get: {
      req: GetTaskInstanceDependenciesData;
      res: {
        /**
         * Successful Response
         */
        200: TaskDependencyCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/dependencies": {
    get: {
      req: GetTaskInstanceDependencies1Data;
      res: {
        /**
         * Successful Response
         */
        200: TaskDependencyCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}": {
    get: {
      req: GetMappedTaskInstanceData;
      res: {
        /**
         * Successful Response
         */
        200: TaskInstanceResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances": {
    get: {
      req: GetTaskInstancesData;
      res: {
        /**
         * Successful Response
         */
        200: TaskInstanceCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/list": {
    post: {
      req: GetTaskInstancesBatchData;
      res: {
        /**
         * Successful Response
         */
        200: TaskInstanceCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/tries/{task_try_number}": {
    get: {
      req: GetTaskInstanceTryDetailsData;
      res: {
        /**
         * Successful Response
         */
        200: TaskInstanceHistoryResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/tasks/": {
    get: {
      req: GetTasksData;
      res: {
        /**
         * Successful Response
         */
        200: TaskCollectionResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/tasks/{task_id}": {
    get: {
      req: GetTaskData;
      res: {
        /**
         * Successful Response
         */
        200: TaskResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/variables/{variable_key}": {
    delete: {
      req: DeleteVariableData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    get: {
      req: GetVariableData;
      res: {
        /**
         * Successful Response
         */
        200: VariableResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: PatchVariableData;
      res: {
        /**
         * Successful Response
         */
        200: VariableResponse;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/variables/": {
    get: {
      req: GetVariablesData;
      res: {
        /**
         * Successful Response
         */
        200: VariableCollectionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: PostVariableData;
      res: {
        /**
         * Successful Response
         */
        201: VariableResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}": {
    get: {
      req: GetXcomEntryData;
      res: {
        /**
         * Successful Response
         */
        200: XComResponseNative | XComResponseString;
        /**
         * Bad Request
         */
        400: HTTPExceptionResponse;
        /**
         * Unauthorized
         */
        401: HTTPExceptionResponse;
        /**
         * Forbidden
         */
        403: HTTPExceptionResponse;
        /**
         * Not Found
         */
        404: HTTPExceptionResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/public/monitor/health": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: HealthInfoSchema;
      };
    };
  };
  "/public/version/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: VersionInfo;
      };
    };
  };
};
