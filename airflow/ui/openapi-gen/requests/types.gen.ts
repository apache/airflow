// This file is auto-generated by @hey-api/openapi-ts

/**
 * A user object.
 *
 * *New in version 2.1.0*
 *
 */
export type UserCollectionItem = {
  /**
   * The user's first name.
   *
   * *Changed in version 2.4.0*&#58; The requirement for this to be non-empty was removed.
   *
   */
  first_name?: string;
  /**
   * The user's last name.
   *
   * *Changed in version 2.4.0*&#58; The requirement for this to be non-empty was removed.
   *
   */
  last_name?: string;
  /**
   * The username.
   *
   * *Changed in version 2.2.0*&#58; A minimum character length requirement ('minLength') is added.
   *
   */
  username?: string;
  /**
   * The user's email.
   *
   * *Changed in version 2.2.0*&#58; A minimum character length requirement ('minLength') is added.
   *
   */
  email?: string;
  /**
   * Whether the user is active
   */
  readonly active?: boolean | null;
  /**
   * The last user login
   */
  readonly last_login?: string | null;
  /**
   * The login count
   */
  readonly login_count?: number | null;
  /**
   * The number of times the login failed
   */
  readonly failed_login_count?: number | null;
  /**
   * User roles.
   *
   * *Changed in version 2.2.0*&#58; Field is no longer read-only.
   *
   */
  roles?: Array<{
    name?: string;
  } | null>;
  /**
   * The date user was created
   */
  readonly created_on?: string | null;
  /**
   * The date user was changed
   */
  readonly changed_on?: string | null;
};

/**
 * A user object with sensitive data.
 *
 * *New in version 2.1.0*
 *
 */
export type User = UserCollectionItem & {
  password?: string;
};

/**
 * Collection of users.
 *
 * *New in version 2.1.0*
 *
 */
export type UserCollection = {
  users?: Array<UserCollectionItem>;
} & CollectionInfo;

/**
 * Connection collection item.
 * The password and extra fields are only available when retrieving a single object due to the sensitivity of this data.
 *
 */
export type ConnectionCollectionItem = {
  /**
   * The connection ID.
   */
  connection_id?: string;
  /**
   * The connection type.
   */
  conn_type?: string;
  /**
   * The description of the connection.
   */
  description?: string | null;
  /**
   * Host of the connection.
   */
  host?: string | null;
  /**
   * Login of the connection.
   */
  login?: string | null;
  /**
   * Schema of the connection.
   */
  schema?: string | null;
  /**
   * Port of the connection.
   */
  port?: number | null;
};

/**
 * Collection of connections.
 *
 * *Changed in version 2.1.0*&#58; 'total_entries' field is added.
 *
 */
export type ConnectionCollection = {
  connections?: Array<ConnectionCollectionItem>;
} & CollectionInfo;

/**
 * Full representation of the connection.
 */
export type Connection = ConnectionCollectionItem & {
  /**
   * Password of the connection.
   */
  password?: string;
  /**
   * Other values that cannot be put into another field, e.g. RSA keys.
   */
  extra?: string | null;
};

/**
 * Connection test results.
 *
 * *New in version 2.2.0*
 *
 */
export type ConnectionTest = {
  /**
   * The status of the request.
   */
  status?: boolean;
  /**
   * The success or failure message of the request.
   */
  message?: string;
};

/**
 * DAG
 */
export type DAG = {
  /**
   * The ID of the DAG.
   */
  readonly dag_id?: string;
  /**
   * Human centric display text for the DAG.
   *
   * *New in version 2.9.0*
   *
   */
  readonly dag_display_name?: string;
  /**
   * Whether the DAG is paused.
   */
  is_paused?: boolean | null;
  /**
   * Whether the DAG is currently seen by the scheduler(s).
   *
   * *New in version 2.1.1*
   *
   * *Changed in version 2.2.0*&#58; Field is read-only.
   *
   */
  readonly is_active?: boolean | null;
  /**
   * The last time the DAG was parsed.
   *
   * *New in version 2.3.0*
   *
   */
  readonly last_parsed_time?: string | null;
  /**
   * The last time the DAG was pickled.
   *
   * *New in version 2.3.0*
   *
   */
  readonly last_pickled?: string | null;
  /**
   * Time when the DAG last received a refresh signal
   * (e.g. the DAG's "refresh" button was clicked in the web UI)
   *
   * *New in version 2.3.0*
   *
   */
  readonly last_expired?: string | null;
  /**
   * Whether (one of) the scheduler is scheduling this DAG at the moment
   *
   * *New in version 2.3.0*
   *
   */
  readonly scheduler_lock?: boolean | null;
  /**
   * Foreign key to the latest pickle_id
   *
   * *New in version 2.3.0*
   *
   */
  readonly pickle_id?: string | null;
  /**
   * Default view of the DAG inside the webserver
   *
   * *New in version 2.3.0*
   *
   */
  readonly default_view?: string | null;
  /**
   * The absolute path to the file.
   */
  readonly fileloc?: string;
  /**
   * The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change.
   *
   */
  readonly file_token?: string;
  readonly owners?: Array<string>;
  /**
   * User-provided DAG description, which can consist of several sentences or paragraphs that describe DAG contents.
   *
   */
  readonly description?: string | null;
  /**
   * Timetable summary.
   *
   * *New in version 3.0.0*
   *
   */
  readonly timetable_summary?: string | null;
  /**
   * Timetable description.
   *
   * *New in version 2.3.0*
   *
   */
  readonly timetable_description?: string | null;
  /**
   * List of tags.
   */
  readonly tags?: Array<Tag> | null;
  /**
   * Maximum number of active tasks that can be run on the DAG
   *
   * *New in version 2.3.0*
   *
   */
  readonly max_active_tasks?: number | null;
  /**
   * Maximum number of active DAG runs for the DAG
   *
   * *New in version 2.3.0*
   *
   */
  readonly max_active_runs?: number | null;
  /**
   * Whether the DAG has task concurrency limits
   *
   * *New in version 2.3.0*
   *
   */
  readonly has_task_concurrency_limits?: boolean | null;
  /**
   * Whether the DAG has import errors
   *
   * *New in version 2.3.0*
   *
   */
  readonly has_import_errors?: boolean | null;
  /**
   * The logical date of the next dag run.
   *
   * *New in version 2.3.0*
   *
   */
  readonly next_dagrun?: string | null;
  /**
   * The start of the interval of the next dag run.
   *
   * *New in version 2.3.0*
   *
   */
  readonly next_dagrun_data_interval_start?: string | null;
  /**
   * The end of the interval of the next dag run.
   *
   * *New in version 2.3.0*
   *
   */
  readonly next_dagrun_data_interval_end?: string | null;
  /**
   * Earliest time at which this ``next_dagrun`` can be created.
   *
   * *New in version 2.3.0*
   *
   */
  readonly next_dagrun_create_after?: string | null;
  /**
   * (experimental) The maximum number of consecutive DAG failures before DAG is automatically paused.
   *
   * *New in version 2.9.0*
   *
   */
  readonly max_consecutive_failed_dag_runs?: number | null;
};

/**
 * Collection of DAGs.
 *
 * *Changed in version 2.1.0*&#58; 'total_entries' field is added.
 *
 */
export type DAGCollection = {
  dags?: Array<DAG>;
} & CollectionInfo;

export type DAGRun = {
  /**
   * Run ID.
   *
   * The value of this field can be set only when creating the object. If you try to modify the
   * field of an existing object, the request fails with an BAD_REQUEST error.
   *
   * If not provided, a value will be generated based on execution_date.
   *
   * If the specified dag_run_id is in use, the creation request fails with an ALREADY_EXISTS error.
   *
   * This together with DAG_ID are a unique key.
   *
   */
  dag_run_id?: string | null;
  readonly dag_id?: string;
  /**
   * The logical date (previously called execution date). This is the time or interval covered by
   * this DAG run, according to the DAG definition.
   *
   * The value of this field can be set only when creating the object. If you try to modify the
   * field of an existing object, the request fails with an BAD_REQUEST error.
   *
   * This together with DAG_ID are a unique key.
   *
   * *New in version 2.2.0*
   *
   */
  logical_date?: string | null;
  /**
   * The execution date. This is the same as logical_date, kept for backwards compatibility.
   * If both this field and logical_date are provided but with different values, the request
   * will fail with an BAD_REQUEST error.
   *
   * *Changed in version 2.2.0*&#58; Field becomes nullable.
   *
   * *Deprecated since version 2.2.0*&#58; Use 'logical_date' instead.
   *
   * @deprecated
   */
  execution_date?: string | null;
  /**
   * The start time. The time when DAG run was actually created.
   *
   * *Changed in version 2.1.3*&#58; Field becomes nullable.
   *
   */
  readonly start_date?: string | null;
  readonly end_date?: string | null;
  /**
   * The beginning of the interval the DAG run covers.
   *
   */
  data_interval_start?: string | null;
  /**
   * The end of the interval the DAG run covers.
   *
   */
  data_interval_end?: string | null;
  readonly last_scheduling_decision?: string | null;
  readonly run_type?: "backfill" | "manual" | "scheduled" | "dataset_triggered";
  state?: DagState;
  readonly external_trigger?: boolean;
  /**
   * JSON object describing additional configuration parameters.
   *
   * The value of this field can be set only when creating the object. If you try to modify the
   * field of an existing object, the request fails with an BAD_REQUEST error.
   *
   */
  conf?: {
    [key: string]: unknown;
  };
  /**
   * Contains manually entered notes by the user about the DagRun.
   *
   * *New in version 2.5.0*
   *
   */
  note?: string | null;
};

export type run_type =
  | "backfill"
  | "manual"
  | "scheduled"
  | "dataset_triggered";

/**
 * Modify the state of a DAG run.
 *
 * *New in version 2.2.0*
 *
 */
export type UpdateDagRunState = {
  /**
   * The state to set this DagRun
   */
  state?: "success" | "failed" | "queued";
};

/**
 * The state to set this DagRun
 */
export type state = "success" | "failed" | "queued";

/**
 * Collection of DAG runs.
 *
 * *Changed in version 2.1.0*&#58; 'total_entries' field is added.
 *
 */
export type DAGRunCollection = {
  dag_runs?: Array<DAGRun>;
} & CollectionInfo;

/**
 * Collection of Dag statistics.
 *
 */
export type DagStatsCollectionSchema = {
  dags?: Array<DagStatsCollectionItem>;
} & CollectionInfo;

/**
 * DagStats entry collection item.
 */
export type DagStatsCollectionItem = {
  /**
   * The DAG ID.
   */
  dag_id?: string;
  stats?: Array<DagStatsStateCollectionItem> | null;
};

/**
 * DagStatsState entry collection item.
 */
export type DagStatsStateCollectionItem = {
  /**
   * The DAG state.
   */
  state?: string;
  /**
   * The DAG state count.
   */
  count?: number;
};

export type DagWarning = {
  /**
   * The dag_id.
   */
  readonly dag_id?: string;
  /**
   * The warning type for the dag warning.
   */
  readonly warning_type?: string;
  /**
   * The message for the dag warning.
   */
  readonly message?: string;
  /**
   * The time when this warning was logged.
   */
  readonly timestamp?: string;
};

/**
 * Collection of DAG warnings.
 *
 */
export type DagWarningCollection = {
  import_errors?: Array<DagWarning>;
} & CollectionInfo;

export type SetDagRunNote = {
  /**
   * Custom notes left by users for this Dag Run.
   */
  note?: string;
};

/**
 * Log of user operations via CLI or Web UI.
 */
export type EventLog = {
  /**
   * The event log ID
   */
  readonly event_log_id?: number;
  /**
   * The time when these events happened.
   */
  readonly when?: string;
  /**
   * The DAG ID
   */
  readonly dag_id?: string | null;
  /**
   * The Task ID
   */
  readonly task_id?: string | null;
  /**
   * The DAG Run ID
   */
  readonly run_id?: string | null;
  /**
   * The Map Index
   */
  readonly map_index?: number | null;
  /**
   * The Try Number
   */
  readonly try_number?: number | null;
  /**
   * A key describing the type of event.
   */
  readonly event?: string;
  /**
   * When the event was dispatched for an object having execution_date, the value of this field.
   *
   */
  readonly execution_date?: string | null;
  /**
   * Name of the user who triggered these events a.
   */
  readonly owner?: string | null;
  /**
   * Other information that was not included in the other fields, e.g. the complete CLI command.
   *
   */
  readonly extra?: string | null;
};

/**
 * Collection of event logs.
 *
 * *Changed in version 2.1.0*&#58; 'total_entries' field is added.
 * *Changed in version 2.10.0*&#58; 'try_number' and 'map_index' fields are added.
 *
 */
export type EventLogCollection = {
  event_logs?: Array<EventLog>;
} & CollectionInfo;

export type ImportError = {
  /**
   * The import error ID.
   */
  readonly import_error_id?: number;
  /**
   * The time when this error was created.
   */
  readonly timestamp?: string;
  /**
   * The filename
   */
  readonly filename?: string;
  /**
   * The full stackstrace.
   */
  readonly stack_trace?: string;
};

/**
 * Collection of import errors.
 *
 * *Changed in version 2.1.0*&#58; 'total_entries' field is added.
 *
 */
export type ImportErrorCollection = {
  import_errors?: Array<ImportError>;
} & CollectionInfo;

/**
 * Instance status information.
 */
export type HealthInfo = {
  metadatabase?: MetadatabaseStatus;
  scheduler?: SchedulerStatus;
  triggerer?: TriggererStatus;
  dag_processor?: DagProcessorStatus;
};

/**
 * The status of the metadatabase.
 */
export type MetadatabaseStatus = {
  status?: HealthStatus;
};

/**
 * The status and the latest scheduler heartbeat.
 */
export type SchedulerStatus = {
  status?: HealthStatus;
  /**
   * The time the scheduler last did a heartbeat.
   */
  readonly latest_scheduler_heartbeat?: string | null;
};

/**
 * The status and the latest triggerer heartbeat.
 *
 * *New in version 2.6.2*
 *
 */
export type TriggererStatus = {
  status?: HealthStatus;
  /**
   * The time the triggerer last did a heartbeat.
   */
  readonly latest_triggerer_heartbeat?: string | null;
};

/**
 * The status and the latest dag processor heartbeat.
 *
 * *New in version 2.6.3*
 *
 */
export type DagProcessorStatus = {
  status?: HealthStatus;
  /**
   * The time the dag processor last did a heartbeat.
   */
  readonly latest_dag_processor_heartbeat?: string | null;
};

/**
 * The pool
 */
export type Pool = {
  /**
   * The name of pool.
   */
  name?: string;
  /**
   * The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
   *
   */
  slots?: number;
  /**
   * The number of slots used by running/queued tasks at the moment. May include deferred tasks if 'include_deferred' is set to true.
   */
  readonly occupied_slots?: number;
  /**
   * The number of slots used by running tasks at the moment.
   */
  readonly running_slots?: number;
  /**
   * The number of slots used by queued tasks at the moment.
   */
  readonly queued_slots?: number;
  /**
   * The number of free slots at the moment.
   */
  readonly open_slots?: number;
  /**
   * The number of slots used by scheduled tasks at the moment.
   */
  readonly scheduled_slots?: number;
  /**
   * The number of slots used by deferred tasks at the moment. Relevant if 'include_deferred' is set to true.
   *
   * *New in version 2.7.0*
   *
   */
  readonly deferred_slots?: number;
  /**
   * The description of the pool.
   *
   * *New in version 2.3.0*
   *
   */
  description?: string | null;
  /**
   * If set to true, deferred tasks are considered when calculating open pool slots.
   *
   * *New in version 2.7.0*
   *
   */
  include_deferred?: boolean;
};

/**
 * Collection of pools.
 *
 * *Changed in version 2.1.0*&#58; 'total_entries' field is added.
 *
 */
export type PoolCollection = {
  pools?: Array<Pool>;
} & CollectionInfo;

/**
 * The provider
 *
 * *New in version 2.1.0*
 *
 */
export type Provider = {
  /**
   * The package name of the provider.
   */
  package_name?: string;
  /**
   * The description of the provider.
   */
  description?: string;
  /**
   * The version of the provider.
   */
  version?: string;
};

/**
 * Collection of providers.
 *
 * *New in version 2.1.0*
 *
 */
export type ProviderCollection = {
  providers?: Array<Provider>;
};

export type SLAMiss = {
  /**
   * The task ID.
   */
  readonly task_id?: string;
  /**
   * The DAG ID.
   */
  dag_id?: string;
  execution_date?: string;
  email_sent?: boolean;
  timestamp?: string;
  description?: string | null;
  notification_sent?: boolean;
} | null;

export type Trigger = {
  id?: number;
  classpath?: string;
  kwargs?: string;
  created_date?: string;
  triggerer_id?: number | null;
} | null;

export type TaskFailedDependency = {
  name?: string;
  reason?: string;
};

export type TaskInstanceDependencyCollection = {
  dependencies?: Array<TaskFailedDependency>;
};

export type Job = {
  id?: number;
  dag_id?: string | null;
  state?: string | null;
  job_type?: string | null;
  start_date?: string | null;
  end_date?: string | null;
  latest_heartbeat?: string | null;
  executor_class?: string | null;
  hostname?: string | null;
  unixname?: string | null;
} | null;

export type TaskInstance = {
  task_id?: string;
  /**
   * Human centric display text for the task.
   *
   * *New in version 2.9.0*
   *
   */
  task_display_name?: string;
  dag_id?: string;
  /**
   * The DagRun ID for this task instance
   *
   * *New in version 2.3.0*
   *
   */
  dag_run_id?: string;
  execution_date?: string;
  start_date?: string | null;
  end_date?: string | null;
  duration?: number | null;
  state?: TaskState;
  try_number?: number;
  map_index?: number;
  max_tries?: number;
  hostname?: string;
  unixname?: string;
  pool?: string;
  pool_slots?: number;
  queue?: string | null;
  priority_weight?: number | null;
  /**
   * *Changed in version 2.1.1*&#58; Field becomes nullable.
   *
   */
  operator?: string | null;
  /**
   * The datetime that the task enter the state QUEUE, also known as queue_at
   *
   */
  queued_when?: string | null;
  pid?: number | null;
  /**
   * Executor the task is configured to run on or None (which indicates the default executor)
   *
   * *New in version 2.10.0*
   *
   */
  executor?: string | null;
  executor_config?: string;
  sla_miss?: SLAMiss;
  /**
   * Rendered name of an expanded task instance, if the task is mapped.
   *
   * *New in version 2.9.0*
   *
   */
  rendered_map_index?: string | null;
  /**
   * JSON object describing rendered fields.
   *
   * *New in version 2.3.0*
   *
   */
  rendered_fields?: {
    [key: string]: unknown;
  };
  trigger?: Trigger;
  triggerer_job?: Job;
  /**
   * Contains manually entered notes by the user about the TaskInstance.
   *
   * *New in version 2.5.0*
   *
   */
  note?: string | null;
};

/**
 * Collection of task instances.
 *
 * *Changed in version 2.1.0*&#58; 'total_entries' field is added.
 *
 */
export type TaskInstanceCollection = {
  task_instances?: Array<TaskInstance>;
} & CollectionInfo;

export type TaskInstanceReference = {
  /**
   * The task ID.
   */
  readonly task_id?: string;
  /**
   * The DAG ID.
   */
  readonly dag_id?: string;
  readonly execution_date?: string;
  /**
   * The DAG run ID.
   */
  readonly dag_run_id?: string;
};

export type TaskInstanceReferenceCollection = {
  task_instances?: Array<TaskInstanceReference>;
};

/**
 * XCom entry collection item.
 * The value field are only available when retrieving a single object due to the sensitivity of this data.
 */
export type VariableCollectionItem = {
  key?: string;
  /**
   * The description of the variable.
   *
   * *New in version 2.4.0*
   *
   */
  description?: string | null;
};

/**
 * Collection of variables.
 *
 * *Changed in version 2.1.0*&#58; 'total_entries' field is added.
 *
 */
export type VariableCollection = {
  variables?: Array<VariableCollectionItem>;
} & CollectionInfo;

/**
 * Full representation of Variable
 */
export type Variable = VariableCollectionItem & {
  value?: string;
};

/**
 * XCom entry collection item.
 *
 * The value field is only available when reading a single object due to the size of the value.
 *
 */
export type XComCollectionItem = {
  key?: string;
  timestamp?: string;
  execution_date?: string;
  map_index?: number;
  task_id?: string;
  dag_id?: string;
};

/**
 * Collection of XCom entries.
 *
 * *Changed in version 2.1.0*&#58; 'total_entries' field is added.
 *
 */
export type XComCollection = {
  xcom_entries?: Array<XComCollectionItem>;
} & CollectionInfo;

/**
 * Full representations of XCom entry.
 */
export type XCom = XComCollectionItem & {
  /**
   * The value(s),
   */
  value?:
    | string
    | number
    | boolean
    | Array<unknown>
    | {
        [key: string]: unknown;
      }
    | null;
};

/**
 * DAG details.
 *
 * For details see:
 * [airflow.models.dag.DAG](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/dag/index.html#airflow.models.dag.DAG)
 *
 */
export type DAGDetail = DAG & {
  timezone?: Timezone | null;
  readonly catchup?: boolean | null;
  readonly orientation?: string | null;
  readonly concurrency?: number | null;
  /**
   * The DAG's start date.
   *
   * *Changed in version 2.0.1*&#58; Field becomes nullable.
   *
   */
  readonly start_date?: string | null;
  dag_run_timeout?: TimeDelta | null;
  /**
   * Nested dataset any/all conditions
   */
  dataset_expression?: {
    [key: string]: unknown;
  } | null;
  readonly doc_md?: string | null;
  readonly default_view?: string | null;
  /**
   * User-specified DAG params.
   *
   * *New in version 2.0.1*
   *
   */
  readonly params?: {
    [key: string]: unknown;
  };
  /**
   * The DAG's end date.
   *
   * *New in version 2.3.0*.
   *
   */
  readonly end_date?: string | null;
  /**
   * Whether the DAG is paused upon creation.
   *
   * *New in version 2.3.0*
   *
   */
  readonly is_paused_upon_creation?: boolean | null;
  /**
   * The last time the DAG was parsed.
   *
   * *New in version 2.3.0*
   *
   */
  readonly last_parsed?: string | null;
  /**
   * The template search path.
   *
   * *New in version 2.3.0*
   *
   */
  template_search_path?: Array<string> | null;
  /**
   * Whether to render templates as native Python objects.
   *
   * *New in version 2.3.0*
   *
   */
  readonly render_template_as_native_obj?: boolean | null;
};

/**
 * Additional links containing additional information about the task.
 */
export type ExtraLink = {
  class_ref?: ClassReference;
  readonly name?: string;
  readonly href?: string;
};

/**
 * The collection of extra links.
 */
export type ExtraLinkCollection = {
  extra_links?: Array<ExtraLink>;
};

/**
 * For details see:
 * [airflow.models.baseoperator.BaseOperator](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/baseoperator/index.html#airflow.models.baseoperator.BaseOperator)
 *
 */
export type Task = {
  class_ref?: ClassReference;
  readonly task_id?: string;
  readonly task_display_name?: string;
  readonly owner?: string;
  readonly start_date?: string | null;
  readonly end_date?: string | null;
  trigger_rule?: TriggerRule;
  readonly extra_links?: Array<{
    class_ref?: ClassReference;
  }>;
  readonly depends_on_past?: boolean;
  readonly is_mapped?: boolean;
  readonly wait_for_downstream?: boolean;
  readonly retries?: number;
  readonly queue?: string | null;
  readonly executor?: string | null;
  readonly pool?: string;
  readonly pool_slots?: number;
  execution_timeout?: TimeDelta;
  retry_delay?: TimeDelta;
  readonly retry_exponential_backoff?: boolean;
  readonly priority_weight?: number;
  weight_rule?: WeightRule;
  ui_color?: Color;
  ui_fgcolor?: Color;
  readonly template_fields?: Array<string>;
  sub_dag?: DAG;
  readonly downstream_task_ids?: Array<string>;
  /**
   * Task documentation in markdown.
   *
   * *New in version 2.10.0*
   *
   */
  readonly doc_md?: string | null;
};

/**
 * Collection of tasks.
 */
export type TaskCollection = {
  tasks?: Array<Task>;
};

/**
 * A plugin Item.
 *
 * *New in version 2.1.0*
 *
 */
export type PluginCollectionItem = {
  /**
   * The name of the plugin
   */
  name?: string;
  /**
   * The plugin hooks
   */
  hooks?: Array<string | null>;
  /**
   * The plugin executors
   */
  executors?: Array<string | null>;
  /**
   * The plugin macros
   */
  macros?: Array<string | null>;
  /**
   * The flask blueprints
   */
  flask_blueprints?: Array<string | null>;
  /**
   * The appuilder views
   */
  appbuilder_views?: Array<{
    [key: string]: unknown;
  } | null>;
  /**
   * The Flask Appbuilder menu items
   */
  appbuilder_menu_items?: Array<{
    [key: string]: unknown;
  } | null>;
  /**
   * The global operator extra links
   */
  global_operator_extra_links?: Array<string | null>;
  /**
   * Operator extra links
   */
  operator_extra_links?: Array<string | null>;
  /**
   * The plugin source
   */
  source?: string | null;
  /**
   * The plugin task instance dependencies
   */
  ti_deps?: Array<string>;
  /**
   * The plugin listeners
   */
  listeners?: Array<string>;
  /**
   * The plugin timetables
   */
  timetables?: Array<string>;
};

/**
 * A collection of plugin.
 *
 * *New in version 2.1.0*
 *
 */
export type PluginCollection = {
  plugins?: Array<PluginCollectionItem>;
} & CollectionInfo;

/**
 * a role item.
 *
 * *New in version 2.1.0*
 *
 */
export type Role = {
  /**
   * The name of the role
   *
   * *Changed in version 2.3.0*&#58; A minimum character length requirement ('minLength') is added.
   *
   */
  name?: string;
  actions?: Array<ActionResource>;
};

/**
 * A collection of roles.
 *
 * *New in version 2.1.0*
 *
 */
export type RoleCollection = {
  roles?: Array<Role>;
} & CollectionInfo;

/**
 * An action Item.
 *
 * *New in version 2.1.0*
 *
 */
export type Action = {
  /**
   * The name of the permission "action"
   */
  name?: string;
};

/**
 * A collection of actions.
 *
 * *New in version 2.1.0*
 *
 */
export type ActionCollection = {
  actions?: Array<Action>;
} & CollectionInfo;

/**
 * A resource on which permissions are granted.
 *
 * *New in version 2.1.0*
 *
 */
export type Resource = {
  /**
   * The name of the resource
   */
  name?: string;
};

/**
 * The Action-Resource item.
 *
 * *New in version 2.1.0*
 *
 */
export type ActionResource = {
  /**
   * The permission action
   */
  action?: Action;
  /**
   * The permission resource
   */
  resource?: Resource;
};

/**
 * A dataset item.
 *
 * *New in version 2.4.0*
 *
 */
export type Dataset = {
  /**
   * The dataset id
   */
  id?: number;
  /**
   * The dataset uri
   */
  uri?: string;
  /**
   * The dataset extra
   */
  extra?: {
    [key: string]: unknown;
  } | null;
  /**
   * The dataset creation time
   */
  created_at?: string;
  /**
   * The dataset update time
   */
  updated_at?: string;
  consuming_dags?: Array<DagScheduleDatasetReference>;
  producing_tasks?: Array<TaskOutletDatasetReference>;
};

/**
 * A datasets reference to an upstream task.
 *
 * *New in version 2.4.0*
 *
 */
export type TaskOutletDatasetReference = {
  /**
   * The DAG ID that updates the dataset.
   */
  dag_id?: string | null;
  /**
   * The task ID that updates the dataset.
   */
  task_id?: string | null;
  /**
   * The dataset creation time
   */
  created_at?: string;
  /**
   * The dataset update time
   */
  updated_at?: string;
};

/**
 * A datasets reference to a downstream DAG.
 *
 * *New in version 2.4.0*
 *
 */
export type DagScheduleDatasetReference = {
  /**
   * The DAG ID that depends on the dataset.
   */
  dag_id?: string | null;
  /**
   * The dataset reference creation time
   */
  created_at?: string;
  /**
   * The dataset reference update time
   */
  updated_at?: string;
};

/**
 * A collection of datasets.
 *
 * *New in version 2.4.0*
 *
 */
export type DatasetCollection = {
  datasets?: Array<Dataset>;
} & CollectionInfo;

/**
 * A dataset event.
 *
 * *New in version 2.4.0*
 *
 */
export type DatasetEvent = {
  /**
   * The dataset id
   */
  dataset_id?: number;
  /**
   * The URI of the dataset
   */
  dataset_uri?: string;
  /**
   * The dataset event extra
   */
  extra?: {
    [key: string]: unknown;
  } | null;
  /**
   * The DAG ID that updated the dataset.
   */
  source_dag_id?: string | null;
  /**
   * The task ID that updated the dataset.
   */
  source_task_id?: string | null;
  /**
   * The DAG run ID that updated the dataset.
   */
  source_run_id?: string | null;
  /**
   * The task map index that updated the dataset.
   */
  source_map_index?: number | null;
  created_dagruns?: Array<BasicDAGRun>;
  /**
   * The dataset event creation time
   */
  timestamp?: string;
};

export type CreateDatasetEvent = {
  /**
   * The URI of the dataset
   */
  dataset_uri: string;
  /**
   * The dataset event extra
   */
  extra?: {
    [key: string]: unknown;
  } | null;
};

export type QueuedEvent = {
  /**
   * The datata uri.
   */
  uri?: string;
  /**
   * The DAG ID.
   */
  dag_id?: string;
  /**
   * The creation time of QueuedEvent
   */
  created_at?: string;
};

/**
 * A collection of Dataset Dag Run Queues.
 *
 * *New in version 2.9.0*
 *
 */
export type QueuedEventCollection = {
  datasets?: Array<QueuedEvent>;
} & CollectionInfo;

export type BasicDAGRun = {
  /**
   * Run ID.
   *
   */
  run_id?: string;
  readonly dag_id?: string;
  /**
   * The logical date (previously called execution date). This is the time or interval covered by
   * this DAG run, according to the DAG definition.
   *
   * The value of this field can be set only when creating the object. If you try to modify the
   * field of an existing object, the request fails with an BAD_REQUEST error.
   *
   * This together with DAG_ID are a unique key.
   *
   * *New in version 2.2.0*
   *
   */
  logical_date?: string;
  /**
   * The start time. The time when DAG run was actually created.
   *
   * *Changed in version 2.1.3*&#58; Field becomes nullable.
   *
   */
  readonly start_date?: string | null;
  readonly end_date?: string | null;
  readonly data_interval_start?: string | null;
  readonly data_interval_end?: string | null;
  state?: DagState;
};

/**
 * A collection of dataset events.
 *
 * *New in version 2.4.0*
 *
 */
export type DatasetEventCollection = {
  dataset_events?: Array<DatasetEvent>;
} & CollectionInfo;

/**
 * The option of configuration.
 */
export type ConfigOption = {
  readonly key?: string;
  readonly value?: string;
};

/**
 * The section of configuration.
 */
export type ConfigSection = {
  readonly name?: string;
  options?: Array<ConfigOption>;
};

/**
 * The configuration.
 */
export type Config = {
  sections?: Array<ConfigSection>;
};

/**
 * Version information.
 */
export type VersionInfo = {
  /**
   * The version of Airflow
   */
  version?: string;
  /**
   * The git version (including git commit hash)
   */
  git_version?: string | null;
};

export type ClearDagRun = {
  /**
   * If set, don't actually run this operation. The response will contain a list of task instances
   * planned to be cleaned, but not modified in any way.
   *
   */
  dry_run?: boolean;
};

export type ClearTaskInstances = {
  /**
   * If set, don't actually run this operation. The response will contain a list of task instances
   * planned to be cleaned, but not modified in any way.
   *
   */
  dry_run?: boolean;
  /**
   * A list of task ids to clear.
   *
   * *New in version 2.1.0*
   *
   */
  task_ids?: Array<string>;
  /**
   * The minimum execution date to clear.
   */
  start_date?: string;
  /**
   * The maximum execution date to clear.
   */
  end_date?: string;
  /**
   * Only clear failed tasks.
   */
  only_failed?: boolean;
  /**
   * Only clear running tasks.
   */
  only_running?: boolean;
  /**
   * Set state of DAG runs to RUNNING.
   */
  reset_dag_runs?: boolean;
  /**
   * The DagRun ID for this task instance
   */
  dag_run_id?: string | null;
  /**
   * If set to true, upstream tasks are also affected.
   */
  include_upstream?: boolean;
  /**
   * If set to true, downstream tasks are also affected.
   */
  include_downstream?: boolean;
  /**
   * If set to True, also tasks from future DAG Runs are affected.
   */
  include_future?: boolean;
  /**
   * If set to True, also tasks from past DAG Runs are affected.
   */
  include_past?: boolean;
};

export type UpdateTaskInstancesState = {
  /**
   * If set, don't actually run this operation. The response will contain a list of task instances
   * planned to be affected, but won't be modified in any way.
   *
   */
  dry_run?: boolean;
  /**
   * The task ID.
   */
  task_id?: string;
  /**
   * The execution date. Either set this or dag_run_id but not both.
   */
  execution_date?: string;
  /**
   * The task instance's DAG run ID. Either set this or execution_date but not both.
   *
   * *New in version 2.3.0*
   *
   */
  dag_run_id?: string;
  /**
   * If set to true, upstream tasks are also affected.
   */
  include_upstream?: boolean;
  /**
   * If set to true, downstream tasks are also affected.
   */
  include_downstream?: boolean;
  /**
   * If set to True, also tasks from future DAG Runs are affected.
   */
  include_future?: boolean;
  /**
   * If set to True, also tasks from past DAG Runs are affected.
   */
  include_past?: boolean;
  new_state?: UpdateTaskState;
};

export type UpdateTaskInstance = {
  /**
   * If set, don't actually run this operation. The response will contain the task instance
   * planned to be affected, but won't be modified in any way.
   *
   */
  dry_run?: boolean;
  new_state?: UpdateTaskState;
};

export type SetTaskInstanceNote = {
  /**
   * The custom note to set for this Task Instance.
   */
  note: string;
};

export type ListDagRunsForm = {
  /**
   * The name of the field to order the results by. Prefix a field name
   * with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  order_by?: string;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  page_offset?: number;
  /**
   * The numbers of items to return.
   */
  page_limit?: number;
  /**
   * Return objects with specific DAG IDs.
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  dag_ids?: Array<string>;
  /**
   * Return objects with specific states.
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  states?: Array<string>;
  /**
   * Returns objects greater or equal to the specified date.
   *
   * This can be combined with execution_date_lte key to receive only the selected period.
   *
   */
  execution_date_gte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with execution_date_gte key to receive only the selected period.
   *
   */
  execution_date_lte?: string;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte key to receive only the selected period.
   *
   */
  start_date_gte?: string;
  /**
   * Returns objects less or equal the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period
   *
   */
  start_date_lte?: string;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with end_date_lte parameter to receive only the selected period.
   *
   */
  end_date_gte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with end_date_gte parameter to receive only the selected period.
   *
   */
  end_date_lte?: string;
};

export type ListTaskInstanceForm = {
  /**
   * Return objects with specific DAG IDs.
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  dag_ids?: Array<string>;
  /**
   * Return objects with specific DAG Run IDs.
   * The value can be repeated to retrieve multiple matching values (OR condition).
   * *New in version 2.7.1*
   */
  dag_run_ids?: Array<string>;
  /**
   * Return objects with specific task IDs.
   * The value can be repeated to retrieve multiple matching values (OR condition).
   * *New in version 2.7.1*
   */
  task_ids?: Array<string>;
  /**
   * Returns objects greater or equal to the specified date.
   *
   * This can be combined with execution_date_lte parameter to receive only the selected period.
   *
   */
  execution_date_gte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with execution_date_gte parameter to receive only the selected period.
   *
   */
  execution_date_lte?: string;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   */
  start_date_gte?: string;
  /**
   * Returns objects less or equal the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   */
  start_date_lte?: string;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   */
  end_date_gte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   */
  end_date_lte?: string;
  /**
   * Returns objects greater than or equal to the specified values.
   *
   * This can be combined with duration_lte parameter to receive only the selected period.
   *
   */
  duration_gte?: number;
  /**
   * Returns objects less than or equal to the specified values.
   *
   * This can be combined with duration_gte parameter to receive only the selected range.
   *
   */
  duration_lte?: number;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  state?: Array<TaskState>;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  pool?: Array<string>;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  queue?: Array<string>;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  executor?: Array<string>;
  /**
   * The name of the field to order the results by. Prefix a field name
   * with `-` to reverse the sort order. `order_by` defaults to
   * `map_index` when unspecified.
   * Supported field names: `state`, `duration`, `start_date`, `end_date`
   * and `map_index`.
   *
   * *New in version 3.0.0*
   *
   */
  order_by?: string;
};

/**
 * Time delta
 */
export type TimeDelta = {
  __type: string;
  days: number;
  seconds: number;
  microseconds: number;
} | null;

/**
 * Relative delta
 */
export type RelativeDelta = {
  __type: string;
  years: number;
  months: number;
  days: number;
  leapdays: number;
  hours: number;
  minutes: number;
  seconds: number;
  microseconds: number;
  year: number;
  month: number;
  day: number;
  hour: number;
  minute: number;
  second: number;
  microsecond: number;
};

/**
 * Cron expression
 */
export type CronExpression = {
  __type: string;
  value: string;
} | null;

export type Timezone = string;

/**
 * Tag
 */
export type Tag = {
  name?: string;
};

/**
 * Color in hexadecimal notation.
 */
export type Color = string;

/**
 * Class reference
 */
export type ClassReference = {
  readonly module_path?: string;
  readonly class_name?: string;
};

/**
 * [RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.
 *
 */
export type Error = {
  /**
   * A URI reference [RFC3986] that identifies the problem type. This specification
   * encourages that, when dereferenced, it provide human-readable documentation for
   * the problem type.
   *
   */
  type: string;
  /**
   * A short, human-readable summary of the problem type.
   */
  title: string;
  /**
   * The HTTP status code generated by the API server for this occurrence of the problem.
   */
  status: number;
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string;
  /**
   * A URI reference that identifies the specific occurrence of the problem. It may or may
   * not yield further information if dereferenced.
   *
   */
  instance?: string;
};

/**
 * Metadata about collection.
 */
export type CollectionInfo = {
  /**
   * Count of total objects in the current result set before pagination parameters
   * (limit, offset) are applied.
   *
   */
  total_entries?: number;
};

/**
 * Task state.
 *
 * *Changed in version 2.0.2*&#58; 'removed' is added as a possible value.
 *
 * *Changed in version 2.2.0*&#58; 'deferred' is added as a possible value.
 *
 * *Changed in version 2.4.0*&#58; 'sensing' state has been removed.
 * *Changed in version 2.4.2*&#58; 'restarting' is added as a possible value
 *
 * *Changed in version 2.7.0*&#58; Field becomes nullable and null primitive is added as a possible value.
 * *Changed in version 2.7.0*&#58; 'none' state is deprecated in favor of null.
 *
 */
export type TaskState =
  | "success"
  | "running"
  | "failed"
  | "upstream_failed"
  | "skipped"
  | "up_for_retry"
  | "up_for_reschedule"
  | "queued"
  | "none"
  | "scheduled"
  | "deferred"
  | "removed"
  | "restarting";

/**
 * Expected new state. Only a subset of TaskState are available.
 *
 * Other states are managed directly by the scheduler or the workers and cannot be updated manually through the REST API.
 *
 */
export type UpdateTaskState = "success" | "failed" | "skipped";

/**
 * DAG State.
 *
 * *Changed in version 2.1.3*&#58; 'queued' is added as a possible value.
 *
 */
export type DagState = "queued" | "running" | "success" | "failed";

/**
 * Trigger rule.
 *
 * *Changed in version 2.2.0*&#58; 'none_failed_min_one_success' is added as a possible value. Deprecated 'dummy' and 'always' is added as a possible value
 *
 * *Changed in version 2.3.0*&#58; 'all_skipped' is added as a possible value.
 *
 * *Changed in version 2.5.0*&#58; 'one_done' is added as a possible value.
 *
 * *Changed in version 2.7.0*&#58; 'all_done_setup_success' is added as a possible value.
 *
 */
export type TriggerRule =
  | "all_success"
  | "all_failed"
  | "all_done"
  | "all_done_setup_success"
  | "one_success"
  | "one_failed"
  | "one_done"
  | "none_failed"
  | "none_skipped"
  | "none_failed_or_skipped"
  | "none_failed_min_one_success"
  | "dummy"
  | "all_skipped"
  | "always";

/**
 * Weight rule.
 */
export type WeightRule = "downstream" | "upstream" | "absolute";

/**
 * Health status
 */
export type HealthStatus = "healthy" | "unhealthy";

/**
 * The number of items to skip before starting to collect the result set.
 */
export type ParameterPageOffset = number;

/**
 * The numbers of items to return.
 */
export type ParameterPageLimit = number;

/**
 * The username of the user.
 *
 * *New in version 2.1.0*
 *
 */
export type ParameterUsername = string;

/**
 * The role name
 */
export type ParameterRoleName = string;

/**
 * The connection ID.
 */
export type ParameterConnectionID = string;

/**
 * The DAG ID.
 */
export type ParameterDAGID = string;

/**
 * The task ID.
 */
export type ParameterTaskID = string;

/**
 * The name of event log.
 */
export type ParameterEvent = string;

/**
 * The owner's name of event log.
 */
export type ParameterOwner = string;

/**
 * Timestamp to select event logs occurring before.
 */
export type ParameterBefore = string;

/**
 * Timestamp to select event logs occurring after.
 */
export type ParameterAfter = string;

/**
 * The map index.
 */
export type ParameterMapIndex = number;

/**
 * The DAG run ID.
 */
export type ParameterDAGRunID = string;

/**
 * The task try number.
 */
export type ParameterTaskTryNumber = number;

/**
 * The event log ID.
 */
export type ParameterEventLogID = number;

/**
 * The import error ID.
 */
export type ParameterImportErrorID = number;

/**
 * The encoded Dataset URI
 */
export type ParameterDatasetURI = string;

/**
 * The pool name.
 */
export type ParameterPoolName = string;

/**
 * The variable Key.
 */
export type ParameterVariableKey = string;

/**
 * A full content will be returned.
 * By default, only the first fragment will be returned.
 *
 */
export type ParameterFullContent = boolean;

/**
 * A token that allows you to continue fetching logs.
 * If passed, it will specify the location from which the download should be continued.
 *
 */
export type ParameterContinuationToken = string;

/**
 * The XCom key.
 */
export type ParameterXComKey = string;

/**
 * Returns objects greater or equal to the specified date.
 *
 * This can be combined with execution_date_lte parameter to receive only the selected period.
 *
 */
export type ParameterFilterExecutionDateGTE = string;

/**
 * Returns objects less than or equal to the specified date.
 *
 * This can be combined with execution_date_gte parameter to receive only the selected period.
 *
 */
export type ParameterFilterExecutionDateLTE = string;

/**
 * Returns objects greater or equal the specified date.
 *
 * This can be combined with start_date_lte parameter to receive only the selected period.
 *
 */
export type ParameterFilterStartDateGTE = string;

/**
 * Returns objects less or equal the specified date.
 *
 * This can be combined with start_date_gte parameter to receive only the selected period.
 *
 */
export type ParameterFilterStartDateLTE = string;

/**
 * Returns objects greater or equal the specified date.
 *
 * This can be combined with start_date_lte parameter to receive only the selected period.
 *
 */
export type ParameterFilterEndDateGTE = string;

/**
 * Returns objects less than or equal to the specified date.
 *
 * This can be combined with start_date_gte parameter to receive only the selected period.
 *
 */
export type ParameterFilterEndDateLTE = string;

/**
 * Returns objects greater than or equal to the specified values.
 *
 * This can be combined with duration_lte parameter to receive only the selected period.
 *
 */
export type ParameterFilterDurationGTE = number;

/**
 * Returns objects less than or equal to the specified values.
 *
 * This can be combined with duration_gte parameter to receive only the selected range.
 *
 */
export type ParameterFilterDurationLTE = number;

/**
 * The value can be repeated to retrieve multiple matching values (OR condition).
 */
export type ParameterFilterState = Array<string>;

/**
 * The value can be repeated to retrieve multiple matching values (OR condition).
 */
export type ParameterFilterPool = Array<string>;

/**
 * The value can be repeated to retrieve multiple matching values (OR condition).
 */
export type ParameterFilterQueue = Array<string>;

/**
 * The value can be repeated to retrieve multiple matching values (OR condition).
 */
export type ParameterFilterExecutor = Array<string>;

/**
 * List of tags to filter results.
 *
 * *New in version 2.2.0*
 *
 */
export type ParameterFilterTags = Array<string>;

/**
 * The Dataset ID that updated the dataset.
 */
export type ParameterFilterDatasetID = number;

/**
 * The DAG ID that updated the dataset.
 */
export type ParameterFilterSourceDAGID = string;

/**
 * The task ID that updated the dataset.
 */
export type ParameterFilterSourceTaskID = string;

/**
 * The DAG run ID that updated the dataset.
 */
export type ParameterFilterSourceRunID = string;

/**
 * The map index that updated the dataset.
 */
export type ParameterFilterSourceMapIndex = number;

/**
 * Filter on map index for mapped task.
 */
export type ParameterFilterMapIndex = number;

/**
 * Filter on try_number for task instance.
 */
export type ParameterFilterTryNumber = number;

/**
 * The name of the field to order the results by. Prefix a field name
 * with `-` to reverse the sort order. `order_by` defaults to
 * `map_index` when unspecified.
 * Supported field names: `state`, `duration`, `start_date`, `end_date`
 * and `map_index`.
 *
 * *New in version 3.0.0*
 *
 */
export type ParameterTaskInstanceOrderBy = string;

/**
 * The name of the field to order the results by.
 * Prefix a field name with `-` to reverse the sort order.
 *
 * *New in version 2.1.0*
 *
 */
export type ParameterOrderBy = string;

/**
 * Only filter active DAGs.
 *
 * *New in version 2.1.1*
 *
 */
export type ParameterOnlyActive = boolean;

/**
 * Returns objects less or equal the specified date.
 *
 * This can be combined with updated_at_gte parameter to receive only the selected period.
 *
 * *New in version 2.6.0*
 *
 */
export type ParameterFilterUpdatedAtLTE = string;

/**
 * Returns objects greater or equal the specified date.
 *
 * This can be combined with updated_at_lte parameter to receive only the selected period.
 *
 * *New in version 2.6.0*
 *
 */
export type ParameterFilterUpdatedAtGTE = string;

/**
 * Only filter paused/unpaused DAGs. If absent or null, it returns paused and unpaused DAGs.
 *
 * *New in version 2.6.0*
 *
 */
export type ParameterPaused = boolean;

/**
 * Only filter the XCom records which have the provided key.
 */
export type ParameterFilterXcomKey = string;

/**
 * Returns objects matched by the DAG ID.
 */
export type ParameterFilterDAGID = string;

/**
 * Returns objects matched by the Task ID.
 */
export type ParameterFilterTaskID = string;

/**
 * Returns objects matched by the Run ID.
 */
export type ParameterFilterRunID = string;

/**
 * The key containing the encrypted path to the file. Encryption and decryption take place only on
 * the server. This prevents the client from reading an non-DAG file. This also ensures API
 * extensibility, because the format of encrypted data may change.
 *
 */
export type ParameterFileToken = string;

/**
 * The fields to update on the resource. If absent or empty, all modifiable fields are updated.
 * A comma-separated list of fully qualified names of fields.
 *
 */
export type ParameterUpdateMask = Array<string>;

/**
 * List of field for return.
 *
 */
export type ParameterReturnFields = Array<string>;

export type GetConnectionsData = {
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
};

export type GetConnectionsResponse = ConnectionCollection;

export type PostConnectionData = {
  requestBody: Connection;
};

export type PostConnectionResponse = Connection;

export type GetConnectionData = {
  /**
   * The connection ID.
   */
  connectionId: string;
};

export type GetConnectionResponse = Connection;

export type PatchConnectionData = {
  /**
   * The connection ID.
   */
  connectionId: string;
  requestBody: Connection;
  /**
   * The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   */
  updateMask?: Array<string>;
};

export type PatchConnectionResponse = Connection;

export type DeleteConnectionData = {
  /**
   * The connection ID.
   */
  connectionId: string;
};

export type DeleteConnectionResponse = void;

export type TestConnectionData = {
  requestBody: Connection;
};

export type TestConnectionResponse = ConnectionTest;

export type GetDagsData = {
  /**
   * If set, only return DAGs with dag_ids matching this pattern.
   *
   */
  dagIdPattern?: string;
  /**
   * List of field for return.
   *
   */
  fields?: Array<string>;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * Only filter active DAGs.
   *
   * *New in version 2.1.1*
   *
   */
  onlyActive?: boolean;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
  /**
   * Only filter paused/unpaused DAGs. If absent or null, it returns paused and unpaused DAGs.
   *
   * *New in version 2.6.0*
   *
   */
  paused?: boolean;
  /**
   * List of tags to filter results.
   *
   * *New in version 2.2.0*
   *
   */
  tags?: Array<string>;
};

export type GetDagsResponse = DAGCollection;

export type PatchDagsData = {
  /**
   * If set, only update DAGs with dag_ids matching this pattern.
   *
   */
  dagIdPattern: string;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * Only filter active DAGs.
   *
   * *New in version 2.1.1*
   *
   */
  onlyActive?: boolean;
  requestBody: DAG;
  /**
   * List of tags to filter results.
   *
   * *New in version 2.2.0*
   *
   */
  tags?: Array<string>;
  /**
   * The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   */
  updateMask?: Array<string>;
};

export type PatchDagsResponse = DAGCollection;

export type GetDagData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * List of field for return.
   *
   */
  fields?: Array<string>;
};

export type GetDagResponse = DAG;

export type PatchDagData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  requestBody: DAG;
  /**
   * The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   */
  updateMask?: Array<string>;
};

export type PatchDagResponse = DAG;

export type DeleteDagData = {
  /**
   * The DAG ID.
   */
  dagId: string;
};

export type DeleteDagResponse = void;

export type PostClearTaskInstancesData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * Parameters of action
   */
  requestBody: ClearTaskInstances;
};

export type PostClearTaskInstancesResponse = TaskInstanceReferenceCollection;

export type PostSetTaskInstancesStateData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * Parameters of action
   */
  requestBody: UpdateTaskInstancesState;
};

export type PostSetTaskInstancesStateResponse = TaskInstanceReferenceCollection;

export type ReparseDagFileData = {
  /**
   * The key containing the encrypted path to the file. Encryption and decryption take place only on
   * the server. This prevents the client from reading an non-DAG file. This also ensures API
   * extensibility, because the format of encrypted data may change.
   *
   */
  fileToken: string;
};

export type ReparseDagFileResponse = unknown;

export type GetDagDetailsData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * List of field for return.
   *
   */
  fields?: Array<string>;
};

export type GetDagDetailsResponse = DAGDetail;

export type GetTasksData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
};

export type GetTasksResponse = TaskCollection;

export type GetTaskData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The task ID.
   */
  taskId: string;
};

export type GetTaskResponse = Task;

export type GetDagSourceData = {
  /**
   * The key containing the encrypted path to the file. Encryption and decryption take place only on
   * the server. This prevents the client from reading an non-DAG file. This also ensures API
   * extensibility, because the format of encrypted data may change.
   *
   */
  fileToken: string;
};

export type GetDagSourceResponse = {
  content?: string;
};

export type SetTaskInstanceNoteData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * Parameters of set Task Instance note.
   */
  requestBody: SetTaskInstanceNote;
  /**
   * The task ID.
   */
  taskId: string;
};

export type SetTaskInstanceNoteResponse = TaskInstance;

export type SetMappedTaskInstanceNoteData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The map index.
   */
  mapIndex: number;
  /**
   * Parameters of set Task Instance note.
   */
  requestBody: SetTaskInstanceNote;
  /**
   * The task ID.
   */
  taskId: string;
};

export type SetMappedTaskInstanceNoteResponse = TaskInstance;

export type GetTaskInstanceDependenciesData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The task ID.
   */
  taskId: string;
};

export type GetTaskInstanceDependenciesResponse =
  TaskInstanceDependencyCollection;

export type GetMappedTaskInstanceDependenciesData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The map index.
   */
  mapIndex: number;
  /**
   * The task ID.
   */
  taskId: string;
};

export type GetMappedTaskInstanceDependenciesResponse =
  TaskInstanceDependencyCollection;

export type GetTaskInstancesData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * Returns objects greater than or equal to the specified values.
   *
   * This can be combined with duration_lte parameter to receive only the selected period.
   *
   */
  durationGte?: number;
  /**
   * Returns objects less than or equal to the specified values.
   *
   * This can be combined with duration_gte parameter to receive only the selected range.
   *
   */
  durationLte?: number;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   */
  endDateGte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   */
  endDateLte?: string;
  /**
   * Returns objects greater or equal to the specified date.
   *
   * This can be combined with execution_date_lte parameter to receive only the selected period.
   *
   */
  executionDateGte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with execution_date_gte parameter to receive only the selected period.
   *
   */
  executionDateLte?: string;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  executor?: Array<string>;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by. Prefix a field name
   * with `-` to reverse the sort order. `order_by` defaults to
   * `map_index` when unspecified.
   * Supported field names: `state`, `duration`, `start_date`, `end_date`
   * and `map_index`.
   *
   * *New in version 3.0.0*
   *
   */
  orderBy?: string;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  pool?: Array<string>;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  queue?: Array<string>;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   */
  startDateGte?: string;
  /**
   * Returns objects less or equal the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   */
  startDateLte?: string;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  state?: Array<string>;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with updated_at_lte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   */
  updatedAtGte?: string;
  /**
   * Returns objects less or equal the specified date.
   *
   * This can be combined with updated_at_gte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   */
  updatedAtLte?: string;
};

export type GetTaskInstancesResponse = TaskInstanceCollection;

export type GetTaskInstanceData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The task ID.
   */
  taskId: string;
};

export type GetTaskInstanceResponse = TaskInstance;

export type PatchTaskInstanceData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * Parameters of action
   */
  requestBody: UpdateTaskInstance;
  /**
   * The task ID.
   */
  taskId: string;
};

export type PatchTaskInstanceResponse = TaskInstanceReference;

export type GetMappedTaskInstanceData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The map index.
   */
  mapIndex: number;
  /**
   * The task ID.
   */
  taskId: string;
};

export type GetMappedTaskInstanceResponse = TaskInstance;

export type PatchMappedTaskInstanceData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The map index.
   */
  mapIndex: number;
  /**
   * Parameters of action
   */
  requestBody?: UpdateTaskInstance;
  /**
   * The task ID.
   */
  taskId: string;
};

export type PatchMappedTaskInstanceResponse = TaskInstanceReference;

export type GetMappedTaskInstancesData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * Returns objects greater than or equal to the specified values.
   *
   * This can be combined with duration_lte parameter to receive only the selected period.
   *
   */
  durationGte?: number;
  /**
   * Returns objects less than or equal to the specified values.
   *
   * This can be combined with duration_gte parameter to receive only the selected range.
   *
   */
  durationLte?: number;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   */
  endDateGte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   */
  endDateLte?: string;
  /**
   * Returns objects greater or equal to the specified date.
   *
   * This can be combined with execution_date_lte parameter to receive only the selected period.
   *
   */
  executionDateGte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with execution_date_gte parameter to receive only the selected period.
   *
   */
  executionDateLte?: string;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  executor?: Array<string>;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by. Prefix a field name
   * with `-` to reverse the sort order. `order_by` defaults to
   * `map_index` when unspecified.
   * Supported field names: `state`, `duration`, `start_date`, `end_date`
   * and `map_index`.
   *
   * *New in version 3.0.0*
   *
   */
  orderBy?: string;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  pool?: Array<string>;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  queue?: Array<string>;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   */
  startDateGte?: string;
  /**
   * Returns objects less or equal the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   */
  startDateLte?: string;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  state?: Array<string>;
  /**
   * The task ID.
   */
  taskId: string;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with updated_at_lte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   */
  updatedAtGte?: string;
  /**
   * Returns objects less or equal the specified date.
   *
   * This can be combined with updated_at_gte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   */
  updatedAtLte?: string;
};

export type GetMappedTaskInstancesResponse = TaskInstanceCollection;

export type GetTaskInstancesBatchData = {
  requestBody: ListTaskInstanceForm;
};

export type GetTaskInstancesBatchResponse = TaskInstanceCollection;

export type GetTaskInstanceTryDetailsData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The task ID.
   */
  taskId: string;
  /**
   * The task try number.
   */
  taskTryNumber: number;
};

export type GetTaskInstanceTryDetailsResponse = TaskInstance;

export type GetTaskInstanceTriesData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
  /**
   * The task ID.
   */
  taskId: string;
};

export type GetTaskInstanceTriesResponse = TaskInstanceCollection;

export type GetMappedTaskInstanceTriesData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The map index.
   */
  mapIndex: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
  /**
   * The task ID.
   */
  taskId: string;
};

export type GetMappedTaskInstanceTriesResponse = TaskInstanceCollection;

export type GetMappedTaskInstanceTryDetailsData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The map index.
   */
  mapIndex: number;
  /**
   * The task ID.
   */
  taskId: string;
  /**
   * The task try number.
   */
  taskTryNumber: number;
};

export type GetMappedTaskInstanceTryDetailsResponse = TaskInstance;

export type GetExtraLinksData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The task ID.
   */
  taskId: string;
};

export type GetExtraLinksResponse = ExtraLinkCollection;

export type GetLogData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * A full content will be returned.
   * By default, only the first fragment will be returned.
   *
   */
  fullContent?: boolean;
  /**
   * Filter on map index for mapped task.
   */
  mapIndex?: number;
  /**
   * The task ID.
   */
  taskId: string;
  /**
   * The task try number.
   */
  taskTryNumber: number;
  /**
   * A token that allows you to continue fetching logs.
   * If passed, it will specify the location from which the download should be continued.
   *
   */
  token?: string;
};

export type GetLogResponse = {
  continuation_token?: string;
  content?: string;
};

export type GetDagRunsData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   */
  endDateGte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   */
  endDateLte?: string;
  /**
   * Returns objects greater or equal to the specified date.
   *
   * This can be combined with execution_date_lte parameter to receive only the selected period.
   *
   */
  executionDateGte?: string;
  /**
   * Returns objects less than or equal to the specified date.
   *
   * This can be combined with execution_date_gte parameter to receive only the selected period.
   *
   */
  executionDateLte?: string;
  /**
   * List of field for return.
   *
   */
  fields?: Array<string>;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   */
  startDateGte?: string;
  /**
   * Returns objects less or equal the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   */
  startDateLte?: string;
  /**
   * The value can be repeated to retrieve multiple matching values (OR condition).
   */
  state?: Array<string>;
  /**
   * Returns objects greater or equal the specified date.
   *
   * This can be combined with updated_at_lte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   */
  updatedAtGte?: string;
  /**
   * Returns objects less or equal the specified date.
   *
   * This can be combined with updated_at_gte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   */
  updatedAtLte?: string;
};

export type GetDagRunsResponse = DAGRunCollection;

export type PostDagRunData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  requestBody: DAGRun;
};

export type PostDagRunResponse = DAGRun;

export type GetDagRunsBatchData = {
  requestBody: ListDagRunsForm;
};

export type GetDagRunsBatchResponse = DAGRunCollection;

export type GetDagRunData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * List of field for return.
   *
   */
  fields?: Array<string>;
};

export type GetDagRunResponse = DAGRun;

export type DeleteDagRunData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
};

export type DeleteDagRunResponse = void;

export type UpdateDagRunStateData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  requestBody: UpdateDagRunState;
};

export type UpdateDagRunStateResponse = DAGRun;

export type ClearDagRunData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  requestBody: ClearDagRun;
};

export type ClearDagRunResponse = DAGRun | TaskInstanceCollection;

export type GetUpstreamDatasetEventsData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
};

export type GetUpstreamDatasetEventsResponse = DatasetEventCollection;

export type SetDagRunNoteData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * Parameters of set DagRun note.
   */
  requestBody: SetDagRunNote;
};

export type SetDagRunNoteResponse = DAGRun;

export type GetDagDatasetQueuedEventData = {
  /**
   * Timestamp to select event logs occurring before.
   */
  before?: string;
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The encoded Dataset URI
   */
  uri: string;
};

export type GetDagDatasetQueuedEventResponse = QueuedEvent;

export type DeleteDagDatasetQueuedEventData = {
  /**
   * Timestamp to select event logs occurring before.
   */
  before?: string;
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The encoded Dataset URI
   */
  uri: string;
};

export type DeleteDagDatasetQueuedEventResponse = void;

export type GetDagDatasetQueuedEventsData = {
  /**
   * Timestamp to select event logs occurring before.
   */
  before?: string;
  /**
   * The DAG ID.
   */
  dagId: string;
};

export type GetDagDatasetQueuedEventsResponse = QueuedEventCollection;

export type DeleteDagDatasetQueuedEventsData = {
  /**
   * Timestamp to select event logs occurring before.
   */
  before?: string;
  /**
   * The DAG ID.
   */
  dagId: string;
};

export type DeleteDagDatasetQueuedEventsResponse = void;

export type GetDatasetQueuedEventsData = {
  /**
   * Timestamp to select event logs occurring before.
   */
  before?: string;
  /**
   * The encoded Dataset URI
   */
  uri: string;
};

export type GetDatasetQueuedEventsResponse = QueuedEventCollection;

export type DeleteDatasetQueuedEventsData = {
  /**
   * Timestamp to select event logs occurring before.
   */
  before?: string;
  /**
   * The encoded Dataset URI
   */
  uri: string;
};

export type DeleteDatasetQueuedEventsResponse = void;

export type GetDatasetsData = {
  /**
   * One or more DAG IDs separated by commas to filter datasets by associated DAGs either consuming or producing.
   *
   * *New in version 2.9.0*
   *
   */
  dagIds?: string;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
  /**
   * If set, only return datasets with uris matching this pattern.
   *
   */
  uriPattern?: string;
};

export type GetDatasetsResponse = DatasetCollection;

export type GetDatasetData = {
  /**
   * The encoded Dataset URI
   */
  uri: string;
};

export type GetDatasetResponse = Dataset;

export type GetDatasetEventsData = {
  /**
   * The Dataset ID that updated the dataset.
   */
  datasetId?: number;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
  /**
   * The DAG ID that updated the dataset.
   */
  sourceDagId?: string;
  /**
   * The map index that updated the dataset.
   */
  sourceMapIndex?: number;
  /**
   * The DAG run ID that updated the dataset.
   */
  sourceRunId?: string;
  /**
   * The task ID that updated the dataset.
   */
  sourceTaskId?: string;
};

export type GetDatasetEventsResponse = DatasetEventCollection;

export type CreateDatasetEventData = {
  requestBody: CreateDatasetEvent;
};

export type CreateDatasetEventResponse = DatasetEvent;

export type GetEventLogsData = {
  /**
   * Timestamp to select event logs occurring after.
   */
  after?: string;
  /**
   * Timestamp to select event logs occurring before.
   */
  before?: string;
  /**
   * Returns objects matched by the DAG ID.
   */
  dagId?: string;
  /**
   * The name of event log.
   */
  event?: string;
  /**
   * One or more event names separated by commas. If set, only return event logs with events that do not match this pattern.
   * *New in version 2.9.0*
   *
   */
  excludedEvents?: string;
  /**
   * One or more event names separated by commas. If set, only return event logs with events matching this pattern.
   * *New in version 2.9.0*
   *
   */
  includedEvents?: string;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * Filter on map index for mapped task.
   */
  mapIndex?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
  /**
   * The owner's name of event log.
   */
  owner?: string;
  /**
   * Returns objects matched by the Run ID.
   */
  runId?: string;
  /**
   * Returns objects matched by the Task ID.
   */
  taskId?: string;
  /**
   * Filter on try_number for task instance.
   */
  tryNumber?: number;
};

export type GetEventLogsResponse = EventLogCollection;

export type GetEventLogData = {
  /**
   * The event log ID.
   */
  eventLogId: number;
};

export type GetEventLogResponse = EventLog;

export type GetImportErrorsData = {
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
};

export type GetImportErrorsResponse = ImportErrorCollection;

export type GetImportErrorData = {
  /**
   * The import error ID.
   */
  importErrorId: number;
};

export type GetImportErrorResponse = ImportError;

export type GetPoolsData = {
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
};

export type GetPoolsResponse = PoolCollection;

export type PostPoolData = {
  requestBody: Pool;
};

export type PostPoolResponse = Pool;

export type GetPoolData = {
  /**
   * The pool name.
   */
  poolName: string;
};

export type GetPoolResponse = Pool;

export type PatchPoolData = {
  /**
   * The pool name.
   */
  poolName: string;
  requestBody: Pool;
  /**
   * The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   */
  updateMask?: Array<string>;
};

export type PatchPoolResponse = Pool;

export type DeletePoolData = {
  /**
   * The pool name.
   */
  poolName: string;
};

export type DeletePoolResponse = void;

export type GetProvidersResponse = ProviderCollection & CollectionInfo;

export type GetVariablesData = {
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
};

export type GetVariablesResponse = VariableCollection;

export type PostVariablesData = {
  requestBody: Variable;
};

export type PostVariablesResponse = Variable;

export type GetVariableData = {
  /**
   * The variable Key.
   */
  variableKey: string;
};

export type GetVariableResponse = Variable;

export type PatchVariableData = {
  requestBody: Variable;
  /**
   * The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   */
  updateMask?: Array<string>;
  /**
   * The variable Key.
   */
  variableKey: string;
};

export type PatchVariableResponse = Variable;

export type DeleteVariableData = {
  /**
   * The variable Key.
   */
  variableKey: string;
};

export type DeleteVariableResponse = void;

export type GetXcomEntriesData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * Filter on map index for mapped task.
   */
  mapIndex?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The task ID.
   */
  taskId: string;
  /**
   * Only filter the XCom records which have the provided key.
   */
  xcomKey?: string;
};

export type GetXcomEntriesResponse = XComCollection;

export type GetXcomEntryData = {
  /**
   * The DAG ID.
   */
  dagId: string;
  /**
   * The DAG run ID.
   */
  dagRunId: string;
  /**
   * Whether to deserialize an XCom value when using a custom XCom backend.
   *
   * The XCom API endpoint calls `orm_deserialize_value` by default since an XCom may contain value
   * that is potentially expensive to deserialize in the web server. Setting this to true overrides
   * the consideration, and calls `deserialize_value` instead.
   *
   * This parameter is not meaningful when using the default XCom backend.
   *
   * *New in version 2.4.0*
   *
   */
  deserialize?: boolean;
  /**
   * Filter on map index for mapped task.
   */
  mapIndex?: number;
  /**
   * Whether to convert the XCom value to be a string. XCom values can be of Any data type.
   *
   * If set to true (default) the Any value will be returned as string, e.g. a Python representation
   * of a dict. If set to false it will return the raw data as dict, list, string or whatever was stored.
   *
   * *New in version 2.10.0*
   *
   */
  stringify?: boolean;
  /**
   * The task ID.
   */
  taskId: string;
  /**
   * The XCom key.
   */
  xcomKey: string;
};

export type GetXcomEntryResponse = XCom;

export type GetDagStatsData = {
  /**
   * One or more DAG IDs separated by commas to filter relevant Dags.
   *
   */
  dagIds: string;
};

export type GetDagStatsResponse = DagStatsCollectionSchema;

export type GetDagWarningsData = {
  /**
   * If set, only return DAG warnings with this dag_id.
   */
  dagId?: string;
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
  /**
   * If set, only return DAG warnings with this type.
   */
  warningType?: string;
};

export type GetDagWarningsResponse = DagWarningCollection;

export type GetConfigData = {
  /**
   * If given, only return config of this section.
   */
  section?: string;
};

export type GetConfigResponse = Config;

export type GetValueData = {
  option: string;
  section: string;
};

export type GetValueResponse = Config;

export type GetHealthResponse = HealthInfo;

export type GetVersionResponse = VersionInfo;

export type GetPluginsData = {
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
};

export type GetPluginsResponse = PluginCollection;

export type GetRolesData = {
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
};

export type GetRolesResponse = RoleCollection;

export type PostRoleData = {
  requestBody: Role;
};

export type PostRoleResponse = Role;

export type GetRoleData = {
  /**
   * The role name
   */
  roleName: string;
};

export type GetRoleResponse = Role;

export type PatchRoleData = {
  requestBody: Role;
  /**
   * The role name
   */
  roleName: string;
  /**
   * The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   */
  updateMask?: Array<string>;
};

export type PatchRoleResponse = Role;

export type DeleteRoleData = {
  /**
   * The role name
   */
  roleName: string;
};

export type DeleteRoleResponse = void;

export type GetPermissionsData = {
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
};

export type GetPermissionsResponse = ActionCollection;

export type GetUsersData = {
  /**
   * The numbers of items to return.
   */
  limit?: number;
  /**
   * The number of items to skip before starting to collect the result set.
   */
  offset?: number;
  /**
   * The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   */
  orderBy?: string;
};

export type GetUsersResponse = UserCollection;

export type PostUserData = {
  requestBody: User;
};

export type PostUserResponse = User;

export type GetUserData = {
  /**
   * The username of the user.
   *
   * *New in version 2.1.0*
   *
   */
  username: string;
};

export type GetUserResponse = UserCollectionItem;

export type PatchUserData = {
  requestBody: User;
  /**
   * The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   */
  updateMask?: Array<string>;
  /**
   * The username of the user.
   *
   * *New in version 2.1.0*
   *
   */
  username: string;
};

export type PatchUserResponse = UserCollectionItem;

export type DeleteUserData = {
  /**
   * The username of the user.
   *
   * *New in version 2.1.0*
   *
   */
  username: string;
};

export type DeleteUserResponse = void;

export type $OpenApiTs = {
  "/connections": {
    get: {
      req: GetConnectionsData;
      res: {
        /**
         * Success.
         */
        200: ConnectionCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
    post: {
      req: PostConnectionData;
      res: {
        /**
         * Success.
         */
        200: Connection;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/connections/{connection_id}": {
    get: {
      req: GetConnectionData;
      res: {
        /**
         * Success.
         */
        200: Connection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    patch: {
      req: PatchConnectionData;
      res: {
        /**
         * Success.
         */
        200: Connection;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteConnectionData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/connections/test": {
    post: {
      req: TestConnectionData;
      res: {
        /**
         * Success.
         */
        200: ConnectionTest;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags": {
    get: {
      req: GetDagsData;
      res: {
        /**
         * Success.
         */
        200: DAGCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
      };
    };
    patch: {
      req: PatchDagsData;
      res: {
        /**
         * Success.
         */
        200: DAGCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}": {
    get: {
      req: GetDagData;
      res: {
        /**
         * Success.
         */
        200: DAG;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    patch: {
      req: PatchDagData;
      res: {
        /**
         * Success.
         */
        200: DAG;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteDagData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
        /**
         * An existing resource conflicts with the request.
         */
        409: Error;
      };
    };
  };
  "/dags/{dag_id}/clearTaskInstances": {
    post: {
      req: PostClearTaskInstancesData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceReferenceCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/updateTaskInstancesState": {
    post: {
      req: PostSetTaskInstancesStateData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceReferenceCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/parseDagFile/{file_token}": {
    put: {
      req: ReparseDagFileData;
      res: {
        /**
         * Success.
         */
        201: unknown;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/details": {
    get: {
      req: GetDagDetailsData;
      res: {
        /**
         * Success.
         */
        200: DAGDetail;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/tasks": {
    get: {
      req: GetTasksData;
      res: {
        /**
         * Success.
         */
        200: TaskCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/tasks/{task_id}": {
    get: {
      req: GetTaskData;
      res: {
        /**
         * Success.
         */
        200: Task;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dagSources/{file_token}": {
    get: {
      req: GetDagSourceData;
      res: {
        /**
         * Success.
         */
        200: {
          content?: string;
        };
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
        /**
         * A specified Accept header is not allowed.
         */
        406: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/setNote": {
    patch: {
      req: SetTaskInstanceNoteData;
      res: {
        /**
         * Success.
         */
        200: TaskInstance;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/setNote": {
    patch: {
      req: SetMappedTaskInstanceNoteData;
      res: {
        /**
         * Success.
         */
        200: TaskInstance;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/dependencies": {
    get: {
      req: GetTaskInstanceDependenciesData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceDependencyCollection;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/dependencies": {
    get: {
      req: GetMappedTaskInstanceDependenciesData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceDependencyCollection;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances": {
    get: {
      req: GetTaskInstancesData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}": {
    get: {
      req: GetTaskInstanceData;
      res: {
        /**
         * Success.
         */
        200: TaskInstance;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    patch: {
      req: PatchTaskInstanceData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceReference;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}": {
    get: {
      req: GetMappedTaskInstanceData;
      res: {
        /**
         * Success.
         */
        200: TaskInstance;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    patch: {
      req: PatchMappedTaskInstanceData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceReference;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/listMapped": {
    get: {
      req: GetMappedTaskInstancesData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/~/dagRuns/~/taskInstances/list": {
    post: {
      req: GetTaskInstancesBatchData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/tries/{task_try_number}": {
    get: {
      req: GetTaskInstanceTryDetailsData;
      res: {
        /**
         * Success.
         */
        200: TaskInstance;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/tries": {
    get: {
      req: GetTaskInstanceTriesData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/tries": {
    get: {
      req: GetMappedTaskInstanceTriesData;
      res: {
        /**
         * Success.
         */
        200: TaskInstanceCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/tries/{task_try_number}": {
    get: {
      req: GetMappedTaskInstanceTryDetailsData;
      res: {
        /**
         * Success.
         */
        200: TaskInstance;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/links": {
    get: {
      req: GetExtraLinksData;
      res: {
        /**
         * Success.
         */
        200: ExtraLinkCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/logs/{task_try_number}": {
    get: {
      req: GetLogData;
      res: {
        /**
         * Success.
         */
        200: {
          continuation_token?: string;
          content?: string;
        };
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns": {
    get: {
      req: GetDagRunsData;
      res: {
        /**
         * List of DAG runs.
         */
        200: DAGRunCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
      };
    };
    post: {
      req: PostDagRunData;
      res: {
        /**
         * Success.
         */
        200: DAGRun;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
        /**
         * An existing resource conflicts with the request.
         */
        409: Error;
      };
    };
  };
  "/dags/~/dagRuns/list": {
    post: {
      req: GetDagRunsBatchData;
      res: {
        /**
         * Success.
         */
        200: DAGRunCollection;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}": {
    get: {
      req: GetDagRunData;
      res: {
        /**
         * Success.
         */
        200: DAGRun;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteDagRunData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    patch: {
      req: UpdateDagRunStateData;
      res: {
        /**
         * Success.
         */
        200: DAGRun;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/clear": {
    post: {
      req: ClearDagRunData;
      res: {
        /**
         * Success.
         */
        200: DAGRun | TaskInstanceCollection;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/upstreamDatasetEvents": {
    get: {
      req: GetUpstreamDatasetEventsData;
      res: {
        /**
         * Success.
         */
        200: DatasetEventCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/setNote": {
    patch: {
      req: SetDagRunNoteData;
      res: {
        /**
         * Success.
         */
        200: DAGRun;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/datasets/queuedEvent/{uri}": {
    get: {
      req: GetDagDatasetQueuedEventData;
      res: {
        /**
         * Success.
         */
        200: QueuedEvent;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteDagDatasetQueuedEventData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/datasets/queuedEvent": {
    get: {
      req: GetDagDatasetQueuedEventsData;
      res: {
        /**
         * Success.
         */
        200: QueuedEventCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteDagDatasetQueuedEventsData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/datasets/queuedEvent/{uri}": {
    get: {
      req: GetDatasetQueuedEventsData;
      res: {
        /**
         * Success.
         */
        200: QueuedEventCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteDatasetQueuedEventsData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/datasets": {
    get: {
      req: GetDatasetsData;
      res: {
        /**
         * Success.
         */
        200: DatasetCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/datasets/{uri}": {
    get: {
      req: GetDatasetData;
      res: {
        /**
         * Success.
         */
        200: Dataset;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/datasets/events": {
    get: {
      req: GetDatasetEventsData;
      res: {
        /**
         * Success.
         */
        200: DatasetEventCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    post: {
      req: CreateDatasetEventData;
      res: {
        /**
         * Success.
         */
        200: DatasetEvent;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/eventLogs": {
    get: {
      req: GetEventLogsData;
      res: {
        /**
         * Success.
         */
        200: EventLogCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/eventLogs/{event_log_id}": {
    get: {
      req: GetEventLogData;
      res: {
        /**
         * Success.
         */
        200: EventLog;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/importErrors": {
    get: {
      req: GetImportErrorsData;
      res: {
        /**
         * Success.
         */
        200: ImportErrorCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/importErrors/{import_error_id}": {
    get: {
      req: GetImportErrorData;
      res: {
        /**
         * Success.
         */
        200: ImportError;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/pools": {
    get: {
      req: GetPoolsData;
      res: {
        /**
         * List of pools.
         */
        200: PoolCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
    post: {
      req: PostPoolData;
      res: {
        /**
         * Success.
         */
        200: Pool;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/pools/{pool_name}": {
    get: {
      req: GetPoolData;
      res: {
        /**
         * Success.
         */
        200: Pool;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    patch: {
      req: PatchPoolData;
      res: {
        /**
         * Success.
         */
        200: Pool;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
        /**
         * An existing resource conflicts with the request.
         */
        409: Error;
      };
    };
    delete: {
      req: DeletePoolData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/providers": {
    get: {
      res: {
        /**
         * List of providers.
         */
        200: ProviderCollection & CollectionInfo;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/variables": {
    get: {
      req: GetVariablesData;
      res: {
        /**
         * Success.
         */
        200: VariableCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
    post: {
      req: PostVariablesData;
      res: {
        /**
         * Success.
         */
        200: Variable;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/variables/{variable_key}": {
    get: {
      req: GetVariableData;
      res: {
        /**
         * Success.
         */
        200: Variable;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    patch: {
      req: PatchVariableData;
      res: {
        /**
         * Success.
         */
        200: Variable;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteVariableData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries": {
    get: {
      req: GetXcomEntriesData;
      res: {
        /**
         * Success.
         */
        200: XComCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}": {
    get: {
      req: GetXcomEntryData;
      res: {
        /**
         * Success.
         */
        200: XCom;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/dagStats": {
    get: {
      req: GetDagStatsData;
      res: {
        /**
         * Success.
         */
        200: DagStatsCollectionSchema;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/dagWarnings": {
    get: {
      req: GetDagWarningsData;
      res: {
        /**
         * Success.
         */
        200: DagWarningCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/config": {
    get: {
      req: GetConfigData;
      res: {
        /**
         * Success.
         */
        200: Config;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/config/section/{section}/option/{option}": {
    get: {
      req: GetValueData;
      res: {
        /**
         * Success.
         */
        200: Config;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/health": {
    get: {
      res: {
        /**
         * Success.
         */
        200: HealthInfo;
      };
    };
  };
  "/version": {
    get: {
      res: {
        /**
         * Success.
         */
        200: VersionInfo;
      };
    };
  };
  "/plugins": {
    get: {
      req: GetPluginsData;
      res: {
        /**
         * Success
         */
        200: PluginCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/roles": {
    get: {
      req: GetRolesData;
      res: {
        /**
         * Success.
         */
        200: RoleCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
    post: {
      req: PostRoleData;
      res: {
        /**
         * Success.
         */
        200: Role;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/roles/{role_name}": {
    get: {
      req: GetRoleData;
      res: {
        /**
         * Success.
         */
        200: Role;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    patch: {
      req: PatchRoleData;
      res: {
        /**
         * Success.
         */
        200: Role;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteRoleData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
  "/permissions": {
    get: {
      req: GetPermissionsData;
      res: {
        /**
         * Success.
         */
        200: ActionCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
  };
  "/users": {
    get: {
      req: GetUsersData;
      res: {
        /**
         * Success.
         */
        200: UserCollection;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
      };
    };
    post: {
      req: PostUserData;
      res: {
        /**
         * Success.
         */
        200: User;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * An existing resource conflicts with the request.
         */
        409: Error;
      };
    };
  };
  "/users/{username}": {
    get: {
      req: GetUserData;
      res: {
        /**
         * Success.
         */
        200: UserCollectionItem;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    patch: {
      req: PatchUserData;
      res: {
        /**
         * Success.
         */
        200: UserCollectionItem;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
    delete: {
      req: DeleteUserData;
      res: {
        /**
         * Success.
         */
        204: void;
        /**
         * Client specified an invalid argument.
         */
        400: Error;
        /**
         * Request not authenticated due to missing, invalid, authentication info.
         */
        401: Error;
        /**
         * Client does not have sufficient permission.
         */
        403: Error;
        /**
         * A specified resource is not found.
         */
        404: Error;
      };
    };
  };
};
