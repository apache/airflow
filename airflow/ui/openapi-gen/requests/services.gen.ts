// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
  GetConnectionsData,
  GetConnectionsResponse,
  PostConnectionData,
  PostConnectionResponse,
  GetConnectionData,
  GetConnectionResponse,
  PatchConnectionData,
  PatchConnectionResponse,
  DeleteConnectionData,
  DeleteConnectionResponse,
  TestConnectionData,
  TestConnectionResponse,
  GetDagsData,
  GetDagsResponse,
  PatchDagsData,
  PatchDagsResponse,
  GetDagData,
  GetDagResponse,
  PatchDagData,
  PatchDagResponse,
  DeleteDagData,
  DeleteDagResponse,
  PostClearTaskInstancesData,
  PostClearTaskInstancesResponse,
  PostSetTaskInstancesStateData,
  PostSetTaskInstancesStateResponse,
  ReparseDagFileData,
  ReparseDagFileResponse,
  GetDagDetailsData,
  GetDagDetailsResponse,
  GetTasksData,
  GetTasksResponse,
  GetTaskData,
  GetTaskResponse,
  GetDagSourceData,
  GetDagSourceResponse,
  SetTaskInstanceNoteData,
  SetTaskInstanceNoteResponse,
  SetMappedTaskInstanceNoteData,
  SetMappedTaskInstanceNoteResponse,
  GetTaskInstanceDependenciesData,
  GetTaskInstanceDependenciesResponse,
  GetMappedTaskInstanceDependenciesData,
  GetMappedTaskInstanceDependenciesResponse,
  GetTaskInstancesData,
  GetTaskInstancesResponse,
  GetTaskInstanceData,
  GetTaskInstanceResponse,
  PatchTaskInstanceData,
  PatchTaskInstanceResponse,
  GetMappedTaskInstanceData,
  GetMappedTaskInstanceResponse,
  PatchMappedTaskInstanceData,
  PatchMappedTaskInstanceResponse,
  GetMappedTaskInstancesData,
  GetMappedTaskInstancesResponse,
  GetTaskInstancesBatchData,
  GetTaskInstancesBatchResponse,
  GetTaskInstanceTryDetailsData,
  GetTaskInstanceTryDetailsResponse,
  GetTaskInstanceTriesData,
  GetTaskInstanceTriesResponse,
  GetMappedTaskInstanceTriesData,
  GetMappedTaskInstanceTriesResponse,
  GetMappedTaskInstanceTryDetailsData,
  GetMappedTaskInstanceTryDetailsResponse,
  GetExtraLinksData,
  GetExtraLinksResponse,
  GetLogData,
  GetLogResponse,
  GetDagRunsData,
  GetDagRunsResponse,
  PostDagRunData,
  PostDagRunResponse,
  GetDagRunsBatchData,
  GetDagRunsBatchResponse,
  GetDagRunData,
  GetDagRunResponse,
  DeleteDagRunData,
  DeleteDagRunResponse,
  UpdateDagRunStateData,
  UpdateDagRunStateResponse,
  ClearDagRunData,
  ClearDagRunResponse,
  GetUpstreamDatasetEventsData,
  GetUpstreamDatasetEventsResponse,
  SetDagRunNoteData,
  SetDagRunNoteResponse,
  GetDagDatasetQueuedEventData,
  GetDagDatasetQueuedEventResponse,
  DeleteDagDatasetQueuedEventData,
  DeleteDagDatasetQueuedEventResponse,
  GetDagDatasetQueuedEventsData,
  GetDagDatasetQueuedEventsResponse,
  DeleteDagDatasetQueuedEventsData,
  DeleteDagDatasetQueuedEventsResponse,
  GetDatasetQueuedEventsData,
  GetDatasetQueuedEventsResponse,
  DeleteDatasetQueuedEventsData,
  DeleteDatasetQueuedEventsResponse,
  GetDatasetsData,
  GetDatasetsResponse,
  GetDatasetData,
  GetDatasetResponse,
  GetDatasetEventsData,
  GetDatasetEventsResponse,
  CreateDatasetEventData,
  CreateDatasetEventResponse,
  GetEventLogsData,
  GetEventLogsResponse,
  GetEventLogData,
  GetEventLogResponse,
  GetImportErrorsData,
  GetImportErrorsResponse,
  GetImportErrorData,
  GetImportErrorResponse,
  GetPoolsData,
  GetPoolsResponse,
  PostPoolData,
  PostPoolResponse,
  GetPoolData,
  GetPoolResponse,
  PatchPoolData,
  PatchPoolResponse,
  DeletePoolData,
  DeletePoolResponse,
  GetProvidersResponse,
  GetVariablesData,
  GetVariablesResponse,
  PostVariablesData,
  PostVariablesResponse,
  GetVariableData,
  GetVariableResponse,
  PatchVariableData,
  PatchVariableResponse,
  DeleteVariableData,
  DeleteVariableResponse,
  GetXcomEntriesData,
  GetXcomEntriesResponse,
  GetXcomEntryData,
  GetXcomEntryResponse,
  GetDagStatsData,
  GetDagStatsResponse,
  GetDagWarningsData,
  GetDagWarningsResponse,
  GetConfigData,
  GetConfigResponse,
  GetValueData,
  GetValueResponse,
  GetHealthResponse,
  GetVersionResponse,
  GetPluginsData,
  GetPluginsResponse,
  GetRolesData,
  GetRolesResponse,
  PostRoleData,
  PostRoleResponse,
  GetRoleData,
  GetRoleResponse,
  PatchRoleData,
  PatchRoleResponse,
  DeleteRoleData,
  DeleteRoleResponse,
  GetPermissionsData,
  GetPermissionsResponse,
  GetUsersData,
  GetUsersResponse,
  PostUserData,
  PostUserResponse,
  GetUserData,
  GetUserResponse,
  PatchUserData,
  PatchUserResponse,
  DeleteUserData,
  DeleteUserResponse,
} from "./types.gen";

export class ConnectionService {
  /**
   * List connections
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns ConnectionCollection Success.
   * @throws ApiError
   */
  public static getConnections(
    data: GetConnectionsData = {}
  ): CancelablePromise<GetConnectionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/connections",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Create a connection
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Connection Success.
   * @throws ApiError
   */
  public static postConnection(
    data: PostConnectionData
  ): CancelablePromise<PostConnectionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/connections",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Get a connection
   * @param data The data for the request.
   * @param data.connectionId The connection ID.
   * @returns Connection Success.
   * @throws ApiError
   */
  public static getConnection(
    data: GetConnectionData
  ): CancelablePromise<GetConnectionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/connections/{connection_id}",
      path: {
        connection_id: data.connectionId,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Update a connection
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.connectionId The connection ID.
   * @param data.updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   * @returns Connection Success.
   * @throws ApiError
   */
  public static patchConnection(
    data: PatchConnectionData
  ): CancelablePromise<PatchConnectionResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/connections/{connection_id}",
      path: {
        connection_id: data.connectionId,
      },
      query: {
        update_mask: data.updateMask,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Delete a connection
   * @param data The data for the request.
   * @param data.connectionId The connection ID.
   * @returns void Success.
   * @throws ApiError
   */
  public static deleteConnection(
    data: DeleteConnectionData
  ): CancelablePromise<DeleteConnectionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/connections/{connection_id}",
      path: {
        connection_id: data.connectionId,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Test a connection
   * Test a connection.
   *
   * For security reasons, the test connection functionality is disabled by default across Airflow UI, API and CLI.
   * For more information on capabilities of users, see the documentation:
   * https://airflow.apache.org/docs/apache-airflow/stable/security/security_model.html#capabilities-of-authenticated-ui-users.
   * It is strongly advised to not enable the feature until you make sure that only
   * highly trusted UI/API users have "edit connection" permissions.
   *
   * Set the "test_connection" flag to "Enabled" in the "core" section of Airflow configuration (airflow.cfg) to enable testing of collections.
   * It can also be controlled by the environment variable `AIRFLOW__CORE__TEST_CONNECTION`.
   *
   * *New in version 2.2.0*
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ConnectionTest Success.
   * @throws ApiError
   */
  public static testConnection(
    data: TestConnectionData
  ): CancelablePromise<TestConnectionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/connections/test",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class DagService {
  /**
   * List DAGs
   * List DAGs in the database.
   * `dag_id_pattern` can be set to match dags of a specific pattern
   *
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @param data.tags List of tags to filter results.
   *
   * *New in version 2.2.0*
   *
   * @param data.onlyActive Only filter active DAGs.
   *
   * *New in version 2.1.1*
   *
   * @param data.paused Only filter paused/unpaused DAGs. If absent or null, it returns paused and unpaused DAGs.
   *
   * *New in version 2.6.0*
   *
   * @param data.fields List of field for return.
   *
   * @param data.dagIdPattern If set, only return DAGs with dag_ids matching this pattern.
   *
   * @returns DAGCollection Success.
   * @throws ApiError
   */
  public static getDags(
    data: GetDagsData = {}
  ): CancelablePromise<GetDagsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
        tags: data.tags,
        only_active: data.onlyActive,
        paused: data.paused,
        fields: data.fields,
        dag_id_pattern: data.dagIdPattern,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
      },
    });
  }

  /**
   * Update DAGs
   * Update DAGs of a given dag_id_pattern using UpdateMask.
   * This endpoint allows specifying `~` as the dag_id_pattern to update all DAGs.
   * *New in version 2.3.0*
   *
   * @param data The data for the request.
   * @param data.dagIdPattern If set, only update DAGs with dag_ids matching this pattern.
   *
   * @param data.requestBody
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.tags List of tags to filter results.
   *
   * *New in version 2.2.0*
   *
   * @param data.updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   * @param data.onlyActive Only filter active DAGs.
   *
   * *New in version 2.1.1*
   *
   * @returns DAGCollection Success.
   * @throws ApiError
   */
  public static patchDags(
    data: PatchDagsData
  ): CancelablePromise<PatchDagsResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/dags",
      query: {
        limit: data.limit,
        offset: data.offset,
        tags: data.tags,
        update_mask: data.updateMask,
        only_active: data.onlyActive,
        dag_id_pattern: data.dagIdPattern,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get basic information about a DAG
   * Presents only information available in database (DAGModel).
   * If you need detailed information, consider using GET /dags/{dag_id}/details.
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.fields List of field for return.
   *
   * @returns DAG Success.
   * @throws ApiError
   */
  public static getDag(data: GetDagData): CancelablePromise<GetDagResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}",
      path: {
        dag_id: data.dagId,
      },
      query: {
        fields: data.fields,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Update a DAG
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.dagId The DAG ID.
   * @param data.updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   * @returns DAG Success.
   * @throws ApiError
   */
  public static patchDag(
    data: PatchDagData
  ): CancelablePromise<PatchDagResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/dags/{dag_id}",
      path: {
        dag_id: data.dagId,
      },
      query: {
        update_mask: data.updateMask,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Delete a DAG
   * Deletes all metadata related to the DAG, including finished DAG Runs and Tasks.
   * Logs are not deleted. This action cannot be undone.
   *
   * *New in version 2.2.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @returns void Success.
   * @throws ApiError
   */
  public static deleteDag(
    data: DeleteDagData
  ): CancelablePromise<DeleteDagResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/dags/{dag_id}",
      path: {
        dag_id: data.dagId,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
        409: "An existing resource conflicts with the request.",
      },
    });
  }

  /**
   * Clear a set of task instances
   * Clears a set of task instances associated with the DAG for a specified date range.
   *
   * @param data The data for the request.
   * @param data.requestBody Parameters of action
   * @param data.dagId The DAG ID.
   * @returns TaskInstanceReferenceCollection Success.
   * @throws ApiError
   */
  public static postClearTaskInstances(
    data: PostClearTaskInstancesData
  ): CancelablePromise<PostClearTaskInstancesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/dags/{dag_id}/clearTaskInstances",
      path: {
        dag_id: data.dagId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Set a state of task instances
   * Updates the state for multiple task instances simultaneously.
   *
   * @param data The data for the request.
   * @param data.requestBody Parameters of action
   * @param data.dagId The DAG ID.
   * @returns TaskInstanceReferenceCollection Success.
   * @throws ApiError
   */
  public static postSetTaskInstancesState(
    data: PostSetTaskInstancesStateData
  ): CancelablePromise<PostSetTaskInstancesStateResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/dags/{dag_id}/updateTaskInstancesState",
      path: {
        dag_id: data.dagId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Request re-parsing of a DAG file
   * Request re-parsing of existing DAG files using a file token.
   *
   * @param data The data for the request.
   * @param data.fileToken The key containing the encrypted path to the file. Encryption and decryption take place only on
   * the server. This prevents the client from reading an non-DAG file. This also ensures API
   * extensibility, because the format of encrypted data may change.
   *
   * @returns unknown Success.
   * @throws ApiError
   */
  public static reparseDagFile(
    data: ReparseDagFileData
  ): CancelablePromise<ReparseDagFileResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/parseDagFile/{file_token}",
      path: {
        file_token: data.fileToken,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get a simplified representation of DAG
   * The response contains many DAG attributes, so the response can be large. If possible, consider using GET /dags/{dag_id}.
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.fields List of field for return.
   *
   * @returns DAGDetail Success.
   * @throws ApiError
   */
  public static getDagDetails(
    data: GetDagDetailsData
  ): CancelablePromise<GetDagDetailsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/details",
      path: {
        dag_id: data.dagId,
      },
      query: {
        fields: data.fields,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get tasks for DAG
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns TaskCollection Success.
   * @throws ApiError
   */
  public static getTasks(
    data: GetTasksData
  ): CancelablePromise<GetTasksResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/tasks",
      path: {
        dag_id: data.dagId,
      },
      query: {
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get simplified representation of a task
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.taskId The task ID.
   * @returns Task Success.
   * @throws ApiError
   */
  public static getTask(data: GetTaskData): CancelablePromise<GetTaskResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/tasks/{task_id}",
      path: {
        dag_id: data.dagId,
        task_id: data.taskId,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get a source code
   * Get a source code using file token.
   *
   * @param data The data for the request.
   * @param data.fileToken The key containing the encrypted path to the file. Encryption and decryption take place only on
   * the server. This prevents the client from reading an non-DAG file. This also ensures API
   * extensibility, because the format of encrypted data may change.
   *
   * @returns unknown Success.
   * @throws ApiError
   */
  public static getDagSource(
    data: GetDagSourceData
  ): CancelablePromise<GetDagSourceResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dagSources/{file_token}",
      path: {
        file_token: data.fileToken,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
        406: "A specified Accept header is not allowed.",
      },
    });
  }
}

export class TaskInstanceService {
  /**
   * Update the TaskInstance note.
   * Update the manual user note of a non-mapped Task Instance.
   *
   * *New in version 2.5.0*
   *
   * @param data The data for the request.
   * @param data.requestBody Parameters of set Task Instance note.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @returns TaskInstance Success.
   * @throws ApiError
   */
  public static setTaskInstanceNote(
    data: SetTaskInstanceNoteData
  ): CancelablePromise<SetTaskInstanceNoteResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/setNote",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Update the TaskInstance note.
   * Update the manual user note of a mapped Task Instance.
   *
   * *New in version 2.5.0*
   *
   * @param data The data for the request.
   * @param data.requestBody Parameters of set Task Instance note.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.mapIndex The map index.
   * @returns TaskInstance Success.
   * @throws ApiError
   */
  public static setMappedTaskInstanceNote(
    data: SetMappedTaskInstanceNoteData
  ): CancelablePromise<SetMappedTaskInstanceNoteResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/setNote",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
        map_index: data.mapIndex,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get task dependencies blocking task from getting scheduled.
   * Get task dependencies blocking task from getting scheduled.
   *
   * *New in version 2.10.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @returns TaskInstanceDependencyCollection Success.
   * @throws ApiError
   */
  public static getTaskInstanceDependencies(
    data: GetTaskInstanceDependenciesData
  ): CancelablePromise<GetTaskInstanceDependenciesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/dependencies",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get task dependencies blocking task from getting scheduled.
   * Get task dependencies blocking task from getting scheduled.
   *
   * *New in version 2.10.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.mapIndex The map index.
   * @returns TaskInstanceDependencyCollection Success.
   * @throws ApiError
   */
  public static getMappedTaskInstanceDependencies(
    data: GetMappedTaskInstanceDependenciesData
  ): CancelablePromise<GetMappedTaskInstanceDependenciesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/dependencies",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
        map_index: data.mapIndex,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * List task instances
   * This endpoint allows specifying `~` as the dag_id, dag_run_id to retrieve DAG runs for all DAGs and DAG runs.
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by. Prefix a field name
   * with `-` to reverse the sort order. `order_by` defaults to
   * `map_index` when unspecified.
   * Supported field names: `state`, `duration`, `start_date`, `end_date`
   * and `map_index`.
   *
   * *New in version 3.0.0*
   *
   * @param data.executionDateGte Returns objects greater or equal to the specified date.
   *
   * This can be combined with execution_date_lte parameter to receive only the selected period.
   *
   * @param data.executionDateLte Returns objects less than or equal to the specified date.
   *
   * This can be combined with execution_date_gte parameter to receive only the selected period.
   *
   * @param data.startDateGte Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   * @param data.startDateLte Returns objects less or equal the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   * @param data.endDateGte Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   * @param data.endDateLte Returns objects less than or equal to the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   * @param data.updatedAtGte Returns objects greater or equal the specified date.
   *
   * This can be combined with updated_at_lte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   * @param data.updatedAtLte Returns objects less or equal the specified date.
   *
   * This can be combined with updated_at_gte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   * @param data.durationGte Returns objects greater than or equal to the specified values.
   *
   * This can be combined with duration_lte parameter to receive only the selected period.
   *
   * @param data.durationLte Returns objects less than or equal to the specified values.
   *
   * This can be combined with duration_gte parameter to receive only the selected range.
   *
   * @param data.state The value can be repeated to retrieve multiple matching values (OR condition).
   * @param data.pool The value can be repeated to retrieve multiple matching values (OR condition).
   * @param data.queue The value can be repeated to retrieve multiple matching values (OR condition).
   * @param data.executor The value can be repeated to retrieve multiple matching values (OR condition).
   * @returns TaskInstanceCollection Success.
   * @throws ApiError
   */
  public static getTaskInstances(
    data: GetTaskInstancesData
  ): CancelablePromise<GetTaskInstancesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
        execution_date_gte: data.executionDateGte,
        execution_date_lte: data.executionDateLte,
        start_date_gte: data.startDateGte,
        start_date_lte: data.startDateLte,
        end_date_gte: data.endDateGte,
        end_date_lte: data.endDateLte,
        updated_at_gte: data.updatedAtGte,
        updated_at_lte: data.updatedAtLte,
        duration_gte: data.durationGte,
        duration_lte: data.durationLte,
        state: data.state,
        pool: data.pool,
        queue: data.queue,
        executor: data.executor,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Get a task instance
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @returns TaskInstance Success.
   * @throws ApiError
   */
  public static getTaskInstance(
    data: GetTaskInstanceData
  ): CancelablePromise<GetTaskInstanceResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Updates the state of a task instance
   * Updates the state for single task instance.
   * *New in version 2.5.0*
   *
   * @param data The data for the request.
   * @param data.requestBody Parameters of action
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @returns TaskInstanceReference Success.
   * @throws ApiError
   */
  public static patchTaskInstance(
    data: PatchTaskInstanceData
  ): CancelablePromise<PatchTaskInstanceResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get a mapped task instance
   * Get details of a mapped task instance.
   *
   * *New in version 2.3.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.mapIndex The map index.
   * @returns TaskInstance Success.
   * @throws ApiError
   */
  public static getMappedTaskInstance(
    data: GetMappedTaskInstanceData
  ): CancelablePromise<GetMappedTaskInstanceResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
        map_index: data.mapIndex,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Updates the state of a mapped task instance
   * Updates the state for single mapped task instance.
   * *New in version 2.5.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.mapIndex The map index.
   * @param data.requestBody Parameters of action
   * @returns TaskInstanceReference Success.
   * @throws ApiError
   */
  public static patchMappedTaskInstance(
    data: PatchMappedTaskInstanceData
  ): CancelablePromise<PatchMappedTaskInstanceResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
        map_index: data.mapIndex,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * List mapped task instances
   * Get details of all mapped task instances.
   *
   * *New in version 2.3.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.executionDateGte Returns objects greater or equal to the specified date.
   *
   * This can be combined with execution_date_lte parameter to receive only the selected period.
   *
   * @param data.executionDateLte Returns objects less than or equal to the specified date.
   *
   * This can be combined with execution_date_gte parameter to receive only the selected period.
   *
   * @param data.startDateGte Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   * @param data.startDateLte Returns objects less or equal the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   * @param data.endDateGte Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   * @param data.endDateLte Returns objects less than or equal to the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   * @param data.updatedAtGte Returns objects greater or equal the specified date.
   *
   * This can be combined with updated_at_lte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   * @param data.updatedAtLte Returns objects less or equal the specified date.
   *
   * This can be combined with updated_at_gte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   * @param data.durationGte Returns objects greater than or equal to the specified values.
   *
   * This can be combined with duration_lte parameter to receive only the selected period.
   *
   * @param data.durationLte Returns objects less than or equal to the specified values.
   *
   * This can be combined with duration_gte parameter to receive only the selected range.
   *
   * @param data.state The value can be repeated to retrieve multiple matching values (OR condition).
   * @param data.pool The value can be repeated to retrieve multiple matching values (OR condition).
   * @param data.queue The value can be repeated to retrieve multiple matching values (OR condition).
   * @param data.executor The value can be repeated to retrieve multiple matching values (OR condition).
   * @param data.orderBy The name of the field to order the results by. Prefix a field name
   * with `-` to reverse the sort order. `order_by` defaults to
   * `map_index` when unspecified.
   * Supported field names: `state`, `duration`, `start_date`, `end_date`
   * and `map_index`.
   *
   * *New in version 3.0.0*
   *
   * @returns TaskInstanceCollection Success.
   * @throws ApiError
   */
  public static getMappedTaskInstances(
    data: GetMappedTaskInstancesData
  ): CancelablePromise<GetMappedTaskInstancesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/listMapped",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        execution_date_gte: data.executionDateGte,
        execution_date_lte: data.executionDateLte,
        start_date_gte: data.startDateGte,
        start_date_lte: data.startDateLte,
        end_date_gte: data.endDateGte,
        end_date_lte: data.endDateLte,
        updated_at_gte: data.updatedAtGte,
        updated_at_lte: data.updatedAtLte,
        duration_gte: data.durationGte,
        duration_lte: data.durationLte,
        state: data.state,
        pool: data.pool,
        queue: data.queue,
        executor: data.executor,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * List task instances (batch)
   * List task instances from all DAGs and DAG runs.
   * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL length limits.
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TaskInstanceCollection Success.
   * @throws ApiError
   */
  public static getTaskInstancesBatch(
    data: GetTaskInstancesBatchData
  ): CancelablePromise<GetTaskInstancesBatchResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/dags/~/dagRuns/~/taskInstances/list",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * get taskinstance try
   * Get details of a task instance try.
   *
   * *New in version 2.10.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.taskTryNumber The task try number.
   * @returns TaskInstance Success.
   * @throws ApiError
   */
  public static getTaskInstanceTryDetails(
    data: GetTaskInstanceTryDetailsData
  ): CancelablePromise<GetTaskInstanceTryDetailsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/tries/{task_try_number}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
        task_try_number: data.taskTryNumber,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * List task instance tries
   * Get details of all task instance tries.
   *
   * *New in version 2.10.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns TaskInstanceCollection Success.
   * @throws ApiError
   */
  public static getTaskInstanceTries(
    data: GetTaskInstanceTriesData
  ): CancelablePromise<GetTaskInstanceTriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/tries",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * List mapped task instance tries
   * Get details of all task instance tries.
   *
   * *New in version 2.10.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.mapIndex The map index.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns TaskInstanceCollection Success.
   * @throws ApiError
   */
  public static getMappedTaskInstanceTries(
    data: GetMappedTaskInstanceTriesData
  ): CancelablePromise<GetMappedTaskInstanceTriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/tries",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
        map_index: data.mapIndex,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * get mapped taskinstance try
   * Get details of a mapped task instance try.
   *
   * *New in version 2.10.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.mapIndex The map index.
   * @param data.taskTryNumber The task try number.
   * @returns TaskInstance Success.
   * @throws ApiError
   */
  public static getMappedTaskInstanceTryDetails(
    data: GetMappedTaskInstanceTryDetailsData
  ): CancelablePromise<GetMappedTaskInstanceTryDetailsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/{map_index}/tries/{task_try_number}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
        map_index: data.mapIndex,
        task_try_number: data.taskTryNumber,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * List extra links
   * List extra links for task instance.
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @returns ExtraLinkCollection Success.
   * @throws ApiError
   */
  public static getExtraLinks(
    data: GetExtraLinksData
  ): CancelablePromise<GetExtraLinksResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/links",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get logs
   * Get logs for a specific task instance and its try number.
   * To get log from specific character position, following way of using
   * URLSafeSerializer can be used.
   *
   * Example:
   * ```
   * from itsdangerous.url_safe import URLSafeSerializer
   *
   * request_url = f"api/v1/dags/{DAG_ID}/dagRuns/{RUN_ID}/taskInstances/{TASK_ID}/logs/1"
   * key = app.config["SECRET_KEY"]
   * serializer = URLSafeSerializer(key)
   * token = serializer.dumps({"log_pos": 10000})
   *
   * response = self.client.get(
   * request_url,
   * query_string={"token": token},
   * headers={"Accept": "text/plain"},
   * environ_overrides={"REMOTE_USER": "test"},
   * )
   * continuation_token = response.json["continuation_token"]
   * metadata = URLSafeSerializer(key).loads(continuation_token)
   * log_pos = metadata["log_pos"]
   * end_of_log = metadata["end_of_log"]
   * ```
   * If log_pos is passed as 10000 like the above example, it renders the logs starting
   * from char position 10000 to last (not the end as the logs may be tailing behind in
   * running state). This way pagination can be done with metadata as part of the token.
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.taskTryNumber The task try number.
   * @param data.fullContent A full content will be returned.
   * By default, only the first fragment will be returned.
   *
   * @param data.mapIndex Filter on map index for mapped task.
   * @param data.token A token that allows you to continue fetching logs.
   * If passed, it will specify the location from which the download should be continued.
   *
   * @returns unknown Success.
   * @throws ApiError
   */
  public static getLog(data: GetLogData): CancelablePromise<GetLogResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/logs/{task_try_number}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
        task_try_number: data.taskTryNumber,
      },
      query: {
        full_content: data.fullContent,
        map_index: data.mapIndex,
        token: data.token,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class DagRunService {
  /**
   * List DAG runs
   * This endpoint allows specifying `~` as the dag_id to retrieve DAG runs for all DAGs.
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.executionDateGte Returns objects greater or equal to the specified date.
   *
   * This can be combined with execution_date_lte parameter to receive only the selected period.
   *
   * @param data.executionDateLte Returns objects less than or equal to the specified date.
   *
   * This can be combined with execution_date_gte parameter to receive only the selected period.
   *
   * @param data.startDateGte Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   * @param data.startDateLte Returns objects less or equal the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   * @param data.endDateGte Returns objects greater or equal the specified date.
   *
   * This can be combined with start_date_lte parameter to receive only the selected period.
   *
   * @param data.endDateLte Returns objects less than or equal to the specified date.
   *
   * This can be combined with start_date_gte parameter to receive only the selected period.
   *
   * @param data.updatedAtGte Returns objects greater or equal the specified date.
   *
   * This can be combined with updated_at_lte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   * @param data.updatedAtLte Returns objects less or equal the specified date.
   *
   * This can be combined with updated_at_gte parameter to receive only the selected period.
   *
   * *New in version 2.6.0*
   *
   * @param data.state The value can be repeated to retrieve multiple matching values (OR condition).
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @param data.fields List of field for return.
   *
   * @returns DAGRunCollection List of DAG runs.
   * @throws ApiError
   */
  public static getDagRuns(
    data: GetDagRunsData
  ): CancelablePromise<GetDagRunsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns",
      path: {
        dag_id: data.dagId,
      },
      query: {
        limit: data.limit,
        offset: data.offset,
        execution_date_gte: data.executionDateGte,
        execution_date_lte: data.executionDateLte,
        start_date_gte: data.startDateGte,
        start_date_lte: data.startDateLte,
        end_date_gte: data.endDateGte,
        end_date_lte: data.endDateLte,
        updated_at_gte: data.updatedAtGte,
        updated_at_lte: data.updatedAtLte,
        state: data.state,
        order_by: data.orderBy,
        fields: data.fields,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
      },
    });
  }

  /**
   * Trigger a new DAG run.
   * This will initiate a dagrun. If DAG is paused then dagrun state will remain queued, and the task won't run.
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.dagId The DAG ID.
   * @returns DAGRun Success.
   * @throws ApiError
   */
  public static postDagRun(
    data: PostDagRunData
  ): CancelablePromise<PostDagRunResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/dags/{dag_id}/dagRuns",
      path: {
        dag_id: data.dagId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
        409: "An existing resource conflicts with the request.",
      },
    });
  }

  /**
   * List DAG runs (batch)
   * This endpoint is a POST to allow filtering across a large number of DAG IDs, where as a GET it would run in to maximum HTTP request URL length limit.
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DAGRunCollection Success.
   * @throws ApiError
   */
  public static getDagRunsBatch(
    data: GetDagRunsBatchData
  ): CancelablePromise<GetDagRunsBatchResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/dags/~/dagRuns/list",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Get a DAG run
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.fields List of field for return.
   *
   * @returns DAGRun Success.
   * @throws ApiError
   */
  public static getDagRun(
    data: GetDagRunData
  ): CancelablePromise<GetDagRunResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
      },
      query: {
        fields: data.fields,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Delete a DAG run
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @returns void Success.
   * @throws ApiError
   */
  public static deleteDagRun(
    data: DeleteDagRunData
  ): CancelablePromise<DeleteDagRunResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Modify a DAG run
   * Modify a DAG run.
   *
   * *New in version 2.2.0*
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @returns DAGRun Success.
   * @throws ApiError
   */
  public static updateDagRunState(
    data: UpdateDagRunStateData
  ): CancelablePromise<UpdateDagRunStateResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Clear a DAG run
   * Clear a DAG run.
   *
   * *New in version 2.4.0*
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @returns unknown Success.
   * @throws ApiError
   */
  public static clearDagRun(
    data: ClearDagRunData
  ): CancelablePromise<ClearDagRunResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/clear",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get dataset events for a DAG run
   * Get datasets for a dag run.
   *
   * *New in version 2.4.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @returns DatasetEventCollection Success.
   * @throws ApiError
   */
  public static getUpstreamDatasetEvents(
    data: GetUpstreamDatasetEventsData
  ): CancelablePromise<GetUpstreamDatasetEventsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/upstreamDatasetEvents",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Update the DagRun note.
   * Update the manual user note of a DagRun.
   *
   * *New in version 2.5.0*
   *
   * @param data The data for the request.
   * @param data.requestBody Parameters of set DagRun note.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @returns DAGRun Success.
   * @throws ApiError
   */
  public static setDagRunNote(
    data: SetDagRunNoteData
  ): CancelablePromise<SetDagRunNoteResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/setNote",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class DatasetService {
  /**
   * Get dataset events for a DAG run
   * Get datasets for a dag run.
   *
   * *New in version 2.4.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @returns DatasetEventCollection Success.
   * @throws ApiError
   */
  public static getUpstreamDatasetEvents(
    data: GetUpstreamDatasetEventsData
  ): CancelablePromise<GetUpstreamDatasetEventsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/upstreamDatasetEvents",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get a queued Dataset event for a DAG
   * Get a queued Dataset event for a DAG.
   *
   * *New in version 2.9.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.uri The encoded Dataset URI
   * @param data.before Timestamp to select event logs occurring before.
   * @returns QueuedEvent Success.
   * @throws ApiError
   */
  public static getDagDatasetQueuedEvent(
    data: GetDagDatasetQueuedEventData
  ): CancelablePromise<GetDagDatasetQueuedEventResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/datasets/queuedEvent/{uri}",
      path: {
        dag_id: data.dagId,
        uri: data.uri,
      },
      query: {
        before: data.before,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Delete a queued Dataset event for a DAG.
   * Delete a queued Dataset event for a DAG.
   *
   * *New in version 2.9.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.uri The encoded Dataset URI
   * @param data.before Timestamp to select event logs occurring before.
   * @returns void Success.
   * @throws ApiError
   */
  public static deleteDagDatasetQueuedEvent(
    data: DeleteDagDatasetQueuedEventData
  ): CancelablePromise<DeleteDagDatasetQueuedEventResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/dags/{dag_id}/datasets/queuedEvent/{uri}",
      path: {
        dag_id: data.dagId,
        uri: data.uri,
      },
      query: {
        before: data.before,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get queued Dataset events for a DAG.
   * Get queued Dataset events for a DAG.
   *
   * *New in version 2.9.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.before Timestamp to select event logs occurring before.
   * @returns QueuedEventCollection Success.
   * @throws ApiError
   */
  public static getDagDatasetQueuedEvents(
    data: GetDagDatasetQueuedEventsData
  ): CancelablePromise<GetDagDatasetQueuedEventsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/datasets/queuedEvent",
      path: {
        dag_id: data.dagId,
      },
      query: {
        before: data.before,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Delete queued Dataset events for a DAG.
   * Delete queued Dataset events for a DAG.
   *
   * *New in version 2.9.0*
   *
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.before Timestamp to select event logs occurring before.
   * @returns void Success.
   * @throws ApiError
   */
  public static deleteDagDatasetQueuedEvents(
    data: DeleteDagDatasetQueuedEventsData
  ): CancelablePromise<DeleteDagDatasetQueuedEventsResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/dags/{dag_id}/datasets/queuedEvent",
      path: {
        dag_id: data.dagId,
      },
      query: {
        before: data.before,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get queued Dataset events for a Dataset.
   * Get queued Dataset events for a Dataset
   *
   * *New in version 2.9.0*
   *
   * @param data The data for the request.
   * @param data.uri The encoded Dataset URI
   * @param data.before Timestamp to select event logs occurring before.
   * @returns QueuedEventCollection Success.
   * @throws ApiError
   */
  public static getDatasetQueuedEvents(
    data: GetDatasetQueuedEventsData
  ): CancelablePromise<GetDatasetQueuedEventsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/datasets/queuedEvent/{uri}",
      path: {
        uri: data.uri,
      },
      query: {
        before: data.before,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Delete queued Dataset events for a Dataset.
   * Delete queued Dataset events for a Dataset.
   *
   * *New in version 2.9.0*
   *
   * @param data The data for the request.
   * @param data.uri The encoded Dataset URI
   * @param data.before Timestamp to select event logs occurring before.
   * @returns void Success.
   * @throws ApiError
   */
  public static deleteDatasetQueuedEvents(
    data: DeleteDatasetQueuedEventsData
  ): CancelablePromise<DeleteDatasetQueuedEventsResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/datasets/queuedEvent/{uri}",
      path: {
        uri: data.uri,
      },
      query: {
        before: data.before,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * List datasets
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @param data.uriPattern If set, only return datasets with uris matching this pattern.
   *
   * @param data.dagIds One or more DAG IDs separated by commas to filter datasets by associated DAGs either consuming or producing.
   *
   * *New in version 2.9.0*
   *
   * @returns DatasetCollection Success.
   * @throws ApiError
   */
  public static getDatasets(
    data: GetDatasetsData = {}
  ): CancelablePromise<GetDatasetsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/datasets",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
        uri_pattern: data.uriPattern,
        dag_ids: data.dagIds,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Get a dataset
   * Get a dataset by uri.
   * @param data The data for the request.
   * @param data.uri The encoded Dataset URI
   * @returns Dataset Success.
   * @throws ApiError
   */
  public static getDataset(
    data: GetDatasetData
  ): CancelablePromise<GetDatasetResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/datasets/{uri}",
      path: {
        uri: data.uri,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get dataset events
   * Get dataset events
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @param data.datasetId The Dataset ID that updated the dataset.
   * @param data.sourceDagId The DAG ID that updated the dataset.
   * @param data.sourceTaskId The task ID that updated the dataset.
   * @param data.sourceRunId The DAG run ID that updated the dataset.
   * @param data.sourceMapIndex The map index that updated the dataset.
   * @returns DatasetEventCollection Success.
   * @throws ApiError
   */
  public static getDatasetEvents(
    data: GetDatasetEventsData = {}
  ): CancelablePromise<GetDatasetEventsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/datasets/events",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
        dataset_id: data.datasetId,
        source_dag_id: data.sourceDagId,
        source_task_id: data.sourceTaskId,
        source_run_id: data.sourceRunId,
        source_map_index: data.sourceMapIndex,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Create dataset event
   * Create dataset event
   * @param data The data for the request.
   * @param data.requestBody
   * @returns DatasetEvent Success.
   * @throws ApiError
   */
  public static createDatasetEvent(
    data: CreateDatasetEventData
  ): CancelablePromise<CreateDatasetEventResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/datasets/events",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class EventLogService {
  /**
   * List log entries
   * List log entries from event log.
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @param data.dagId Returns objects matched by the DAG ID.
   * @param data.taskId Returns objects matched by the Task ID.
   * @param data.runId Returns objects matched by the Run ID.
   * @param data.mapIndex Filter on map index for mapped task.
   * @param data.tryNumber Filter on try_number for task instance.
   * @param data.event The name of event log.
   * @param data.owner The owner's name of event log.
   * @param data.before Timestamp to select event logs occurring before.
   * @param data.after Timestamp to select event logs occurring after.
   * @param data.includedEvents One or more event names separated by commas. If set, only return event logs with events matching this pattern.
   * *New in version 2.9.0*
   *
   * @param data.excludedEvents One or more event names separated by commas. If set, only return event logs with events that do not match this pattern.
   * *New in version 2.9.0*
   *
   * @returns EventLogCollection Success.
   * @throws ApiError
   */
  public static getEventLogs(
    data: GetEventLogsData = {}
  ): CancelablePromise<GetEventLogsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/eventLogs",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
        dag_id: data.dagId,
        task_id: data.taskId,
        run_id: data.runId,
        map_index: data.mapIndex,
        try_number: data.tryNumber,
        event: data.event,
        owner: data.owner,
        before: data.before,
        after: data.after,
        included_events: data.includedEvents,
        excluded_events: data.excludedEvents,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Get a log entry
   * @param data The data for the request.
   * @param data.eventLogId The event log ID.
   * @returns EventLog Success.
   * @throws ApiError
   */
  public static getEventLog(
    data: GetEventLogData
  ): CancelablePromise<GetEventLogResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/eventLogs/{event_log_id}",
      path: {
        event_log_id: data.eventLogId,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class ImportErrorService {
  /**
   * List import errors
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns ImportErrorCollection Success.
   * @throws ApiError
   */
  public static getImportErrors(
    data: GetImportErrorsData = {}
  ): CancelablePromise<GetImportErrorsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/importErrors",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Get an import error
   * @param data The data for the request.
   * @param data.importErrorId The import error ID.
   * @returns ImportError Success.
   * @throws ApiError
   */
  public static getImportError(
    data: GetImportErrorData
  ): CancelablePromise<GetImportErrorResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/importErrors/{import_error_id}",
      path: {
        import_error_id: data.importErrorId,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class PoolService {
  /**
   * List pools
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns PoolCollection List of pools.
   * @throws ApiError
   */
  public static getPools(
    data: GetPoolsData = {}
  ): CancelablePromise<GetPoolsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/pools",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Create a pool
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Pool Success.
   * @throws ApiError
   */
  public static postPool(
    data: PostPoolData
  ): CancelablePromise<PostPoolResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/pools",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Get a pool
   * @param data The data for the request.
   * @param data.poolName The pool name.
   * @returns Pool Success.
   * @throws ApiError
   */
  public static getPool(data: GetPoolData): CancelablePromise<GetPoolResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/pools/{pool_name}",
      path: {
        pool_name: data.poolName,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Update a pool
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.poolName The pool name.
   * @param data.updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   * @returns Pool Success.
   * @throws ApiError
   */
  public static patchPool(
    data: PatchPoolData
  ): CancelablePromise<PatchPoolResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/pools/{pool_name}",
      path: {
        pool_name: data.poolName,
      },
      query: {
        update_mask: data.updateMask,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
        409: "An existing resource conflicts with the request.",
      },
    });
  }

  /**
   * Delete a pool
   * @param data The data for the request.
   * @param data.poolName The pool name.
   * @returns void Success.
   * @throws ApiError
   */
  public static deletePool(
    data: DeletePoolData
  ): CancelablePromise<DeletePoolResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/pools/{pool_name}",
      path: {
        pool_name: data.poolName,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class ProviderService {
  /**
   * List providers
   * Get a list of providers.
   *
   * *New in version 2.1.0*
   *
   * @returns unknown List of providers.
   * @throws ApiError
   */
  public static getProviders(): CancelablePromise<GetProvidersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/providers",
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }
}

export class VariableService {
  /**
   * List variables
   * The collection does not contain data. To get data, you must get a single entity.
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns VariableCollection Success.
   * @throws ApiError
   */
  public static getVariables(
    data: GetVariablesData = {}
  ): CancelablePromise<GetVariablesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/variables",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Create a variable
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Variable Success.
   * @throws ApiError
   */
  public static postVariables(
    data: PostVariablesData
  ): CancelablePromise<PostVariablesResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/variables",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Get a variable
   * Get a variable by key.
   * @param data The data for the request.
   * @param data.variableKey The variable Key.
   * @returns Variable Success.
   * @throws ApiError
   */
  public static getVariable(
    data: GetVariableData
  ): CancelablePromise<GetVariableResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/variables/{variable_key}",
      path: {
        variable_key: data.variableKey,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Update a variable
   * Update a variable by key.
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.variableKey The variable Key.
   * @param data.updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   * @returns Variable Success.
   * @throws ApiError
   */
  public static patchVariable(
    data: PatchVariableData
  ): CancelablePromise<PatchVariableResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/variables/{variable_key}",
      path: {
        variable_key: data.variableKey,
      },
      query: {
        update_mask: data.updateMask,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Delete a variable
   * @param data The data for the request.
   * @param data.variableKey The variable Key.
   * @returns void Success.
   * @throws ApiError
   */
  public static deleteVariable(
    data: DeleteVariableData
  ): CancelablePromise<DeleteVariableResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/variables/{variable_key}",
      path: {
        variable_key: data.variableKey,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class XcomService {
  /**
   * List XCom entries
   * This endpoint allows specifying `~` as the dag_id, dag_run_id, task_id to retrieve XCOM entries for for all DAGs, DAG runs and task instances. XCom values won't be returned as they can be large. Use this endpoint to get a list of XCom entries and then fetch individual entry to get value.
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.mapIndex Filter on map index for mapped task.
   * @param data.xcomKey Only filter the XCom records which have the provided key.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @returns XComCollection Success.
   * @throws ApiError
   */
  public static getXcomEntries(
    data: GetXcomEntriesData
  ): CancelablePromise<GetXcomEntriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
      },
      query: {
        map_index: data.mapIndex,
        xcom_key: data.xcomKey,
        limit: data.limit,
        offset: data.offset,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * Get an XCom entry
   * @param data The data for the request.
   * @param data.dagId The DAG ID.
   * @param data.dagRunId The DAG run ID.
   * @param data.taskId The task ID.
   * @param data.xcomKey The XCom key.
   * @param data.mapIndex Filter on map index for mapped task.
   * @param data.deserialize Whether to deserialize an XCom value when using a custom XCom backend.
   *
   * The XCom API endpoint calls `orm_deserialize_value` by default since an XCom may contain value
   * that is potentially expensive to deserialize in the web server. Setting this to true overrides
   * the consideration, and calls `deserialize_value` instead.
   *
   * This parameter is not meaningful when using the default XCom backend.
   *
   * *New in version 2.4.0*
   *
   * @param data.stringify Whether to convert the XCom value to be a string. XCom values can be of Any data type.
   *
   * If set to true (default) the Any value will be returned as string, e.g. a Python representation
   * of a dict. If set to false it will return the raw data as dict, list, string or whatever was stored.
   *
   * *New in version 2.10.0*
   *
   * @returns XCom Success.
   * @throws ApiError
   */
  public static getXcomEntry(
    data: GetXcomEntryData
  ): CancelablePromise<GetXcomEntryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}",
      path: {
        dag_id: data.dagId,
        dag_run_id: data.dagRunId,
        task_id: data.taskId,
        xcom_key: data.xcomKey,
      },
      query: {
        map_index: data.mapIndex,
        deserialize: data.deserialize,
        stringify: data.stringify,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class DagStatsService {
  /**
   * List Dag statistics
   * @param data The data for the request.
   * @param data.dagIds One or more DAG IDs separated by commas to filter relevant Dags.
   *
   * @returns DagStatsCollectionSchema Success.
   * @throws ApiError
   */
  public static getDagStats(
    data: GetDagStatsData
  ): CancelablePromise<GetDagStatsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dagStats",
      query: {
        dag_ids: data.dagIds,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }
}

export class DagWarningService {
  /**
   * List dag warnings
   * @param data The data for the request.
   * @param data.dagId If set, only return DAG warnings with this dag_id.
   * @param data.warningType If set, only return DAG warnings with this type.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns DagWarningCollection Success.
   * @throws ApiError
   */
  public static getDagWarnings(
    data: GetDagWarningsData = {}
  ): CancelablePromise<GetDagWarningsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/dagWarnings",
      query: {
        dag_id: data.dagId,
        warning_type: data.warningType,
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }
}

export class ConfigService {
  /**
   * Get current configuration
   * @param data The data for the request.
   * @param data.section If given, only return config of this section.
   * @returns Config Success.
   * @throws ApiError
   */
  public static getConfig(
    data: GetConfigData = {}
  ): CancelablePromise<GetConfigResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/config",
      query: {
        section: data.section,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * Get a option from configuration
   * @param data The data for the request.
   * @param data.section
   * @param data.option
   * @returns Config Success.
   * @throws ApiError
   */
  public static getValue(
    data: GetValueData
  ): CancelablePromise<GetValueResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/config/section/{section}/option/{option}",
      path: {
        section: data.section,
        option: data.option,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class MonitoringService {
  /**
   * Get instance status
   * Get the status of Airflow's metadatabase, triggerer and scheduler. It includes info about
   * metadatabase and last heartbeat of scheduler and triggerer.
   *
   * @returns HealthInfo Success.
   * @throws ApiError
   */
  public static getHealth(): CancelablePromise<GetHealthResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/health",
    });
  }

  /**
   * Get version information
   * @returns VersionInfo Success.
   * @throws ApiError
   */
  public static getVersion(): CancelablePromise<GetVersionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/version",
    });
  }
}

export class PluginService {
  /**
   * Get a list of loaded plugins
   * Get a list of loaded plugins.
   *
   * *New in version 2.1.0*
   *
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @returns PluginCollection Success
   * @throws ApiError
   */
  public static getPlugins(
    data: GetPluginsData = {}
  ): CancelablePromise<GetPluginsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/plugins",
      query: {
        limit: data.limit,
        offset: data.offset,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class RoleService {
  /**
   * @deprecated
   * List roles
   * Get a list of roles.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns RoleCollection Success.
   * @throws ApiError
   */
  public static getRoles(
    data: GetRolesData = {}
  ): CancelablePromise<GetRolesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/roles",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * @deprecated
   * Create a role
   * Create a new role.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Role Success.
   * @throws ApiError
   */
  public static postRole(
    data: PostRoleData
  ): CancelablePromise<PostRoleResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/roles",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * @deprecated
   * Get a role
   * Get a role.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.roleName The role name
   * @returns Role Success.
   * @throws ApiError
   */
  public static getRole(data: GetRoleData): CancelablePromise<GetRoleResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/roles/{role_name}",
      path: {
        role_name: data.roleName,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * @deprecated
   * Update a role
   * Update a role.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.roleName The role name
   * @param data.updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   * @returns Role Success.
   * @throws ApiError
   */
  public static patchRole(
    data: PatchRoleData
  ): CancelablePromise<PatchRoleResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/roles/{role_name}",
      path: {
        role_name: data.roleName,
      },
      query: {
        update_mask: data.updateMask,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * @deprecated
   * Delete a role
   * Delete a role.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.roleName The role name
   * @returns void Success.
   * @throws ApiError
   */
  public static deleteRole(
    data: DeleteRoleData
  ): CancelablePromise<DeleteRoleResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/roles/{role_name}",
      path: {
        role_name: data.roleName,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}

export class PermissionService {
  /**
   * @deprecated
   * List permissions
   * Get a list of permissions.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @returns ActionCollection Success.
   * @throws ApiError
   */
  public static getPermissions(
    data: GetPermissionsData = {}
  ): CancelablePromise<GetPermissionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/permissions",
      query: {
        limit: data.limit,
        offset: data.offset,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }
}

export class UserService {
  /**
   * @deprecated
   * List users
   * Get a list of users.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.limit The numbers of items to return.
   * @param data.offset The number of items to skip before starting to collect the result set.
   * @param data.orderBy The name of the field to order the results by.
   * Prefix a field name with `-` to reverse the sort order.
   *
   * *New in version 2.1.0*
   *
   * @returns UserCollection Success.
   * @throws ApiError
   */
  public static getUsers(
    data: GetUsersData = {}
  ): CancelablePromise<GetUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users",
      query: {
        limit: data.limit,
        offset: data.offset,
        order_by: data.orderBy,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
      },
    });
  }

  /**
   * @deprecated
   * Create a user
   * Create a new user with unique username and email.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @returns User Success.
   * @throws ApiError
   */
  public static postUser(
    data: PostUserData
  ): CancelablePromise<PostUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/users",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        409: "An existing resource conflicts with the request.",
      },
    });
  }

  /**
   * @deprecated
   * Get a user
   * Get a user with a specific username.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.username The username of the user.
   *
   * *New in version 2.1.0*
   *
   * @returns UserCollectionItem Success.
   * @throws ApiError
   */
  public static getUser(data: GetUserData): CancelablePromise<GetUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/{username}",
      path: {
        username: data.username,
      },
      errors: {
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * @deprecated
   * Update a user
   * Update fields for a user.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.requestBody
   * @param data.username The username of the user.
   *
   * *New in version 2.1.0*
   *
   * @param data.updateMask The fields to update on the resource. If absent or empty, all modifiable fields are updated.
   * A comma-separated list of fully qualified names of fields.
   *
   * @returns UserCollectionItem Success.
   * @throws ApiError
   */
  public static patchUser(
    data: PatchUserData
  ): CancelablePromise<PatchUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/users/{username}",
      path: {
        username: data.username,
      },
      query: {
        update_mask: data.updateMask,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }

  /**
   * @deprecated
   * Delete a user
   * Delete a user with a specific username.
   *
   * *This API endpoint is deprecated, please use the endpoint `/auth/fab/v1` for this operation instead.*
   *
   * @param data The data for the request.
   * @param data.username The username of the user.
   *
   * *New in version 2.1.0*
   *
   * @returns void Success.
   * @throws ApiError
   */
  public static deleteUser(
    data: DeleteUserData
  ): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/users/{username}",
      path: {
        username: data.username,
      },
      errors: {
        400: "Client specified an invalid argument.",
        401: "Request not authenticated due to missing, invalid, authentication info.",
        403: "Client does not have sufficient permission.",
        404: "A specified resource is not found.",
      },
    });
  }
}
