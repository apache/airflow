// This file is auto-generated by @hey-api/openapi-ts

export const $UserCollectionItem = {
  description: `A user object.

*New in version 2.1.0*
`,
  type: "object",
  properties: {
    first_name: {
      type: "string",
      description: `The user's first name.

*Changed in version 2.4.0*&#58; The requirement for this to be non-empty was removed.
`,
    },
    last_name: {
      type: "string",
      description: `The user's last name.

*Changed in version 2.4.0*&#58; The requirement for this to be non-empty was removed.
`,
    },
    username: {
      type: "string",
      description: `The username.

*Changed in version 2.2.0*&#58; A minimum character length requirement ('minLength') is added.
`,
      minLength: 1,
    },
    email: {
      type: "string",
      description: `The user's email.

*Changed in version 2.2.0*&#58; A minimum character length requirement ('minLength') is added.
`,
      minLength: 1,
    },
    active: {
      type: "boolean",
      description: "Whether the user is active",
      readOnly: true,
      nullable: true,
    },
    last_login: {
      type: "string",
      format: "datetime",
      description: "The last user login",
      readOnly: true,
      nullable: true,
    },
    login_count: {
      type: "integer",
      description: "The login count",
      readOnly: true,
      nullable: true,
    },
    failed_login_count: {
      type: "integer",
      description: "The number of times the login failed",
      readOnly: true,
      nullable: true,
    },
    roles: {
      type: "array",
      description: `User roles.

*Changed in version 2.2.0*&#58; Field is no longer read-only.
`,
      items: {
        type: "object",
        properties: {
          name: {
            type: "string",
          },
        },
        nullable: true,
      },
    },
    created_on: {
      type: "string",
      format: "datetime",
      description: "The date user was created",
      readOnly: true,
      nullable: true,
    },
    changed_on: {
      type: "string",
      format: "datetime",
      description: "The date user was changed",
      readOnly: true,
      nullable: true,
    },
  },
} as const;

export const $User = {
  type: "object",
  description: `A user object with sensitive data.

*New in version 2.1.0*
`,
  allOf: [
    {
      $ref: "#/components/schemas/UserCollectionItem",
    },
    {
      type: "object",
      properties: {
        password: {
          type: "string",
          writeOnly: true,
        },
      },
    },
  ],
} as const;

export const $UserCollection = {
  type: "object",
  description: `Collection of users.

*New in version 2.1.0*
`,
  allOf: [
    {
      type: "object",
      properties: {
        users: {
          type: "array",
          items: {
            $ref: "#/components/schemas/UserCollectionItem",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $ConnectionCollectionItem = {
  description: `Connection collection item.
The password and extra fields are only available when retrieving a single object due to the sensitivity of this data.
`,
  type: "object",
  properties: {
    connection_id: {
      type: "string",
      description: "The connection ID.",
    },
    conn_type: {
      type: "string",
      description: "The connection type.",
    },
    description: {
      type: "string",
      description: "The description of the connection.",
      nullable: true,
    },
    host: {
      type: "string",
      nullable: true,
      description: "Host of the connection.",
    },
    login: {
      type: "string",
      nullable: true,
      description: "Login of the connection.",
    },
    schema: {
      type: "string",
      nullable: true,
      description: "Schema of the connection.",
    },
    port: {
      type: "integer",
      nullable: true,
      description: "Port of the connection.",
    },
  },
} as const;

export const $ConnectionCollection = {
  type: "object",
  description: `Collection of connections.

*Changed in version 2.1.0*&#58; 'total_entries' field is added.
`,
  allOf: [
    {
      type: "object",
      properties: {
        connections: {
          type: "array",
          items: {
            $ref: "#/components/schemas/ConnectionCollectionItem",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $Connection = {
  description: "Full representation of the connection.",
  allOf: [
    {
      $ref: "#/components/schemas/ConnectionCollectionItem",
    },
    {
      type: "object",
      properties: {
        password: {
          type: "string",
          format: "password",
          writeOnly: true,
          description: "Password of the connection.",
        },
        extra: {
          type: "string",
          nullable: true,
          description:
            "Other values that cannot be put into another field, e.g. RSA keys.",
        },
      },
    },
  ],
} as const;

export const $ConnectionTest = {
  description: `Connection test results.

*New in version 2.2.0*
`,
  type: "object",
  properties: {
    status: {
      type: "boolean",
      description: "The status of the request.",
    },
    message: {
      type: "string",
      description: "The success or failure message of the request.",
    },
  },
} as const;

export const $DAG = {
  type: "object",
  description: "DAG",
  properties: {
    dag_id: {
      type: "string",
      readOnly: true,
      description: "The ID of the DAG.",
    },
    dag_display_name: {
      type: "string",
      readOnly: true,
      description: `Human centric display text for the DAG.

*New in version 2.9.0*
`,
    },
    is_paused: {
      type: "boolean",
      nullable: true,
      description: "Whether the DAG is paused.",
    },
    is_active: {
      description: `Whether the DAG is currently seen by the scheduler(s).

*New in version 2.1.1*

*Changed in version 2.2.0*&#58; Field is read-only.
`,
      nullable: true,
      readOnly: true,
      type: "boolean",
    },
    last_parsed_time: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
      description: `The last time the DAG was parsed.

*New in version 2.3.0*
`,
    },
    last_pickled: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
      description: `The last time the DAG was pickled.

*New in version 2.3.0*
`,
    },
    last_expired: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
      description: `Time when the DAG last received a refresh signal
(e.g. the DAG's "refresh" button was clicked in the web UI)

*New in version 2.3.0*
`,
    },
    scheduler_lock: {
      type: "boolean",
      readOnly: true,
      nullable: true,
      description: `Whether (one of) the scheduler is scheduling this DAG at the moment

*New in version 2.3.0*
`,
    },
    pickle_id: {
      type: "string",
      readOnly: true,
      nullable: true,
      description: `Foreign key to the latest pickle_id

*New in version 2.3.0*
`,
    },
    default_view: {
      type: "string",
      nullable: true,
      readOnly: true,
      description: `Default view of the DAG inside the webserver

*New in version 2.3.0*
`,
    },
    fileloc: {
      description: "The absolute path to the file.",
      type: "string",
      readOnly: true,
    },
    file_token: {
      type: "string",
      readOnly: true,
      description: `The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change.
`,
    },
    owners: {
      type: "array",
      items: {
        type: "string",
      },
      readOnly: true,
    },
    description: {
      type: "string",
      readOnly: true,
      nullable: true,
      description: `User-provided DAG description, which can consist of several sentences or paragraphs that describe DAG contents.
`,
    },
    timetable_summary: {
      type: "string",
      readOnly: true,
      nullable: true,
      description: `Timetable summary.

*New in version 3.0.0*
`,
    },
    timetable_description: {
      type: "string",
      readOnly: true,
      nullable: true,
      description: `Timetable description.

*New in version 2.3.0*
`,
    },
    tags: {
      description: "List of tags.",
      type: "array",
      nullable: true,
      items: {
        $ref: "#/components/schemas/Tag",
      },
      readOnly: true,
    },
    max_active_tasks: {
      type: "integer",
      nullable: true,
      readOnly: true,
      description: `Maximum number of active tasks that can be run on the DAG

*New in version 2.3.0*
`,
    },
    max_active_runs: {
      type: "integer",
      nullable: true,
      readOnly: true,
      description: `Maximum number of active DAG runs for the DAG

*New in version 2.3.0*
`,
    },
    has_task_concurrency_limits: {
      type: "boolean",
      nullable: true,
      readOnly: true,
      description: `Whether the DAG has task concurrency limits

*New in version 2.3.0*
`,
    },
    has_import_errors: {
      type: "boolean",
      nullable: true,
      readOnly: true,
      description: `Whether the DAG has import errors

*New in version 2.3.0*
`,
    },
    next_dagrun: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
      description: `The logical date of the next dag run.

*New in version 2.3.0*
`,
    },
    next_dagrun_data_interval_start: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
      description: `The start of the interval of the next dag run.

*New in version 2.3.0*
`,
    },
    next_dagrun_data_interval_end: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
      description: `The end of the interval of the next dag run.

*New in version 2.3.0*
`,
    },
    next_dagrun_create_after: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
      description: `Earliest time at which this \`\`next_dagrun\`\` can be created.

*New in version 2.3.0*
`,
    },
    max_consecutive_failed_dag_runs: {
      type: "integer",
      nullable: true,
      readOnly: true,
      description: `(experimental) The maximum number of consecutive DAG failures before DAG is automatically paused.

*New in version 2.9.0*
`,
    },
  },
} as const;

export const $DAGCollection = {
  description: `Collection of DAGs.

*Changed in version 2.1.0*&#58; 'total_entries' field is added.
`,
  type: "object",
  allOf: [
    {
      type: "object",
      properties: {
        dags: {
          type: "array",
          items: {
            $ref: "#/components/schemas/DAG",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $DAGRun = {
  type: "object",
  properties: {
    dag_run_id: {
      type: "string",
      nullable: true,
      description: `Run ID.

The value of this field can be set only when creating the object. If you try to modify the
field of an existing object, the request fails with an BAD_REQUEST error.

If not provided, a value will be generated based on execution_date.

If the specified dag_run_id is in use, the creation request fails with an ALREADY_EXISTS error.

This together with DAG_ID are a unique key.
`,
    },
    dag_id: {
      type: "string",
      readOnly: true,
    },
    logical_date: {
      type: "string",
      nullable: true,
      description: `The logical date (previously called execution date). This is the time or interval covered by
this DAG run, according to the DAG definition.

The value of this field can be set only when creating the object. If you try to modify the
field of an existing object, the request fails with an BAD_REQUEST error.

This together with DAG_ID are a unique key.

*New in version 2.2.0*
`,
      format: "date-time",
    },
    execution_date: {
      type: "string",
      nullable: true,
      description: `The execution date. This is the same as logical_date, kept for backwards compatibility.
If both this field and logical_date are provided but with different values, the request
will fail with an BAD_REQUEST error.

*Changed in version 2.2.0*&#58; Field becomes nullable.

*Deprecated since version 2.2.0*&#58; Use 'logical_date' instead.
`,
      format: "date-time",
      deprecated: true,
    },
    start_date: {
      type: "string",
      format: "date-time",
      description: `The start time. The time when DAG run was actually created.

*Changed in version 2.1.3*&#58; Field becomes nullable.
`,
      readOnly: true,
      nullable: true,
    },
    end_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
    },
    data_interval_start: {
      type: "string",
      format: "date-time",
      description: `The beginning of the interval the DAG run covers.
`,
      nullable: true,
    },
    data_interval_end: {
      type: "string",
      format: "date-time",
      description: `The end of the interval the DAG run covers.
`,
      nullable: true,
    },
    last_scheduling_decision: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
    },
    run_type: {
      type: "string",
      readOnly: true,
      enum: ["backfill", "manual", "scheduled", "dataset_triggered"],
    },
    state: {
      $ref: "#/components/schemas/DagState",
    },
    external_trigger: {
      type: "boolean",
      readOnly: true,
    },
    conf: {
      type: "object",
      description: `JSON object describing additional configuration parameters.

The value of this field can be set only when creating the object. If you try to modify the
field of an existing object, the request fails with an BAD_REQUEST error.
`,
    },
    note: {
      type: "string",
      description: `Contains manually entered notes by the user about the DagRun.

*New in version 2.5.0*
`,
      nullable: true,
    },
  },
} as const;

export const $UpdateDagRunState = {
  type: "object",
  description: `Modify the state of a DAG run.

*New in version 2.2.0*
`,
  properties: {
    state: {
      description: "The state to set this DagRun",
      type: "string",
      enum: ["success", "failed", "queued"],
    },
  },
} as const;

export const $DAGRunCollection = {
  type: "object",
  description: `Collection of DAG runs.

*Changed in version 2.1.0*&#58; 'total_entries' field is added.
`,
  allOf: [
    {
      type: "object",
      properties: {
        dag_runs: {
          type: "array",
          items: {
            $ref: "#/components/schemas/DAGRun",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $DagStatsCollectionSchema = {
  type: "object",
  description: `Collection of Dag statistics.
`,
  allOf: [
    {
      type: "object",
      properties: {
        dags: {
          type: "array",
          items: {
            $ref: "#/components/schemas/DagStatsCollectionItem",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $DagStatsCollectionItem = {
  description: "DagStats entry collection item.",
  type: "object",
  properties: {
    dag_id: {
      type: "string",
      description: "The DAG ID.",
    },
    stats: {
      type: "array",
      nullable: true,
      items: {
        $ref: "#/components/schemas/DagStatsStateCollectionItem",
      },
    },
  },
} as const;

export const $DagStatsStateCollectionItem = {
  description: "DagStatsState entry collection item.",
  type: "object",
  properties: {
    state: {
      type: "string",
      description: "The DAG state.",
    },
    count: {
      type: "integer",
      description: "The DAG state count.",
    },
  },
} as const;

export const $DagWarning = {
  type: "object",
  properties: {
    dag_id: {
      type: "string",
      readOnly: true,
      description: "The dag_id.",
    },
    warning_type: {
      type: "string",
      readOnly: true,
      description: "The warning type for the dag warning.",
    },
    message: {
      type: "string",
      readOnly: true,
      description: "The message for the dag warning.",
    },
    timestamp: {
      type: "string",
      format: "datetime",
      readOnly: true,
      description: "The time when this warning was logged.",
    },
  },
} as const;

export const $DagWarningCollection = {
  type: "object",
  description: `Collection of DAG warnings.
`,
  allOf: [
    {
      type: "object",
      properties: {
        import_errors: {
          type: "array",
          items: {
            $ref: "#/components/schemas/DagWarning",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $SetDagRunNote = {
  type: "object",
  properties: {
    note: {
      description: "Custom notes left by users for this Dag Run.",
      type: "string",
    },
  },
} as const;

export const $EventLog = {
  type: "object",
  description: "Log of user operations via CLI or Web UI.",
  properties: {
    event_log_id: {
      description: "The event log ID",
      type: "integer",
      readOnly: true,
    },
    when: {
      description: "The time when these events happened.",
      format: "date-time",
      type: "string",
      readOnly: true,
    },
    dag_id: {
      description: "The DAG ID",
      type: "string",
      readOnly: true,
      nullable: true,
    },
    task_id: {
      description: "The Task ID",
      type: "string",
      readOnly: true,
      nullable: true,
    },
    run_id: {
      description: "The DAG Run ID",
      type: "string",
      readOnly: true,
      nullable: true,
    },
    map_index: {
      description: "The Map Index",
      type: "integer",
      readOnly: true,
      nullable: true,
    },
    try_number: {
      description: "The Try Number",
      type: "integer",
      readOnly: true,
      nullable: true,
    },
    event: {
      description: "A key describing the type of event.",
      type: "string",
      readOnly: true,
    },
    execution_date: {
      description: `When the event was dispatched for an object having execution_date, the value of this field.
`,
      format: "date-time",
      type: "string",
      readOnly: true,
      nullable: true,
    },
    owner: {
      description: "Name of the user who triggered these events a.",
      type: "string",
      nullable: true,
      readOnly: true,
    },
    extra: {
      description: `Other information that was not included in the other fields, e.g. the complete CLI command.
`,
      type: "string",
      readOnly: true,
      nullable: true,
    },
  },
} as const;

export const $EventLogCollection = {
  type: "object",
  description: `Collection of event logs.

*Changed in version 2.1.0*&#58; 'total_entries' field is added.
*Changed in version 2.10.0*&#58; 'try_number' and 'map_index' fields are added.
`,
  allOf: [
    {
      type: "object",
      properties: {
        event_logs: {
          type: "array",
          items: {
            $ref: "#/components/schemas/EventLog",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $ImportError = {
  type: "object",
  properties: {
    import_error_id: {
      type: "integer",
      readOnly: true,
      description: "The import error ID.",
    },
    timestamp: {
      type: "string",
      format: "datetime",
      readOnly: true,
      description: "The time when this error was created.",
    },
    filename: {
      type: "string",
      readOnly: true,
      description: "The filename",
    },
    stack_trace: {
      type: "string",
      readOnly: true,
      description: "The full stackstrace.",
    },
  },
} as const;

export const $ImportErrorCollection = {
  type: "object",
  description: `Collection of import errors.

*Changed in version 2.1.0*&#58; 'total_entries' field is added.
`,
  allOf: [
    {
      type: "object",
      properties: {
        import_errors: {
          type: "array",
          items: {
            $ref: "#/components/schemas/ImportError",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $HealthInfo = {
  type: "object",
  description: "Instance status information.",
  properties: {
    metadatabase: {
      $ref: "#/components/schemas/MetadatabaseStatus",
    },
    scheduler: {
      $ref: "#/components/schemas/SchedulerStatus",
    },
    triggerer: {
      $ref: "#/components/schemas/TriggererStatus",
    },
    dag_processor: {
      $ref: "#/components/schemas/DagProcessorStatus",
    },
  },
} as const;

export const $MetadatabaseStatus = {
  type: "object",
  description: "The status of the metadatabase.",
  properties: {
    status: {
      $ref: "#/components/schemas/HealthStatus",
    },
  },
} as const;

export const $SchedulerStatus = {
  type: "object",
  description: "The status and the latest scheduler heartbeat.",
  properties: {
    status: {
      $ref: "#/components/schemas/HealthStatus",
    },
    latest_scheduler_heartbeat: {
      description: "The time the scheduler last did a heartbeat.",
      type: "string",
      format: "datetime",
      readOnly: true,
      nullable: true,
    },
  },
} as const;

export const $TriggererStatus = {
  type: "object",
  description: `The status and the latest triggerer heartbeat.

*New in version 2.6.2*
`,
  properties: {
    status: {
      $ref: "#/components/schemas/HealthStatus",
    },
    latest_triggerer_heartbeat: {
      description: "The time the triggerer last did a heartbeat.",
      type: "string",
      format: "datetime",
      readOnly: true,
      nullable: true,
    },
  },
} as const;

export const $DagProcessorStatus = {
  type: "object",
  description: `The status and the latest dag processor heartbeat.

*New in version 2.6.3*
`,
  properties: {
    status: {
      $ref: "#/components/schemas/HealthStatus",
    },
    latest_dag_processor_heartbeat: {
      description: "The time the dag processor last did a heartbeat.",
      type: "string",
      format: "datetime",
      readOnly: true,
      nullable: true,
    },
  },
} as const;

export const $Pool = {
  description: "The pool",
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "The name of pool.",
    },
    slots: {
      type: "integer",
      description: `The maximum number of slots that can be assigned to tasks. One job may occupy one or more slots.
`,
    },
    occupied_slots: {
      type: "integer",
      readOnly: true,
      description:
        "The number of slots used by running/queued tasks at the moment. May include deferred tasks if 'include_deferred' is set to true.",
    },
    running_slots: {
      type: "integer",
      readOnly: true,
      description: "The number of slots used by running tasks at the moment.",
    },
    queued_slots: {
      type: "integer",
      readOnly: true,
      description: "The number of slots used by queued tasks at the moment.",
    },
    open_slots: {
      type: "integer",
      readOnly: true,
      description: "The number of free slots at the moment.",
    },
    scheduled_slots: {
      type: "integer",
      readOnly: true,
      description: "The number of slots used by scheduled tasks at the moment.",
    },
    deferred_slots: {
      type: "integer",
      readOnly: true,
      description: `The number of slots used by deferred tasks at the moment. Relevant if 'include_deferred' is set to true.

*New in version 2.7.0*
`,
    },
    description: {
      type: "string",
      description: `The description of the pool.

*New in version 2.3.0*
`,
      nullable: true,
    },
    include_deferred: {
      type: "boolean",
      description: `If set to true, deferred tasks are considered when calculating open pool slots.

*New in version 2.7.0*
`,
    },
  },
} as const;

export const $PoolCollection = {
  type: "object",
  description: `Collection of pools.

*Changed in version 2.1.0*&#58; 'total_entries' field is added.
`,
  allOf: [
    {
      type: "object",
      properties: {
        pools: {
          type: "array",
          items: {
            $ref: "#/components/schemas/Pool",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $Provider = {
  description: `The provider

*New in version 2.1.0*
`,
  type: "object",
  properties: {
    package_name: {
      type: "string",
      description: "The package name of the provider.",
    },
    description: {
      type: "string",
      description: "The description of the provider.",
    },
    version: {
      type: "string",
      description: "The version of the provider.",
    },
  },
} as const;

export const $ProviderCollection = {
  description: `Collection of providers.

*New in version 2.1.0*
`,
  type: "object",
  properties: {
    providers: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Provider",
      },
    },
  },
} as const;

export const $SLAMiss = {
  type: "object",
  properties: {
    task_id: {
      type: "string",
      readOnly: true,
      description: "The task ID.",
    },
    dag_id: {
      type: "string",
      description: "The DAG ID.",
    },
    execution_date: {
      type: "string",
      format: "datetime",
    },
    email_sent: {
      type: "boolean",
    },
    timestamp: {
      type: "string",
      format: "datetime",
    },
    description: {
      type: "string",
      nullable: true,
    },
    notification_sent: {
      type: "boolean",
    },
  },
  nullable: true,
} as const;

export const $Trigger = {
  type: "object",
  nullable: true,
  properties: {
    id: {
      type: "integer",
    },
    classpath: {
      type: "string",
    },
    kwargs: {
      type: "string",
    },
    created_date: {
      type: "string",
      format: "datetime",
    },
    triggerer_id: {
      type: "integer",
      nullable: true,
    },
  },
} as const;

export const $TaskFailedDependency = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
    reason: {
      type: "string",
    },
  },
} as const;

export const $TaskInstanceDependencyCollection = {
  type: "object",
  properties: {
    dependencies: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TaskFailedDependency",
      },
    },
  },
} as const;

export const $Job = {
  type: "object",
  nullable: true,
  properties: {
    id: {
      type: "integer",
    },
    dag_id: {
      type: "string",
      nullable: true,
    },
    state: {
      type: "string",
      nullable: true,
    },
    job_type: {
      type: "string",
      nullable: true,
    },
    start_date: {
      type: "string",
      format: "datetime",
      nullable: true,
    },
    end_date: {
      type: "string",
      format: "datetime",
      nullable: true,
    },
    latest_heartbeat: {
      type: "string",
      format: "datetime",
      nullable: true,
    },
    executor_class: {
      type: "string",
      nullable: true,
    },
    hostname: {
      type: "string",
      nullable: true,
    },
    unixname: {
      type: "string",
      nullable: true,
    },
  },
} as const;

export const $TaskInstance = {
  type: "object",
  properties: {
    task_id: {
      type: "string",
    },
    task_display_name: {
      type: "string",
      description: `Human centric display text for the task.

*New in version 2.9.0*
`,
    },
    dag_id: {
      type: "string",
    },
    dag_run_id: {
      type: "string",
      description: `The DagRun ID for this task instance

*New in version 2.3.0*
`,
    },
    execution_date: {
      type: "string",
      format: "datetime",
    },
    start_date: {
      type: "string",
      format: "datetime",
      nullable: true,
    },
    end_date: {
      type: "string",
      format: "datetime",
      nullable: true,
    },
    duration: {
      type: "number",
      nullable: true,
    },
    state: {
      $ref: "#/components/schemas/TaskState",
    },
    try_number: {
      type: "integer",
    },
    map_index: {
      type: "integer",
    },
    max_tries: {
      type: "integer",
    },
    hostname: {
      type: "string",
    },
    unixname: {
      type: "string",
    },
    pool: {
      type: "string",
    },
    pool_slots: {
      type: "integer",
    },
    queue: {
      type: "string",
      nullable: true,
    },
    priority_weight: {
      type: "integer",
      nullable: true,
    },
    operator: {
      type: "string",
      nullable: true,
      description: `*Changed in version 2.1.1*&#58; Field becomes nullable.
`,
    },
    queued_when: {
      type: "string",
      nullable: true,
      description: `The datetime that the task enter the state QUEUE, also known as queue_at
`,
    },
    pid: {
      type: "integer",
      nullable: true,
    },
    executor: {
      type: "string",
      nullable: true,
      description: `Executor the task is configured to run on or None (which indicates the default executor)

*New in version 2.10.0*
`,
    },
    executor_config: {
      type: "string",
    },
    sla_miss: {
      $ref: "#/components/schemas/SLAMiss",
    },
    rendered_map_index: {
      description: `Rendered name of an expanded task instance, if the task is mapped.

*New in version 2.9.0*
`,
      type: "string",
      nullable: true,
    },
    rendered_fields: {
      description: `JSON object describing rendered fields.

*New in version 2.3.0*
`,
      type: "object",
    },
    trigger: {
      $ref: "#/components/schemas/Trigger",
    },
    triggerer_job: {
      $ref: "#/components/schemas/Job",
    },
    note: {
      type: "string",
      description: `Contains manually entered notes by the user about the TaskInstance.

*New in version 2.5.0*
`,
      nullable: true,
    },
  },
} as const;

export const $TaskInstanceCollection = {
  type: "object",
  description: `Collection of task instances.

*Changed in version 2.1.0*&#58; 'total_entries' field is added.
`,
  allOf: [
    {
      type: "object",
      properties: {
        task_instances: {
          type: "array",
          items: {
            $ref: "#/components/schemas/TaskInstance",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $TaskInstanceReference = {
  type: "object",
  properties: {
    task_id: {
      type: "string",
      readOnly: true,
      description: "The task ID.",
    },
    dag_id: {
      type: "string",
      readOnly: true,
      description: "The DAG ID.",
    },
    execution_date: {
      type: "string",
      format: "datetime",
      readOnly: true,
    },
    dag_run_id: {
      type: "string",
      readOnly: true,
      description: "The DAG run ID.",
    },
  },
} as const;

export const $TaskInstanceReferenceCollection = {
  type: "object",
  properties: {
    task_instances: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TaskInstanceReference",
      },
    },
  },
} as const;

export const $VariableCollectionItem = {
  description: `XCom entry collection item.
The value field are only available when retrieving a single object due to the sensitivity of this data.`,
  type: "object",
  properties: {
    key: {
      type: "string",
    },
    description: {
      type: "string",
      description: `The description of the variable.

*New in version 2.4.0*
`,
      nullable: true,
    },
  },
} as const;

export const $VariableCollection = {
  type: "object",
  description: `Collection of variables.

*Changed in version 2.1.0*&#58; 'total_entries' field is added.
`,
  allOf: [
    {
      type: "object",
      properties: {
        variables: {
          type: "array",
          items: {
            $ref: "#/components/schemas/VariableCollectionItem",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $Variable = {
  description: "Full representation of Variable",
  allOf: [
    {
      $ref: "#/components/schemas/VariableCollectionItem",
    },
    {
      type: "object",
      properties: {
        value: {
          type: "string",
        },
      },
    },
  ],
} as const;

export const $XComCollectionItem = {
  type: "object",
  description: `XCom entry collection item.

The value field is only available when reading a single object due to the size of the value.
`,
  properties: {
    key: {
      type: "string",
    },
    timestamp: {
      type: "string",
      format: "datetime",
    },
    execution_date: {
      type: "string",
      format: "datetime",
    },
    map_index: {
      type: "integer",
    },
    task_id: {
      type: "string",
    },
    dag_id: {
      type: "string",
    },
  },
} as const;

export const $XComCollection = {
  type: "object",
  description: `Collection of XCom entries.

*Changed in version 2.1.0*&#58; 'total_entries' field is added.
`,
  allOf: [
    {
      type: "object",
      properties: {
        xcom_entries: {
          type: "array",
          items: {
            $ref: "#/components/schemas/XComCollectionItem",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $XCom = {
  description: "Full representations of XCom entry.",
  allOf: [
    {
      $ref: "#/components/schemas/XComCollectionItem",
    },
    {
      type: "object",
      properties: {
        value: {
          anyOf: [
            {
              type: "string",
            },
            {
              type: "number",
            },
            {
              type: "integer",
            },
            {
              type: "boolean",
            },
            {
              type: "array",
              items: {},
            },
            {
              type: "object",
              nullable: true,
            },
          ],
          description: "The value(s),",
        },
      },
    },
  ],
} as const;

export const $DAGDetail = {
  description: `DAG details.

For details see:
[airflow.models.dag.DAG](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/dag/index.html#airflow.models.dag.DAG)
`,
  allOf: [
    {
      $ref: "#/components/schemas/DAG",
    },
    {
      type: "object",
      properties: {
        timezone: {
          $ref: "#/components/schemas/Timezone",
          nullable: true,
        },
        catchup: {
          type: "boolean",
          readOnly: true,
          nullable: true,
        },
        orientation: {
          type: "string",
          readOnly: true,
          nullable: true,
        },
        concurrency: {
          type: "number",
          readOnly: true,
          nullable: true,
        },
        start_date: {
          type: "string",
          format: "date-time",
          readOnly: true,
          nullable: true,
          description: `The DAG's start date.

*Changed in version 2.0.1*&#58; Field becomes nullable.
`,
        },
        dag_run_timeout: {
          $ref: "#/components/schemas/TimeDelta",
          nullable: true,
        },
        dataset_expression: {
          type: "object",
          description: "Nested dataset any/all conditions",
          nullable: true,
        },
        doc_md: {
          type: "string",
          readOnly: true,
          nullable: true,
        },
        default_view: {
          type: "string",
          readOnly: true,
          nullable: true,
        },
        params: {
          type: "object",
          readOnly: true,
          description: `User-specified DAG params.

*New in version 2.0.1*
`,
        },
        end_date: {
          type: "string",
          format: "date-time",
          readOnly: true,
          nullable: true,
          description: `The DAG's end date.

*New in version 2.3.0*.
`,
        },
        is_paused_upon_creation: {
          type: "boolean",
          readOnly: true,
          nullable: true,
          description: `Whether the DAG is paused upon creation.

*New in version 2.3.0*
`,
        },
        last_parsed: {
          type: "string",
          format: "date-time",
          nullable: true,
          readOnly: true,
          description: `The last time the DAG was parsed.

*New in version 2.3.0*
`,
        },
        template_search_path: {
          type: "array",
          nullable: true,
          items: {
            type: "string",
          },
          description: `The template search path.

*New in version 2.3.0*
`,
        },
        render_template_as_native_obj: {
          type: "boolean",
          nullable: true,
          readOnly: true,
          description: `Whether to render templates as native Python objects.

*New in version 2.3.0*
`,
        },
      },
    },
  ],
} as const;

export const $ExtraLink = {
  type: "object",
  description:
    "Additional links containing additional information about the task.",
  properties: {
    class_ref: {
      $ref: "#/components/schemas/ClassReference",
    },
    name: {
      type: "string",
      readOnly: true,
    },
    href: {
      type: "string",
      readOnly: true,
    },
  },
} as const;

export const $ExtraLinkCollection = {
  type: "object",
  description: "The collection of extra links.",
  properties: {
    extra_links: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ExtraLink",
      },
    },
  },
} as const;

export const $Task = {
  type: "object",
  description: `For details see:
[airflow.models.baseoperator.BaseOperator](https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/models/baseoperator/index.html#airflow.models.baseoperator.BaseOperator)
`,
  properties: {
    class_ref: {
      $ref: "#/components/schemas/ClassReference",
    },
    task_id: {
      type: "string",
      readOnly: true,
    },
    task_display_name: {
      type: "string",
      readOnly: true,
    },
    owner: {
      type: "string",
      readOnly: true,
    },
    start_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
    },
    end_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
    },
    trigger_rule: {
      $ref: "#/components/schemas/TriggerRule",
    },
    extra_links: {
      type: "array",
      readOnly: true,
      items: {
        type: "object",
        properties: {
          class_ref: {
            $ref: "#/components/schemas/ClassReference",
          },
        },
      },
    },
    depends_on_past: {
      type: "boolean",
      readOnly: true,
    },
    is_mapped: {
      type: "boolean",
      readOnly: true,
    },
    wait_for_downstream: {
      type: "boolean",
      readOnly: true,
    },
    retries: {
      type: "number",
      readOnly: true,
    },
    queue: {
      type: "string",
      readOnly: true,
      nullable: true,
    },
    executor: {
      type: "string",
      readOnly: true,
      nullable: true,
    },
    pool: {
      type: "string",
      readOnly: true,
    },
    pool_slots: {
      type: "number",
      readOnly: true,
    },
    execution_timeout: {
      $ref: "#/components/schemas/TimeDelta",
    },
    retry_delay: {
      $ref: "#/components/schemas/TimeDelta",
    },
    retry_exponential_backoff: {
      type: "boolean",
      readOnly: true,
    },
    priority_weight: {
      type: "number",
      readOnly: true,
    },
    weight_rule: {
      $ref: "#/components/schemas/WeightRule",
    },
    ui_color: {
      $ref: "#/components/schemas/Color",
    },
    ui_fgcolor: {
      $ref: "#/components/schemas/Color",
    },
    template_fields: {
      type: "array",
      readOnly: true,
      items: {
        type: "string",
      },
    },
    sub_dag: {
      $ref: "#/components/schemas/DAG",
    },
    downstream_task_ids: {
      type: "array",
      readOnly: true,
      items: {
        type: "string",
      },
    },
    doc_md: {
      type: "string",
      readOnly: true,
      nullable: true,
      description: `Task documentation in markdown.

*New in version 2.10.0*
`,
    },
  },
} as const;

export const $TaskCollection = {
  type: "object",
  description: "Collection of tasks.",
  properties: {
    tasks: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Task",
      },
    },
  },
} as const;

export const $PluginCollectionItem = {
  type: "object",
  description: `A plugin Item.

*New in version 2.1.0*
`,
  properties: {
    name: {
      type: "string",
      description: "The name of the plugin",
    },
    hooks: {
      type: "array",
      items: {
        type: "string",
        nullable: true,
      },
      description: "The plugin hooks",
    },
    executors: {
      type: "array",
      items: {
        type: "string",
        nullable: true,
      },
      description: "The plugin executors",
    },
    macros: {
      type: "array",
      items: {
        type: "string",
        nullable: true,
      },
      description: "The plugin macros",
    },
    flask_blueprints: {
      type: "array",
      items: {
        type: "string",
        nullable: true,
      },
      description: "The flask blueprints",
    },
    appbuilder_views: {
      type: "array",
      items: {
        type: "object",
        nullable: true,
      },
      description: "The appuilder views",
    },
    appbuilder_menu_items: {
      type: "array",
      items: {
        type: "object",
        nullable: true,
      },
      description: "The Flask Appbuilder menu items",
    },
    global_operator_extra_links: {
      type: "array",
      items: {
        type: "string",
        nullable: true,
      },
      description: "The global operator extra links",
    },
    operator_extra_links: {
      type: "array",
      items: {
        type: "string",
        nullable: true,
      },
      description: "Operator extra links",
    },
    source: {
      type: "string",
      description: "The plugin source",
      nullable: true,
    },
    ti_deps: {
      type: "array",
      items: {
        type: "string",
      },
      description: "The plugin task instance dependencies",
    },
    listeners: {
      type: "array",
      items: {
        type: "string",
      },
      description: "The plugin listeners",
    },
    timetables: {
      type: "array",
      items: {
        type: "string",
      },
      description: "The plugin timetables",
    },
  },
} as const;

export const $PluginCollection = {
  type: "object",
  description: `A collection of plugin.

*New in version 2.1.0*
`,
  allOf: [
    {
      type: "object",
      properties: {
        plugins: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PluginCollectionItem",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $Role = {
  description: `a role item.

*New in version 2.1.0*
`,
  type: "object",
  properties: {
    name: {
      type: "string",
      description: `The name of the role

*Changed in version 2.3.0*&#58; A minimum character length requirement ('minLength') is added.
`,
      minLength: 1,
    },
    actions: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ActionResource",
      },
    },
  },
} as const;

export const $RoleCollection = {
  description: `A collection of roles.

*New in version 2.1.0*
`,
  type: "object",
  allOf: [
    {
      type: "object",
      properties: {
        roles: {
          type: "array",
          items: {
            $ref: "#/components/schemas/Role",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $Action = {
  description: `An action Item.

*New in version 2.1.0*
`,
  type: "object",
  properties: {
    name: {
      type: "string",
      description: 'The name of the permission "action"',
      nullable: false,
    },
  },
} as const;

export const $ActionCollection = {
  description: `A collection of actions.

*New in version 2.1.0*
`,
  type: "object",
  allOf: [
    {
      type: "object",
      properties: {
        actions: {
          type: "array",
          items: {
            $ref: "#/components/schemas/Action",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $Resource = {
  description: `A resource on which permissions are granted.

*New in version 2.1.0*
`,
  type: "object",
  properties: {
    name: {
      type: "string",
      description: "The name of the resource",
      nullable: false,
    },
  },
} as const;

export const $ActionResource = {
  description: `The Action-Resource item.

*New in version 2.1.0*
`,
  type: "object",
  properties: {
    action: {
      type: "object",
      $ref: "#/components/schemas/Action",
      description: "The permission action",
    },
    resource: {
      type: "object",
      $ref: "#/components/schemas/Resource",
      description: "The permission resource",
    },
  },
} as const;

export const $Dataset = {
  description: `A dataset item.

*New in version 2.4.0*
`,
  type: "object",
  properties: {
    id: {
      type: "integer",
      description: "The dataset id",
    },
    uri: {
      type: "string",
      description: "The dataset uri",
      nullable: false,
    },
    extra: {
      type: "object",
      description: "The dataset extra",
      nullable: true,
    },
    created_at: {
      type: "string",
      description: "The dataset creation time",
      nullable: false,
    },
    updated_at: {
      type: "string",
      description: "The dataset update time",
      nullable: false,
    },
    consuming_dags: {
      type: "array",
      items: {
        $ref: "#/components/schemas/DagScheduleDatasetReference",
      },
    },
    producing_tasks: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TaskOutletDatasetReference",
      },
    },
  },
} as const;

export const $TaskOutletDatasetReference = {
  description: `A datasets reference to an upstream task.

*New in version 2.4.0*
`,
  type: "object",
  properties: {
    dag_id: {
      type: "string",
      description: "The DAG ID that updates the dataset.",
      nullable: true,
    },
    task_id: {
      type: "string",
      description: "The task ID that updates the dataset.",
      nullable: true,
    },
    created_at: {
      type: "string",
      description: "The dataset creation time",
      nullable: false,
    },
    updated_at: {
      type: "string",
      description: "The dataset update time",
      nullable: false,
    },
  },
} as const;

export const $DagScheduleDatasetReference = {
  description: `A datasets reference to a downstream DAG.

*New in version 2.4.0*
`,
  type: "object",
  properties: {
    dag_id: {
      type: "string",
      description: "The DAG ID that depends on the dataset.",
      nullable: true,
    },
    created_at: {
      type: "string",
      description: "The dataset reference creation time",
      nullable: false,
    },
    updated_at: {
      type: "string",
      description: "The dataset reference update time",
      nullable: false,
    },
  },
} as const;

export const $DatasetCollection = {
  description: `A collection of datasets.

*New in version 2.4.0*
`,
  type: "object",
  allOf: [
    {
      type: "object",
      properties: {
        datasets: {
          type: "array",
          items: {
            $ref: "#/components/schemas/Dataset",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $DatasetEvent = {
  description: `A dataset event.

*New in version 2.4.0*
`,
  type: "object",
  properties: {
    dataset_id: {
      type: "integer",
      description: "The dataset id",
    },
    dataset_uri: {
      type: "string",
      description: "The URI of the dataset",
      nullable: false,
    },
    extra: {
      type: "object",
      description: "The dataset event extra",
      nullable: true,
    },
    source_dag_id: {
      type: "string",
      description: "The DAG ID that updated the dataset.",
      nullable: true,
    },
    source_task_id: {
      type: "string",
      description: "The task ID that updated the dataset.",
      nullable: true,
    },
    source_run_id: {
      type: "string",
      description: "The DAG run ID that updated the dataset.",
      nullable: true,
    },
    source_map_index: {
      type: "integer",
      description: "The task map index that updated the dataset.",
      nullable: true,
    },
    created_dagruns: {
      type: "array",
      items: {
        $ref: "#/components/schemas/BasicDAGRun",
      },
    },
    timestamp: {
      type: "string",
      description: "The dataset event creation time",
      nullable: false,
    },
  },
} as const;

export const $CreateDatasetEvent = {
  type: "object",
  required: ["dataset_uri"],
  properties: {
    dataset_uri: {
      type: "string",
      description: "The URI of the dataset",
      nullable: false,
    },
    extra: {
      type: "object",
      description: "The dataset event extra",
      nullable: true,
    },
  },
} as const;

export const $QueuedEvent = {
  type: "object",
  properties: {
    uri: {
      type: "string",
      description: "The datata uri.",
    },
    dag_id: {
      type: "string",
      description: "The DAG ID.",
    },
    created_at: {
      type: "string",
      format: "date-time",
      description: "The creation time of QueuedEvent",
    },
  },
} as const;

export const $QueuedEventCollection = {
  description: `A collection of Dataset Dag Run Queues.

*New in version 2.9.0*
`,
  type: "object",
  allOf: [
    {
      type: "object",
      properties: {
        datasets: {
          type: "array",
          items: {
            $ref: "#/components/schemas/QueuedEvent",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $BasicDAGRun = {
  type: "object",
  properties: {
    run_id: {
      type: "string",
      description: `Run ID.
`,
    },
    dag_id: {
      type: "string",
      readOnly: true,
    },
    logical_date: {
      type: "string",
      description: `The logical date (previously called execution date). This is the time or interval covered by
this DAG run, according to the DAG definition.

The value of this field can be set only when creating the object. If you try to modify the
field of an existing object, the request fails with an BAD_REQUEST error.

This together with DAG_ID are a unique key.

*New in version 2.2.0*
`,
      format: "date-time",
    },
    start_date: {
      type: "string",
      format: "date-time",
      description: `The start time. The time when DAG run was actually created.

*Changed in version 2.1.3*&#58; Field becomes nullable.
`,
      readOnly: true,
      nullable: true,
    },
    end_date: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
    },
    data_interval_start: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
    },
    data_interval_end: {
      type: "string",
      format: "date-time",
      readOnly: true,
      nullable: true,
    },
    state: {
      $ref: "#/components/schemas/DagState",
    },
  },
} as const;

export const $DatasetEventCollection = {
  description: `A collection of dataset events.

*New in version 2.4.0*
`,
  type: "object",
  allOf: [
    {
      type: "object",
      properties: {
        dataset_events: {
          type: "array",
          items: {
            $ref: "#/components/schemas/DatasetEvent",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/CollectionInfo",
    },
  ],
} as const;

export const $ConfigOption = {
  type: "object",
  description: "The option of configuration.",
  properties: {
    key: {
      type: "string",
      readOnly: true,
    },
    value: {
      type: "string",
      readOnly: true,
    },
  },
} as const;

export const $ConfigSection = {
  type: "object",
  description: "The section of configuration.",
  properties: {
    name: {
      type: "string",
      readOnly: true,
    },
    options: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ConfigOption",
      },
    },
  },
} as const;

export const $Config = {
  type: "object",
  description: "The configuration.",
  properties: {
    sections: {
      type: "array",
      items: {
        $ref: "#/components/schemas/ConfigSection",
      },
    },
  },
} as const;

export const $VersionInfo = {
  type: "object",
  description: "Version information.",
  properties: {
    version: {
      type: "string",
      description: "The version of Airflow",
    },
    git_version: {
      type: "string",
      description: "The git version (including git commit hash)",
      nullable: true,
    },
  },
} as const;

export const $ClearDagRun = {
  type: "object",
  properties: {
    dry_run: {
      description: `If set, don't actually run this operation. The response will contain a list of task instances
planned to be cleaned, but not modified in any way.
`,
      type: "boolean",
      default: true,
    },
  },
} as const;

export const $ClearTaskInstances = {
  type: "object",
  properties: {
    dry_run: {
      description: `If set, don't actually run this operation. The response will contain a list of task instances
planned to be cleaned, but not modified in any way.
`,
      type: "boolean",
      default: true,
    },
    task_ids: {
      description: `A list of task ids to clear.

*New in version 2.1.0*
`,
      type: "array",
      items: {
        type: "string",
      },
      minItems: 1,
    },
    start_date: {
      description: "The minimum execution date to clear.",
      type: "string",
      format: "datetime",
    },
    end_date: {
      description: "The maximum execution date to clear.",
      type: "string",
      format: "datetime",
    },
    only_failed: {
      description: "Only clear failed tasks.",
      type: "boolean",
      default: true,
    },
    only_running: {
      description: "Only clear running tasks.",
      type: "boolean",
      default: false,
    },
    reset_dag_runs: {
      description: "Set state of DAG runs to RUNNING.",
      type: "boolean",
    },
    dag_run_id: {
      type: "string",
      description: "The DagRun ID for this task instance",
      nullable: true,
    },
    include_upstream: {
      description: "If set to true, upstream tasks are also affected.",
      type: "boolean",
      default: false,
    },
    include_downstream: {
      description: "If set to true, downstream tasks are also affected.",
      type: "boolean",
      default: false,
    },
    include_future: {
      description:
        "If set to True, also tasks from future DAG Runs are affected.",
      type: "boolean",
      default: false,
    },
    include_past: {
      description:
        "If set to True, also tasks from past DAG Runs are affected.",
      type: "boolean",
      default: false,
    },
  },
} as const;

export const $UpdateTaskInstancesState = {
  type: "object",
  properties: {
    dry_run: {
      description: `If set, don't actually run this operation. The response will contain a list of task instances
planned to be affected, but won't be modified in any way.
`,
      type: "boolean",
      default: true,
    },
    task_id: {
      description: "The task ID.",
      type: "string",
    },
    execution_date: {
      description:
        "The execution date. Either set this or dag_run_id but not both.",
      type: "string",
      format: "datetime",
    },
    dag_run_id: {
      description: `The task instance's DAG run ID. Either set this or execution_date but not both.

*New in version 2.3.0*
`,
      type: "string",
    },
    include_upstream: {
      description: "If set to true, upstream tasks are also affected.",
      type: "boolean",
    },
    include_downstream: {
      description: "If set to true, downstream tasks are also affected.",
      type: "boolean",
    },
    include_future: {
      description:
        "If set to True, also tasks from future DAG Runs are affected.",
      type: "boolean",
    },
    include_past: {
      description:
        "If set to True, also tasks from past DAG Runs are affected.",
      type: "boolean",
    },
    new_state: {
      $ref: "#/components/schemas/UpdateTaskState",
    },
  },
} as const;

export const $UpdateTaskInstance = {
  type: "object",
  properties: {
    dry_run: {
      description: `If set, don't actually run this operation. The response will contain the task instance
planned to be affected, but won't be modified in any way.
`,
      type: "boolean",
      default: true,
    },
    new_state: {
      $ref: "#/components/schemas/UpdateTaskState",
    },
  },
} as const;

export const $SetTaskInstanceNote = {
  type: "object",
  required: ["note"],
  properties: {
    note: {
      description: "The custom note to set for this Task Instance.",
      type: "string",
    },
  },
} as const;

export const $ListDagRunsForm = {
  type: "object",
  properties: {
    order_by: {
      type: "string",
      description: `The name of the field to order the results by. Prefix a field name
with \`-\` to reverse the sort order.

*New in version 2.1.0*
`,
    },
    page_offset: {
      type: "integer",
      minimum: 0,
      description:
        "The number of items to skip before starting to collect the result set.",
    },
    page_limit: {
      type: "integer",
      minimum: 1,
      default: 100,
      description: "The numbers of items to return.",
    },
    dag_ids: {
      type: "array",
      items: {
        type: "string",
      },
      description: `Return objects with specific DAG IDs.
The value can be repeated to retrieve multiple matching values (OR condition).`,
    },
    states: {
      type: "array",
      items: {
        type: "string",
      },
      description: `Return objects with specific states.
The value can be repeated to retrieve multiple matching values (OR condition).`,
    },
    execution_date_gte: {
      type: "string",
      format: "date-time",
      description: `Returns objects greater or equal to the specified date.

This can be combined with execution_date_lte key to receive only the selected period.
`,
    },
    execution_date_lte: {
      type: "string",
      format: "date-time",
      description: `Returns objects less than or equal to the specified date.

This can be combined with execution_date_gte key to receive only the selected period.
`,
    },
    start_date_gte: {
      type: "string",
      format: "date-time",
      description: `Returns objects greater or equal the specified date.

This can be combined with start_date_lte key to receive only the selected period.
`,
    },
    start_date_lte: {
      type: "string",
      format: "date-time",
      description: `Returns objects less or equal the specified date.

This can be combined with start_date_gte parameter to receive only the selected period
`,
    },
    end_date_gte: {
      type: "string",
      format: "date-time",
      description: `Returns objects greater or equal the specified date.

This can be combined with end_date_lte parameter to receive only the selected period.
`,
    },
    end_date_lte: {
      type: "string",
      format: "date-time",
      description: `Returns objects less than or equal to the specified date.

This can be combined with end_date_gte parameter to receive only the selected period.
`,
    },
  },
} as const;

export const $ListTaskInstanceForm = {
  type: "object",
  properties: {
    dag_ids: {
      type: "array",
      items: {
        type: "string",
      },
      description: `Return objects with specific DAG IDs.
The value can be repeated to retrieve multiple matching values (OR condition).`,
    },
    dag_run_ids: {
      type: "array",
      items: {
        type: "string",
      },
      description: `Return objects with specific DAG Run IDs.
The value can be repeated to retrieve multiple matching values (OR condition).
*New in version 2.7.1*`,
    },
    task_ids: {
      type: "array",
      items: {
        type: "string",
      },
      description: `Return objects with specific task IDs.
The value can be repeated to retrieve multiple matching values (OR condition).
*New in version 2.7.1*`,
    },
    execution_date_gte: {
      type: "string",
      format: "date-time",
      description: `Returns objects greater or equal to the specified date.

This can be combined with execution_date_lte parameter to receive only the selected period.
`,
    },
    execution_date_lte: {
      type: "string",
      format: "date-time",
      description: `Returns objects less than or equal to the specified date.

This can be combined with execution_date_gte parameter to receive only the selected period.
`,
    },
    start_date_gte: {
      type: "string",
      format: "date-time",
      description: `Returns objects greater or equal the specified date.

This can be combined with start_date_lte parameter to receive only the selected period.
`,
    },
    start_date_lte: {
      type: "string",
      format: "date-time",
      description: `Returns objects less or equal the specified date.

This can be combined with start_date_gte parameter to receive only the selected period.
`,
    },
    end_date_gte: {
      type: "string",
      format: "date-time",
      description: `Returns objects greater or equal the specified date.

This can be combined with start_date_lte parameter to receive only the selected period.
`,
    },
    end_date_lte: {
      type: "string",
      format: "date-time",
      description: `Returns objects less than or equal to the specified date.

This can be combined with start_date_gte parameter to receive only the selected period.
`,
    },
    duration_gte: {
      type: "number",
      description: `Returns objects greater than or equal to the specified values.

This can be combined with duration_lte parameter to receive only the selected period.
`,
    },
    duration_lte: {
      type: "number",
      description: `Returns objects less than or equal to the specified values.

This can be combined with duration_gte parameter to receive only the selected range.
`,
    },
    state: {
      type: "array",
      items: {
        $ref: "#/components/schemas/TaskState",
      },
      description:
        "The value can be repeated to retrieve multiple matching values (OR condition).",
    },
    pool: {
      type: "array",
      items: {
        type: "string",
      },
      description:
        "The value can be repeated to retrieve multiple matching values (OR condition).",
    },
    queue: {
      type: "array",
      items: {
        type: "string",
      },
      description:
        "The value can be repeated to retrieve multiple matching values (OR condition).",
    },
    executor: {
      type: "array",
      items: {
        type: "string",
      },
      description:
        "The value can be repeated to retrieve multiple matching values (OR condition).",
    },
    order_by: {
      type: "string",
      description: `The name of the field to order the results by. Prefix a field name
with \`-\` to reverse the sort order. \`order_by\` defaults to
\`map_index\` when unspecified.
Supported field names: \`state\`, \`duration\`, \`start_date\`, \`end_date\`
and \`map_index\`.

*New in version 3.0.0*
`,
    },
  },
} as const;

export const $TimeDelta = {
  description: "Time delta",
  type: "object",
  nullable: true,
  required: ["__type", "days", "seconds", "microseconds"],
  properties: {
    __type: {
      type: "string",
    },
    days: {
      type: "integer",
    },
    seconds: {
      type: "integer",
    },
    microseconds: {
      type: "integer",
    },
  },
} as const;

export const $RelativeDelta = {
  description: "Relative delta",
  type: "object",
  required: [
    "__type",
    "years",
    "months",
    "days",
    "leapdays",
    "hours",
    "minutes",
    "seconds",
    "microseconds",
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "microsecond",
  ],
  properties: {
    __type: {
      type: "string",
    },
    years: {
      type: "integer",
    },
    months: {
      type: "integer",
    },
    days: {
      type: "integer",
    },
    leapdays: {
      type: "integer",
    },
    hours: {
      type: "integer",
    },
    minutes: {
      type: "integer",
    },
    seconds: {
      type: "integer",
    },
    microseconds: {
      type: "integer",
    },
    year: {
      type: "integer",
    },
    month: {
      type: "integer",
    },
    day: {
      type: "integer",
    },
    hour: {
      type: "integer",
    },
    minute: {
      type: "integer",
    },
    second: {
      type: "integer",
    },
    microsecond: {
      type: "integer",
    },
  },
} as const;

export const $CronExpression = {
  description: "Cron expression",
  type: "object",
  required: ["__type", "value"],
  properties: {
    __type: {
      type: "string",
    },
    value: {
      type: "string",
    },
  },
  nullable: true,
} as const;

export const $Timezone = {
  type: "string",
} as const;

export const $Tag = {
  description: "Tag",
  type: "object",
  properties: {
    name: {
      type: "string",
    },
  },
} as const;

export const $Color = {
  description: "Color in hexadecimal notation.",
  type: "string",
  pattern: "^#[a-fA-F0-9]{3,6}$",
} as const;

export const $ClassReference = {
  description: "Class reference",
  type: "object",
  properties: {
    module_path: {
      type: "string",
      readOnly: true,
    },
    class_name: {
      type: "string",
      readOnly: true,
    },
  },
} as const;

export const $Error = {
  description: `[RFC7807](https://tools.ietf.org/html/rfc7807) compliant response.
`,
  type: "object",
  properties: {
    type: {
      type: "string",
      description: `A URI reference [RFC3986] that identifies the problem type. This specification
encourages that, when dereferenced, it provide human-readable documentation for
the problem type.
`,
    },
    title: {
      type: "string",
      description: "A short, human-readable summary of the problem type.",
    },
    status: {
      type: "number",
      description:
        "The HTTP status code generated by the API server for this occurrence of the problem.",
    },
    detail: {
      type: "string",
      description:
        "A human-readable explanation specific to this occurrence of the problem.",
    },
    instance: {
      type: "string",
      description: `A URI reference that identifies the specific occurrence of the problem. It may or may
not yield further information if dereferenced.
`,
    },
  },
  required: ["type", "title", "status"],
} as const;

export const $CollectionInfo = {
  description: "Metadata about collection.",
  type: "object",
  properties: {
    total_entries: {
      type: "integer",
      description: `Count of total objects in the current result set before pagination parameters
(limit, offset) are applied.
`,
    },
  },
} as const;

export const $TaskState = {
  description: `Task state.

*Changed in version 2.0.2*&#58; 'removed' is added as a possible value.

*Changed in version 2.2.0*&#58; 'deferred' is added as a possible value.

*Changed in version 2.4.0*&#58; 'sensing' state has been removed.
*Changed in version 2.4.2*&#58; 'restarting' is added as a possible value

*Changed in version 2.7.0*&#58; Field becomes nullable and null primitive is added as a possible value.
*Changed in version 2.7.0*&#58; 'none' state is deprecated in favor of null.
`,
  type: "string",
  nullable: true,
  enum: [
    null,
    "success",
    "running",
    "failed",
    "upstream_failed",
    "skipped",
    "up_for_retry",
    "up_for_reschedule",
    "queued",
    "none",
    "scheduled",
    "deferred",
    "removed",
    "restarting",
  ],
} as const;

export const $UpdateTaskState = {
  description: `Expected new state. Only a subset of TaskState are available.

Other states are managed directly by the scheduler or the workers and cannot be updated manually through the REST API.
`,
  type: "string",
  enum: ["success", "failed", "skipped"],
} as const;

export const $DagState = {
  description: `DAG State.

*Changed in version 2.1.3*&#58; 'queued' is added as a possible value.
`,
  type: "string",
  readOnly: true,
  enum: ["queued", "running", "success", "failed"],
} as const;

export const $TriggerRule = {
  description: `Trigger rule.

*Changed in version 2.2.0*&#58; 'none_failed_min_one_success' is added as a possible value. Deprecated 'dummy' and 'always' is added as a possible value

*Changed in version 2.3.0*&#58; 'all_skipped' is added as a possible value.

*Changed in version 2.5.0*&#58; 'one_done' is added as a possible value.

*Changed in version 2.7.0*&#58; 'all_done_setup_success' is added as a possible value.
`,
  type: "string",
  enum: [
    "all_success",
    "all_failed",
    "all_done",
    "all_done_setup_success",
    "one_success",
    "one_failed",
    "one_done",
    "none_failed",
    "none_skipped",
    "none_failed_or_skipped",
    "none_failed_min_one_success",
    "dummy",
    "all_skipped",
    "always",
  ],
} as const;

export const $WeightRule = {
  description: "Weight rule.",
  type: "string",
  enum: ["downstream", "upstream", "absolute"],
} as const;

export const $HealthStatus = {
  description: "Health status",
  type: "string",
  nullable: true,
  enum: ["healthy", "unhealthy"],
} as const;
