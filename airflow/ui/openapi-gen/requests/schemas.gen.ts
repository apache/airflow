// This file is auto-generated by @hey-api/openapi-ts

export const $AppBuilderMenuItemResponse = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    href: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Href",
    },
    category: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Category",
    },
  },
  additionalProperties: true,
  type: "object",
  required: ["name"],
  title: "AppBuilderMenuItemResponse",
  description: "Serializer for AppBuilder Menu Item responses.",
} as const;

export const $AppBuilderViewResponse = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Name",
    },
    category: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Category",
    },
    view: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "View",
    },
    label: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Label",
    },
  },
  additionalProperties: true,
  type: "object",
  title: "AppBuilderViewResponse",
  description: "Serializer for AppBuilder View responses.",
} as const;

export const $AssetAliasSchema = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    group: {
      type: "string",
      title: "Group",
    },
  },
  type: "object",
  required: ["id", "name", "group"],
  title: "AssetAliasSchema",
  description: "Asset alias serializer for assets.",
} as const;

export const $AssetCollectionResponse = {
  properties: {
    assets: {
      items: {
        $ref: "#/components/schemas/AssetResponse",
      },
      type: "array",
      title: "Assets",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["assets", "total_entries"],
  title: "AssetCollectionResponse",
  description: "Asset collection response.",
} as const;

export const $AssetEventCollectionResponse = {
  properties: {
    asset_events: {
      items: {
        $ref: "#/components/schemas/AssetEventResponse",
      },
      type: "array",
      title: "Asset Events",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["asset_events", "total_entries"],
  title: "AssetEventCollectionResponse",
  description: "Asset event collection response.",
} as const;

export const $AssetEventResponse = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
    },
    asset_id: {
      type: "integer",
      title: "Asset Id",
    },
    uri: {
      type: "string",
      title: "Uri",
    },
    extra: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Extra",
    },
    source_task_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Source Task Id",
    },
    source_dag_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Source Dag Id",
    },
    source_run_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Source Run Id",
    },
    source_map_index: {
      type: "integer",
      title: "Source Map Index",
    },
    created_dagruns: {
      items: {
        $ref: "#/components/schemas/DagRunAssetReference",
      },
      type: "array",
      title: "Created Dagruns",
    },
    timestamp: {
      type: "string",
      format: "date-time",
      title: "Timestamp",
    },
  },
  type: "object",
  required: [
    "id",
    "asset_id",
    "uri",
    "source_map_index",
    "created_dagruns",
    "timestamp",
  ],
  title: "AssetEventResponse",
  description: "Asset event serializer for responses.",
} as const;

export const $AssetResponse = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    uri: {
      type: "string",
      title: "Uri",
    },
    group: {
      type: "string",
      title: "Group",
    },
    extra: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Extra",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    consuming_dags: {
      items: {
        $ref: "#/components/schemas/DagScheduleAssetReference",
      },
      type: "array",
      title: "Consuming Dags",
    },
    producing_tasks: {
      items: {
        $ref: "#/components/schemas/TaskOutletAssetReference",
      },
      type: "array",
      title: "Producing Tasks",
    },
    aliases: {
      items: {
        $ref: "#/components/schemas/AssetAliasSchema",
      },
      type: "array",
      title: "Aliases",
    },
  },
  type: "object",
  required: [
    "id",
    "name",
    "uri",
    "group",
    "created_at",
    "updated_at",
    "consuming_dags",
    "producing_tasks",
    "aliases",
  ],
  title: "AssetResponse",
  description: "Asset serializer for responses.",
} as const;

export const $BackfillCollectionResponse = {
  properties: {
    backfills: {
      items: {
        $ref: "#/components/schemas/BackfillResponse",
      },
      type: "array",
      title: "Backfills",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["backfills", "total_entries"],
  title: "BackfillCollectionResponse",
  description: "Backfill Collection serializer for responses.",
} as const;

export const $BackfillPostBody = {
  properties: {
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    from_date: {
      type: "string",
      format: "date-time",
      title: "From Date",
    },
    to_date: {
      type: "string",
      format: "date-time",
      title: "To Date",
    },
    run_backwards: {
      type: "boolean",
      title: "Run Backwards",
      default: false,
    },
    dag_run_conf: {
      type: "object",
      title: "Dag Run Conf",
      default: {},
    },
    reprocess_behavior: {
      $ref: "#/components/schemas/ReprocessBehavior",
      default: "none",
    },
    max_active_runs: {
      type: "integer",
      title: "Max Active Runs",
      default: 10,
    },
  },
  type: "object",
  required: ["dag_id", "from_date", "to_date"],
  title: "BackfillPostBody",
  description: "Object used for create backfill request.",
} as const;

export const $BackfillResponse = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    from_date: {
      type: "string",
      format: "date-time",
      title: "From Date",
    },
    to_date: {
      type: "string",
      format: "date-time",
      title: "To Date",
    },
    dag_run_conf: {
      type: "object",
      title: "Dag Run Conf",
    },
    is_paused: {
      type: "boolean",
      title: "Is Paused",
    },
    reprocess_behavior: {
      $ref: "#/components/schemas/ReprocessBehavior",
    },
    max_active_runs: {
      type: "integer",
      title: "Max Active Runs",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    completed_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Completed At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
  },
  type: "object",
  required: [
    "id",
    "dag_id",
    "from_date",
    "to_date",
    "dag_run_conf",
    "is_paused",
    "reprocess_behavior",
    "max_active_runs",
    "created_at",
    "completed_at",
    "updated_at",
  ],
  title: "BackfillResponse",
  description: "Base serializer for Backfill.",
} as const;

export const $BaseInfoResponse = {
  properties: {
    status: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Status",
    },
  },
  type: "object",
  required: ["status"],
  title: "BaseInfoResponse",
  description: "Base info serializer for responses.",
} as const;

export const $ClearTaskInstancesBody = {
  properties: {
    dry_run: {
      type: "boolean",
      title: "Dry Run",
      default: true,
    },
    start_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date",
    },
    end_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date",
    },
    only_failed: {
      type: "boolean",
      title: "Only Failed",
      default: true,
    },
    only_running: {
      type: "boolean",
      title: "Only Running",
      default: false,
    },
    reset_dag_runs: {
      type: "boolean",
      title: "Reset Dag Runs",
      default: false,
    },
    task_ids: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Task Ids",
    },
    dag_run_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Dag Run Id",
    },
    include_upstream: {
      type: "boolean",
      title: "Include Upstream",
      default: false,
    },
    include_downstream: {
      type: "boolean",
      title: "Include Downstream",
      default: false,
    },
    include_future: {
      type: "boolean",
      title: "Include Future",
      default: false,
    },
    include_past: {
      type: "boolean",
      title: "Include Past",
      default: false,
    },
  },
  type: "object",
  title: "ClearTaskInstancesBody",
  description: "Request body for Clear Task Instances endpoint.",
} as const;

export const $Config = {
  properties: {
    sections: {
      items: {
        $ref: "#/components/schemas/ConfigSection",
      },
      type: "array",
      title: "Sections",
    },
  },
  type: "object",
  required: ["sections"],
  title: "Config",
  description: "List of config sections with their options.",
} as const;

export const $ConfigOption = {
  properties: {
    key: {
      type: "string",
      title: "Key",
    },
    value: {
      anyOf: [
        {
          type: "string",
        },
        {
          prefixItems: [
            {
              type: "string",
            },
            {
              type: "string",
            },
          ],
          type: "array",
          maxItems: 2,
          minItems: 2,
        },
      ],
      title: "Value",
    },
  },
  type: "object",
  required: ["key", "value"],
  title: "ConfigOption",
  description: "Config option.",
} as const;

export const $ConfigResponse = {
  properties: {
    navbar_color: {
      type: "string",
      title: "Navbar Color",
    },
    navbar_text_color: {
      type: "string",
      title: "Navbar Text Color",
    },
    navbar_hover_color: {
      type: "string",
      title: "Navbar Hover Color",
    },
    navbar_text_hover_color: {
      type: "string",
      title: "Navbar Text Hover Color",
    },
    navbar_logo_text_color: {
      type: "string",
      title: "Navbar Logo Text Color",
    },
    page_size: {
      type: "integer",
      title: "Page Size",
    },
    auto_refresh_interval: {
      type: "integer",
      title: "Auto Refresh Interval",
    },
    default_ui_timezone: {
      type: "string",
      title: "Default Ui Timezone",
    },
    hide_paused_dags_by_default: {
      type: "boolean",
      title: "Hide Paused Dags By Default",
    },
    instance_name: {
      type: "string",
      title: "Instance Name",
    },
    instance_name_has_markup: {
      type: "boolean",
      title: "Instance Name Has Markup",
    },
    enable_swagger_ui: {
      type: "boolean",
      title: "Enable Swagger Ui",
    },
    require_confirmation_dag_change: {
      type: "boolean",
      title: "Require Confirmation Dag Change",
    },
    default_wrap: {
      type: "boolean",
      title: "Default Wrap",
    },
    warn_deployment_exposure: {
      type: "boolean",
      title: "Warn Deployment Exposure",
    },
    audit_view_excluded_events: {
      type: "string",
      title: "Audit View Excluded Events",
    },
    audit_view_included_events: {
      type: "string",
      title: "Audit View Included Events",
    },
    is_k8s: {
      type: "boolean",
      title: "Is K8S",
    },
    test_connection: {
      type: "string",
      title: "Test Connection",
    },
    state_color_mapping: {
      type: "object",
      title: "State Color Mapping",
    },
  },
  type: "object",
  required: [
    "navbar_color",
    "navbar_text_color",
    "navbar_hover_color",
    "navbar_text_hover_color",
    "navbar_logo_text_color",
    "page_size",
    "auto_refresh_interval",
    "default_ui_timezone",
    "hide_paused_dags_by_default",
    "instance_name",
    "instance_name_has_markup",
    "enable_swagger_ui",
    "require_confirmation_dag_change",
    "default_wrap",
    "warn_deployment_exposure",
    "audit_view_excluded_events",
    "audit_view_included_events",
    "is_k8s",
    "test_connection",
    "state_color_mapping",
  ],
  title: "ConfigResponse",
  description: "configuration serializer.",
} as const;

export const $ConfigSection = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    options: {
      items: {
        $ref: "#/components/schemas/ConfigOption",
      },
      type: "array",
      title: "Options",
    },
  },
  type: "object",
  required: ["name", "options"],
  title: "ConfigSection",
  description: "Config Section Schema.",
} as const;

export const $ConnectionBody = {
  properties: {
    connection_id: {
      type: "string",
      maxLength: 200,
      pattern: "^[\\w.-]+$",
      title: "Connection Id",
    },
    conn_type: {
      type: "string",
      title: "Conn Type",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    host: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Host",
    },
    login: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Login",
    },
    schema: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Schema",
    },
    port: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Port",
    },
    password: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Password",
    },
    extra: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Extra",
    },
  },
  type: "object",
  required: ["connection_id", "conn_type"],
  title: "ConnectionBody",
  description: "Connection Serializer for requests body.",
} as const;

export const $ConnectionBulkBody = {
  properties: {
    connections: {
      items: {
        $ref: "#/components/schemas/ConnectionBody",
      },
      type: "array",
      title: "Connections",
    },
  },
  type: "object",
  required: ["connections"],
  title: "ConnectionBulkBody",
  description: "Connections Serializer for requests body.",
} as const;

export const $ConnectionCollectionResponse = {
  properties: {
    connections: {
      items: {
        $ref: "#/components/schemas/ConnectionResponse",
      },
      type: "array",
      title: "Connections",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["connections", "total_entries"],
  title: "ConnectionCollectionResponse",
  description: "Connection Collection serializer for responses.",
} as const;

export const $ConnectionResponse = {
  properties: {
    connection_id: {
      type: "string",
      title: "Connection Id",
    },
    conn_type: {
      type: "string",
      title: "Conn Type",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    host: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Host",
    },
    login: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Login",
    },
    schema: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Schema",
    },
    port: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Port",
    },
    password: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Password",
    },
    extra: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Extra",
    },
  },
  type: "object",
  required: [
    "connection_id",
    "conn_type",
    "description",
    "host",
    "login",
    "schema",
    "port",
    "password",
    "extra",
  ],
  title: "ConnectionResponse",
  description: "Connection serializer for responses.",
} as const;

export const $ConnectionTestResponse = {
  properties: {
    status: {
      type: "boolean",
      title: "Status",
    },
    message: {
      type: "string",
      title: "Message",
    },
  },
  type: "object",
  required: ["status", "message"],
  title: "ConnectionTestResponse",
  description: "Connection Test serializer for responses.",
} as const;

export const $CreateAssetEventsBody = {
  properties: {
    uri: {
      type: "string",
      title: "Uri",
    },
    extra: {
      type: "object",
      title: "Extra",
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["uri"],
  title: "CreateAssetEventsBody",
  description: "Create asset events request.",
} as const;

export const $DAGCollectionResponse = {
  properties: {
    dags: {
      items: {
        $ref: "#/components/schemas/DAGResponse",
      },
      type: "array",
      title: "Dags",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["dags", "total_entries"],
  title: "DAGCollectionResponse",
  description: "DAG Collection serializer for responses.",
} as const;

export const $DAGDetailsResponse = {
  properties: {
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    dag_display_name: {
      type: "string",
      title: "Dag Display Name",
    },
    is_paused: {
      type: "boolean",
      title: "Is Paused",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
    },
    last_parsed_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Parsed Time",
    },
    last_expired: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Expired",
    },
    default_view: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Default View",
    },
    fileloc: {
      type: "string",
      title: "Fileloc",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    timetable_summary: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Timetable Summary",
    },
    timetable_description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Timetable Description",
    },
    tags: {
      items: {
        $ref: "#/components/schemas/DagTagPydantic",
      },
      type: "array",
      title: "Tags",
    },
    max_active_tasks: {
      type: "integer",
      title: "Max Active Tasks",
    },
    max_active_runs: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Max Active Runs",
    },
    max_consecutive_failed_dag_runs: {
      type: "integer",
      title: "Max Consecutive Failed Dag Runs",
    },
    has_task_concurrency_limits: {
      type: "boolean",
      title: "Has Task Concurrency Limits",
    },
    has_import_errors: {
      type: "boolean",
      title: "Has Import Errors",
    },
    next_dagrun: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun",
    },
    next_dagrun_data_interval_start: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun Data Interval Start",
    },
    next_dagrun_data_interval_end: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun Data Interval End",
    },
    next_dagrun_create_after: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun Create After",
    },
    owners: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Owners",
    },
    catchup: {
      type: "boolean",
      title: "Catchup",
    },
    dag_run_timeout: {
      anyOf: [
        {
          type: "string",
          format: "duration",
        },
        {
          type: "null",
        },
      ],
      title: "Dag Run Timeout",
    },
    asset_expression: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Asset Expression",
    },
    doc_md: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Doc Md",
    },
    start_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date",
    },
    end_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date",
    },
    is_paused_upon_creation: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Paused Upon Creation",
    },
    params: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Params",
    },
    render_template_as_native_obj: {
      type: "boolean",
      title: "Render Template As Native Obj",
    },
    template_search_path: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Template Search Path",
    },
    timezone: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Timezone",
    },
    last_parsed: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Parsed",
    },
    file_token: {
      type: "string",
      title: "File Token",
      description: "Return file token.",
      readOnly: true,
    },
    concurrency: {
      type: "integer",
      title: "Concurrency",
      description: "Return max_active_tasks as concurrency.",
      readOnly: true,
    },
  },
  type: "object",
  required: [
    "dag_id",
    "dag_display_name",
    "is_paused",
    "is_active",
    "last_parsed_time",
    "last_expired",
    "default_view",
    "fileloc",
    "description",
    "timetable_summary",
    "timetable_description",
    "tags",
    "max_active_tasks",
    "max_active_runs",
    "max_consecutive_failed_dag_runs",
    "has_task_concurrency_limits",
    "has_import_errors",
    "next_dagrun",
    "next_dagrun_data_interval_start",
    "next_dagrun_data_interval_end",
    "next_dagrun_create_after",
    "owners",
    "catchup",
    "dag_run_timeout",
    "asset_expression",
    "doc_md",
    "start_date",
    "end_date",
    "is_paused_upon_creation",
    "params",
    "render_template_as_native_obj",
    "template_search_path",
    "timezone",
    "last_parsed",
    "file_token",
    "concurrency",
  ],
  title: "DAGDetailsResponse",
  description: "Specific serializer for DAG Details responses.",
} as const;

export const $DAGPatchBody = {
  properties: {
    is_paused: {
      type: "boolean",
      title: "Is Paused",
    },
  },
  type: "object",
  required: ["is_paused"],
  title: "DAGPatchBody",
  description: "Dag Serializer for updatable bodies.",
} as const;

export const $DAGResponse = {
  properties: {
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    dag_display_name: {
      type: "string",
      title: "Dag Display Name",
    },
    is_paused: {
      type: "boolean",
      title: "Is Paused",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
    },
    last_parsed_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Parsed Time",
    },
    last_expired: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Expired",
    },
    default_view: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Default View",
    },
    fileloc: {
      type: "string",
      title: "Fileloc",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    timetable_summary: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Timetable Summary",
    },
    timetable_description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Timetable Description",
    },
    tags: {
      items: {
        $ref: "#/components/schemas/DagTagPydantic",
      },
      type: "array",
      title: "Tags",
    },
    max_active_tasks: {
      type: "integer",
      title: "Max Active Tasks",
    },
    max_active_runs: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Max Active Runs",
    },
    max_consecutive_failed_dag_runs: {
      type: "integer",
      title: "Max Consecutive Failed Dag Runs",
    },
    has_task_concurrency_limits: {
      type: "boolean",
      title: "Has Task Concurrency Limits",
    },
    has_import_errors: {
      type: "boolean",
      title: "Has Import Errors",
    },
    next_dagrun: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun",
    },
    next_dagrun_data_interval_start: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun Data Interval Start",
    },
    next_dagrun_data_interval_end: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun Data Interval End",
    },
    next_dagrun_create_after: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun Create After",
    },
    owners: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Owners",
    },
    file_token: {
      type: "string",
      title: "File Token",
      description: "Return file token.",
      readOnly: true,
    },
  },
  type: "object",
  required: [
    "dag_id",
    "dag_display_name",
    "is_paused",
    "is_active",
    "last_parsed_time",
    "last_expired",
    "default_view",
    "fileloc",
    "description",
    "timetable_summary",
    "timetable_description",
    "tags",
    "max_active_tasks",
    "max_active_runs",
    "max_consecutive_failed_dag_runs",
    "has_task_concurrency_limits",
    "has_import_errors",
    "next_dagrun",
    "next_dagrun_data_interval_start",
    "next_dagrun_data_interval_end",
    "next_dagrun_create_after",
    "owners",
    "file_token",
  ],
  title: "DAGResponse",
  description: "DAG serializer for responses.",
} as const;

export const $DAGRunClearBody = {
  properties: {
    dry_run: {
      type: "boolean",
      title: "Dry Run",
      default: true,
    },
  },
  type: "object",
  title: "DAGRunClearBody",
  description: "DAG Run serializer for clear endpoint body.",
} as const;

export const $DAGRunCollectionResponse = {
  properties: {
    dag_runs: {
      items: {
        $ref: "#/components/schemas/DAGRunResponse",
      },
      type: "array",
      title: "Dag Runs",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["dag_runs", "total_entries"],
  title: "DAGRunCollectionResponse",
  description: "DAG Run Collection serializer for responses.",
} as const;

export const $DAGRunPatchBody = {
  properties: {
    state: {
      anyOf: [
        {
          $ref: "#/components/schemas/DAGRunPatchStates",
        },
        {
          type: "null",
        },
      ],
    },
    note: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
        },
        {
          type: "null",
        },
      ],
      title: "Note",
    },
  },
  type: "object",
  title: "DAGRunPatchBody",
  description: "DAG Run Serializer for PATCH requests.",
} as const;

export const $DAGRunPatchStates = {
  type: "string",
  enum: ["queued", "success", "failed"],
  title: "DAGRunPatchStates",
  description: "Enum for DAG Run states when updating a DAG Run.",
} as const;

export const $DAGRunResponse = {
  properties: {
    dag_run_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Dag Run Id",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    logical_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Logical Date",
    },
    queued_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Queued At",
    },
    start_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date",
    },
    end_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date",
    },
    data_interval_start: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Data Interval Start",
    },
    data_interval_end: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Data Interval End",
    },
    last_scheduling_decision: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Scheduling Decision",
    },
    run_type: {
      $ref: "#/components/schemas/DagRunType",
    },
    state: {
      $ref: "#/components/schemas/DagRunState",
    },
    external_trigger: {
      type: "boolean",
      title: "External Trigger",
    },
    triggered_by: {
      $ref: "#/components/schemas/DagRunTriggeredByType",
    },
    conf: {
      type: "object",
      title: "Conf",
    },
    note: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Note",
    },
  },
  type: "object",
  required: [
    "dag_run_id",
    "dag_id",
    "logical_date",
    "queued_at",
    "start_date",
    "end_date",
    "data_interval_start",
    "data_interval_end",
    "last_scheduling_decision",
    "run_type",
    "state",
    "external_trigger",
    "triggered_by",
    "conf",
    "note",
  ],
  title: "DAGRunResponse",
  description: "DAG Run serializer for responses.",
} as const;

export const $DAGRunStates = {
  properties: {
    queued: {
      type: "integer",
      title: "Queued",
    },
    running: {
      type: "integer",
      title: "Running",
    },
    success: {
      type: "integer",
      title: "Success",
    },
    failed: {
      type: "integer",
      title: "Failed",
    },
  },
  type: "object",
  required: ["queued", "running", "success", "failed"],
  title: "DAGRunStates",
  description: "DAG Run States for responses.",
} as const;

export const $DAGRunTypes = {
  properties: {
    backfill: {
      type: "integer",
      title: "Backfill",
    },
    scheduled: {
      type: "integer",
      title: "Scheduled",
    },
    manual: {
      type: "integer",
      title: "Manual",
    },
    asset_triggered: {
      type: "integer",
      title: "Asset Triggered",
    },
  },
  type: "object",
  required: ["backfill", "scheduled", "manual", "asset_triggered"],
  title: "DAGRunTypes",
  description: "DAG Run Types for responses.",
} as const;

export const $DAGRunsBatchBody = {
  properties: {
    order_by: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Order By",
    },
    page_offset: {
      type: "integer",
      minimum: 0,
      title: "Page Offset",
      default: 0,
    },
    page_limit: {
      type: "integer",
      minimum: 0,
      title: "Page Limit",
      default: 100,
    },
    dag_ids: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Dag Ids",
    },
    states: {
      anyOf: [
        {
          items: {
            anyOf: [
              {
                $ref: "#/components/schemas/DagRunState",
              },
              {
                type: "null",
              },
            ],
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "States",
    },
    logical_date_gte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Logical Date Gte",
    },
    logical_date_lte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Logical Date Lte",
    },
    start_date_gte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date Gte",
    },
    start_date_lte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date Lte",
    },
    end_date_gte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date Gte",
    },
    end_date_lte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date Lte",
    },
  },
  type: "object",
  title: "DAGRunsBatchBody",
  description: "List DAG Runs body for batch endpoint.",
} as const;

export const $DAGSourceResponse = {
  properties: {
    content: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Content",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    version_number: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Version Number",
    },
  },
  type: "object",
  required: ["content", "dag_id", "version_number"],
  title: "DAGSourceResponse",
  description: "DAG Source serializer for responses.",
} as const;

export const $DAGTagCollectionResponse = {
  properties: {
    tags: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Tags",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["tags", "total_entries"],
  title: "DAGTagCollectionResponse",
  description: "DAG Tags Collection serializer for responses.",
} as const;

export const $DAGWarningCollectionResponse = {
  properties: {
    dag_warnings: {
      items: {
        $ref: "#/components/schemas/DAGWarningResponse",
      },
      type: "array",
      title: "Dag Warnings",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["dag_warnings", "total_entries"],
  title: "DAGWarningCollectionResponse",
  description: "DAG warning collection serializer for responses.",
} as const;

export const $DAGWarningResponse = {
  properties: {
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    warning_type: {
      $ref: "#/components/schemas/DagWarningType",
    },
    message: {
      type: "string",
      title: "Message",
    },
    timestamp: {
      type: "string",
      format: "date-time",
      title: "Timestamp",
    },
  },
  type: "object",
  required: ["dag_id", "warning_type", "message", "timestamp"],
  title: "DAGWarningResponse",
  description: "DAG Warning serializer for responses.",
} as const;

export const $DAGWithLatestDagRunsCollectionResponse = {
  properties: {
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
    dags: {
      items: {
        $ref: "#/components/schemas/DAGWithLatestDagRunsResponse",
      },
      type: "array",
      title: "Dags",
    },
  },
  type: "object",
  required: ["total_entries", "dags"],
  title: "DAGWithLatestDagRunsCollectionResponse",
  description: "DAG with latest dag runs collection response serializer.",
} as const;

export const $DAGWithLatestDagRunsResponse = {
  properties: {
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    dag_display_name: {
      type: "string",
      title: "Dag Display Name",
    },
    is_paused: {
      type: "boolean",
      title: "Is Paused",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
    },
    last_parsed_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Parsed Time",
    },
    last_expired: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Expired",
    },
    default_view: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Default View",
    },
    fileloc: {
      type: "string",
      title: "Fileloc",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    timetable_summary: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Timetable Summary",
    },
    timetable_description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Timetable Description",
    },
    tags: {
      items: {
        $ref: "#/components/schemas/DagTagPydantic",
      },
      type: "array",
      title: "Tags",
    },
    max_active_tasks: {
      type: "integer",
      title: "Max Active Tasks",
    },
    max_active_runs: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Max Active Runs",
    },
    max_consecutive_failed_dag_runs: {
      type: "integer",
      title: "Max Consecutive Failed Dag Runs",
    },
    has_task_concurrency_limits: {
      type: "boolean",
      title: "Has Task Concurrency Limits",
    },
    has_import_errors: {
      type: "boolean",
      title: "Has Import Errors",
    },
    next_dagrun: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun",
    },
    next_dagrun_data_interval_start: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun Data Interval Start",
    },
    next_dagrun_data_interval_end: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun Data Interval End",
    },
    next_dagrun_create_after: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Next Dagrun Create After",
    },
    owners: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Owners",
    },
    latest_dag_runs: {
      items: {
        $ref: "#/components/schemas/DAGRunResponse",
      },
      type: "array",
      title: "Latest Dag Runs",
    },
    file_token: {
      type: "string",
      title: "File Token",
      description: "Return file token.",
      readOnly: true,
    },
  },
  type: "object",
  required: [
    "dag_id",
    "dag_display_name",
    "is_paused",
    "is_active",
    "last_parsed_time",
    "last_expired",
    "default_view",
    "fileloc",
    "description",
    "timetable_summary",
    "timetable_description",
    "tags",
    "max_active_tasks",
    "max_active_runs",
    "max_consecutive_failed_dag_runs",
    "has_task_concurrency_limits",
    "has_import_errors",
    "next_dagrun",
    "next_dagrun_data_interval_start",
    "next_dagrun_data_interval_end",
    "next_dagrun_create_after",
    "owners",
    "latest_dag_runs",
    "file_token",
  ],
  title: "DAGWithLatestDagRunsResponse",
  description: "DAG with latest dag runs response serializer.",
} as const;

export const $DagProcessorInfoResponse = {
  properties: {
    status: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Status",
    },
    latest_dag_processor_heartbeat: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Latest Dag Processor Heartbeat",
    },
  },
  type: "object",
  required: ["status", "latest_dag_processor_heartbeat"],
  title: "DagProcessorInfoResponse",
  description: "DagProcessor info serializer for responses.",
} as const;

export const $DagRunAssetReference = {
  properties: {
    run_id: {
      type: "string",
      title: "Run Id",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    logical_date: {
      type: "string",
      format: "date-time",
      title: "Logical Date",
    },
    start_date: {
      type: "string",
      format: "date-time",
      title: "Start Date",
    },
    end_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date",
    },
    state: {
      type: "string",
      title: "State",
    },
    data_interval_start: {
      type: "string",
      format: "date-time",
      title: "Data Interval Start",
    },
    data_interval_end: {
      type: "string",
      format: "date-time",
      title: "Data Interval End",
    },
  },
  type: "object",
  required: [
    "run_id",
    "dag_id",
    "logical_date",
    "start_date",
    "end_date",
    "state",
    "data_interval_start",
    "data_interval_end",
  ],
  title: "DagRunAssetReference",
  description: "DAGRun serializer for asset responses.",
} as const;

export const $DagRunState = {
  type: "string",
  enum: ["queued", "running", "success", "failed"],
  title: "DagRunState",
  description: `All possible states that a DagRun can be in.

These are "shared" with TaskInstanceState in some parts of the code,
so please ensure that their values always match the ones with the
same name in TaskInstanceState.`,
} as const;

export const $DagRunTriggeredByType = {
  type: "string",
  enum: [
    "cli",
    "operator",
    "rest_api",
    "ui",
    "test",
    "timetable",
    "asset",
    "backfill",
  ],
  title: "DagRunTriggeredByType",
  description: "Class with TriggeredBy types for DagRun.",
} as const;

export const $DagRunType = {
  type: "string",
  enum: ["backfill", "scheduled", "manual", "asset_triggered"],
  title: "DagRunType",
  description: "Class with DagRun types.",
} as const;

export const $DagScheduleAssetReference = {
  properties: {
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
  },
  type: "object",
  required: ["dag_id", "created_at", "updated_at"],
  title: "DagScheduleAssetReference",
  description: "DAG schedule reference serializer for assets.",
} as const;

export const $DagStatsCollectionResponse = {
  properties: {
    dags: {
      items: {
        $ref: "#/components/schemas/DagStatsResponse",
      },
      type: "array",
      title: "Dags",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["dags", "total_entries"],
  title: "DagStatsCollectionResponse",
  description: "DAG Stats Collection serializer for responses.",
} as const;

export const $DagStatsResponse = {
  properties: {
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    stats: {
      items: {
        $ref: "#/components/schemas/DagStatsStateResponse",
      },
      type: "array",
      title: "Stats",
    },
  },
  type: "object",
  required: ["dag_id", "stats"],
  title: "DagStatsResponse",
  description: "DAG Stats serializer for responses.",
} as const;

export const $DagStatsStateResponse = {
  properties: {
    state: {
      $ref: "#/components/schemas/DagRunState",
    },
    count: {
      type: "integer",
      title: "Count",
    },
  },
  type: "object",
  required: ["state", "count"],
  title: "DagStatsStateResponse",
  description: "DagStatsState serializer for responses.",
} as const;

export const $DagTagPydantic = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
  },
  type: "object",
  required: ["name", "dag_id"],
  title: "DagTagPydantic",
  description:
    "Serializable representation of the DagTag ORM SqlAlchemyModel used by internal API.",
} as const;

export const $DagWarningType = {
  type: "string",
  enum: ["asset conflict", "non-existent pool"],
  title: "DagWarningType",
  description: `Enum for DAG warning types.

This is the set of allowable values for the \`\`warning_type\`\` field
in the DagWarning model.`,
} as const;

export const $EdgeResponse = {
  properties: {
    is_setup_teardown: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Setup Teardown",
    },
    label: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Label",
    },
    source_id: {
      type: "string",
      title: "Source Id",
    },
    target_id: {
      type: "string",
      title: "Target Id",
    },
  },
  type: "object",
  required: ["source_id", "target_id"],
  title: "EdgeResponse",
  description: "Edge serializer for responses.",
} as const;

export const $EventLogCollectionResponse = {
  properties: {
    event_logs: {
      items: {
        $ref: "#/components/schemas/EventLogResponse",
      },
      type: "array",
      title: "Event Logs",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["event_logs", "total_entries"],
  title: "EventLogCollectionResponse",
  description: "Event Log Collection Response.",
} as const;

export const $EventLogResponse = {
  properties: {
    event_log_id: {
      type: "integer",
      title: "Event Log Id",
    },
    when: {
      type: "string",
      format: "date-time",
      title: "When",
    },
    dag_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Dag Id",
    },
    task_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Task Id",
    },
    run_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Run Id",
    },
    map_index: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Map Index",
    },
    try_number: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Try Number",
    },
    event: {
      type: "string",
      title: "Event",
    },
    logical_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Logical Date",
    },
    owner: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Owner",
    },
    extra: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Extra",
    },
  },
  type: "object",
  required: [
    "event_log_id",
    "when",
    "dag_id",
    "task_id",
    "run_id",
    "map_index",
    "try_number",
    "event",
    "logical_date",
    "owner",
    "extra",
  ],
  title: "EventLogResponse",
  description: "Event Log Response.",
} as const;

export const $ExtraLinksResponse = {
  additionalProperties: {
    anyOf: [
      {
        type: "string",
      },
      {
        type: "null",
      },
    ],
  },
  type: "object",
  title: "ExtraLinksResponse",
  description: "Extra Links Response.",
} as const;

export const $FastAPIAppResponse = {
  properties: {
    app: {
      type: "string",
      title: "App",
    },
    url_prefix: {
      type: "string",
      title: "Url Prefix",
    },
    name: {
      type: "string",
      title: "Name",
    },
  },
  additionalProperties: true,
  type: "object",
  required: ["app", "url_prefix", "name"],
  title: "FastAPIAppResponse",
  description: "Serializer for Plugin FastAPI App responses.",
} as const;

export const $HTTPExceptionResponse = {
  properties: {
    detail: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "object",
        },
      ],
      title: "Detail",
    },
  },
  type: "object",
  required: ["detail"],
  title: "HTTPExceptionResponse",
  description: "HTTPException Model used for error response.",
} as const;

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: "#/components/schemas/ValidationError",
      },
      type: "array",
      title: "Detail",
    },
  },
  type: "object",
  title: "HTTPValidationError",
} as const;

export const $HealthInfoResponse = {
  properties: {
    metadatabase: {
      $ref: "#/components/schemas/BaseInfoResponse",
    },
    scheduler: {
      $ref: "#/components/schemas/SchedulerInfoResponse",
    },
    triggerer: {
      $ref: "#/components/schemas/TriggererInfoResponse",
    },
    dag_processor: {
      anyOf: [
        {
          $ref: "#/components/schemas/DagProcessorInfoResponse",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: ["metadatabase", "scheduler", "triggerer"],
  title: "HealthInfoResponse",
  description: "Health serializer for responses.",
} as const;

export const $HistoricalMetricDataResponse = {
  properties: {
    dag_run_types: {
      $ref: "#/components/schemas/DAGRunTypes",
    },
    dag_run_states: {
      $ref: "#/components/schemas/DAGRunStates",
    },
    task_instance_states: {
      $ref: "#/components/schemas/TaskInstanceStateCount",
    },
  },
  type: "object",
  required: ["dag_run_types", "dag_run_states", "task_instance_states"],
  title: "HistoricalMetricDataResponse",
  description: "Historical Metric Data serializer for responses.",
} as const;

export const $ImportErrorCollectionResponse = {
  properties: {
    import_errors: {
      items: {
        $ref: "#/components/schemas/ImportErrorResponse",
      },
      type: "array",
      title: "Import Errors",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["import_errors", "total_entries"],
  title: "ImportErrorCollectionResponse",
  description: "Import Error Collection Response.",
} as const;

export const $ImportErrorResponse = {
  properties: {
    import_error_id: {
      type: "integer",
      title: "Import Error Id",
    },
    timestamp: {
      type: "string",
      format: "date-time",
      title: "Timestamp",
    },
    filename: {
      type: "string",
      title: "Filename",
    },
    stack_trace: {
      type: "string",
      title: "Stack Trace",
    },
  },
  type: "object",
  required: ["import_error_id", "timestamp", "filename", "stack_trace"],
  title: "ImportErrorResponse",
  description: "Import Error Response.",
} as const;

export const $JobCollectionResponse = {
  properties: {
    jobs: {
      items: {
        $ref: "#/components/schemas/JobResponse",
      },
      type: "array",
      title: "Jobs",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["jobs", "total_entries"],
  title: "JobCollectionResponse",
  description: "Job Collection Response.",
} as const;

export const $JobResponse = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
    },
    dag_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Dag Id",
    },
    state: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "State",
    },
    job_type: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Job Type",
    },
    start_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date",
    },
    end_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date",
    },
    latest_heartbeat: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Latest Heartbeat",
    },
    executor_class: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Executor Class",
    },
    hostname: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Hostname",
    },
    unixname: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Unixname",
    },
  },
  type: "object",
  required: [
    "id",
    "dag_id",
    "state",
    "job_type",
    "start_date",
    "end_date",
    "latest_heartbeat",
    "executor_class",
    "hostname",
    "unixname",
  ],
  title: "JobResponse",
  description: "Job serializer for responses.",
} as const;

export const $NodeResponse = {
  properties: {
    children: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/NodeResponse",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Children",
    },
    id: {
      type: "string",
      title: "Id",
    },
    is_mapped: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Mapped",
    },
    label: {
      type: "string",
      title: "Label",
    },
    tooltip: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Tooltip",
    },
    setup_teardown_type: {
      anyOf: [
        {
          type: "string",
          enum: ["setup", "teardown"],
        },
        {
          type: "null",
        },
      ],
      title: "Setup Teardown Type",
    },
    type: {
      type: "string",
      enum: ["join", "task", "asset_condition"],
      title: "Type",
    },
    operator: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Operator",
    },
  },
  type: "object",
  required: ["id", "label", "type"],
  title: "NodeResponse",
  description: "Node serializer for responses.",
} as const;

export const $PatchTaskInstanceBody = {
  properties: {
    dry_run: {
      type: "boolean",
      title: "Dry Run",
      default: true,
    },
    new_state: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "New State",
    },
    note: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
        },
        {
          type: "null",
        },
      ],
      title: "Note",
    },
    include_upstream: {
      type: "boolean",
      title: "Include Upstream",
      default: false,
    },
    include_downstream: {
      type: "boolean",
      title: "Include Downstream",
      default: false,
    },
    include_future: {
      type: "boolean",
      title: "Include Future",
      default: false,
    },
    include_past: {
      type: "boolean",
      title: "Include Past",
      default: false,
    },
  },
  type: "object",
  title: "PatchTaskInstanceBody",
  description: "Request body for Clear Task Instances endpoint.",
} as const;

export const $PluginCollectionResponse = {
  properties: {
    plugins: {
      items: {
        $ref: "#/components/schemas/PluginResponse",
      },
      type: "array",
      title: "Plugins",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["plugins", "total_entries"],
  title: "PluginCollectionResponse",
  description: "Plugin Collection serializer.",
} as const;

export const $PluginResponse = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    macros: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Macros",
    },
    flask_blueprints: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Flask Blueprints",
    },
    fastapi_apps: {
      items: {
        $ref: "#/components/schemas/FastAPIAppResponse",
      },
      type: "array",
      title: "Fastapi Apps",
    },
    appbuilder_views: {
      items: {
        $ref: "#/components/schemas/AppBuilderViewResponse",
      },
      type: "array",
      title: "Appbuilder Views",
    },
    appbuilder_menu_items: {
      items: {
        $ref: "#/components/schemas/AppBuilderMenuItemResponse",
      },
      type: "array",
      title: "Appbuilder Menu Items",
    },
    global_operator_extra_links: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Global Operator Extra Links",
    },
    operator_extra_links: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Operator Extra Links",
    },
    source: {
      type: "string",
      title: "Source",
    },
    ti_deps: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Ti Deps",
    },
    listeners: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Listeners",
    },
    timetables: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Timetables",
    },
  },
  type: "object",
  required: [
    "name",
    "macros",
    "flask_blueprints",
    "fastapi_apps",
    "appbuilder_views",
    "appbuilder_menu_items",
    "global_operator_extra_links",
    "operator_extra_links",
    "source",
    "ti_deps",
    "listeners",
    "timetables",
  ],
  title: "PluginResponse",
  description: "Plugin serializer.",
} as const;

export const $PoolCollectionResponse = {
  properties: {
    pools: {
      items: {
        $ref: "#/components/schemas/PoolResponse",
      },
      type: "array",
      title: "Pools",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["pools", "total_entries"],
  title: "PoolCollectionResponse",
  description: "Pool Collection serializer for responses.",
} as const;

export const $PoolPatchBody = {
  properties: {
    pool: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Pool",
    },
    slots: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Slots",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    include_deferred: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Include Deferred",
    },
  },
  type: "object",
  title: "PoolPatchBody",
  description: "Pool serializer for patch bodies.",
} as const;

export const $PoolPostBody = {
  properties: {
    name: {
      type: "string",
      maxLength: 256,
      title: "Name",
    },
    slots: {
      type: "integer",
      title: "Slots",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    include_deferred: {
      type: "boolean",
      title: "Include Deferred",
      default: false,
    },
  },
  type: "object",
  required: ["name", "slots"],
  title: "PoolPostBody",
  description: "Pool serializer for post bodies.",
} as const;

export const $PoolPostBulkBody = {
  properties: {
    pools: {
      items: {
        $ref: "#/components/schemas/PoolPostBody",
      },
      type: "array",
      title: "Pools",
    },
  },
  type: "object",
  required: ["pools"],
  title: "PoolPostBulkBody",
  description: "Pools serializer for post bodies.",
} as const;

export const $PoolResponse = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    slots: {
      type: "integer",
      title: "Slots",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    include_deferred: {
      type: "boolean",
      title: "Include Deferred",
    },
    occupied_slots: {
      type: "integer",
      title: "Occupied Slots",
    },
    running_slots: {
      type: "integer",
      title: "Running Slots",
    },
    queued_slots: {
      type: "integer",
      title: "Queued Slots",
    },
    scheduled_slots: {
      type: "integer",
      title: "Scheduled Slots",
    },
    open_slots: {
      type: "integer",
      title: "Open Slots",
    },
    deferred_slots: {
      type: "integer",
      title: "Deferred Slots",
    },
  },
  type: "object",
  required: [
    "name",
    "slots",
    "description",
    "include_deferred",
    "occupied_slots",
    "running_slots",
    "queued_slots",
    "scheduled_slots",
    "open_slots",
    "deferred_slots",
  ],
  title: "PoolResponse",
  description: "Pool serializer for responses.",
} as const;

export const $ProviderCollectionResponse = {
  properties: {
    providers: {
      items: {
        $ref: "#/components/schemas/ProviderResponse",
      },
      type: "array",
      title: "Providers",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["providers", "total_entries"],
  title: "ProviderCollectionResponse",
  description: "Provider Collection serializer for responses.",
} as const;

export const $ProviderResponse = {
  properties: {
    package_name: {
      type: "string",
      title: "Package Name",
    },
    description: {
      type: "string",
      title: "Description",
    },
    version: {
      type: "string",
      title: "Version",
    },
  },
  type: "object",
  required: ["package_name", "description", "version"],
  title: "ProviderResponse",
  description: "Provider serializer for responses.",
} as const;

export const $QueuedEventCollectionResponse = {
  properties: {
    queued_events: {
      items: {
        $ref: "#/components/schemas/QueuedEventResponse",
      },
      type: "array",
      title: "Queued Events",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["queued_events", "total_entries"],
  title: "QueuedEventCollectionResponse",
  description: "Queued Event Collection serializer for responses.",
} as const;

export const $QueuedEventResponse = {
  properties: {
    uri: {
      type: "string",
      title: "Uri",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
  },
  type: "object",
  required: ["uri", "dag_id", "created_at"],
  title: "QueuedEventResponse",
  description: "Queued Event serializer for responses..",
} as const;

export const $ReprocessBehavior = {
  type: "string",
  enum: ["failed", "completed", "none"],
  title: "ReprocessBehavior",
  description: `Internal enum for setting reprocess behavior in a backfill.

:meta private:`,
} as const;

export const $SchedulerInfoResponse = {
  properties: {
    status: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Status",
    },
    latest_scheduler_heartbeat: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Latest Scheduler Heartbeat",
    },
  },
  type: "object",
  required: ["status", "latest_scheduler_heartbeat"],
  title: "SchedulerInfoResponse",
  description: "Scheduler info serializer for responses.",
} as const;

export const $StructureDataResponse = {
  properties: {
    edges: {
      items: {
        $ref: "#/components/schemas/EdgeResponse",
      },
      type: "array",
      title: "Edges",
    },
    nodes: {
      items: {
        $ref: "#/components/schemas/NodeResponse",
      },
      type: "array",
      title: "Nodes",
    },
    arrange: {
      type: "string",
      enum: ["BT", "LR", "RL", "TB"],
      title: "Arrange",
    },
  },
  type: "object",
  required: ["edges", "nodes", "arrange"],
  title: "StructureDataResponse",
  description: "Structure Data serializer for responses.",
} as const;

export const $TaskCollectionResponse = {
  properties: {
    tasks: {
      items: {
        $ref: "#/components/schemas/TaskResponse",
      },
      type: "array",
      title: "Tasks",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["tasks", "total_entries"],
  title: "TaskCollectionResponse",
  description: "Task collection serializer for responses.",
} as const;

export const $TaskDependencyCollectionResponse = {
  properties: {
    dependencies: {
      items: {
        $ref: "#/components/schemas/TaskDependencyResponse",
      },
      type: "array",
      title: "Dependencies",
    },
  },
  type: "object",
  required: ["dependencies"],
  title: "TaskDependencyCollectionResponse",
  description:
    "Task scheduling dependencies collection serializer for responses.",
} as const;

export const $TaskDependencyResponse = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    reason: {
      type: "string",
      title: "Reason",
    },
  },
  type: "object",
  required: ["name", "reason"],
  title: "TaskDependencyResponse",
  description: "Task Dependency serializer for responses.",
} as const;

export const $TaskInstanceCollectionResponse = {
  properties: {
    task_instances: {
      items: {
        $ref: "#/components/schemas/TaskInstanceResponse",
      },
      type: "array",
      title: "Task Instances",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["task_instances", "total_entries"],
  title: "TaskInstanceCollectionResponse",
  description: "Task Instance Collection serializer for responses.",
} as const;

export const $TaskInstanceHistoryCollectionResponse = {
  properties: {
    task_instances: {
      items: {
        $ref: "#/components/schemas/TaskInstanceHistoryResponse",
      },
      type: "array",
      title: "Task Instances",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["task_instances", "total_entries"],
  title: "TaskInstanceHistoryCollectionResponse",
  description: "TaskInstanceHistory Collection serializer for responses.",
} as const;

export const $TaskInstanceHistoryResponse = {
  properties: {
    task_id: {
      type: "string",
      title: "Task Id",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    dag_run_id: {
      type: "string",
      title: "Dag Run Id",
    },
    map_index: {
      type: "integer",
      title: "Map Index",
    },
    start_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date",
    },
    end_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date",
    },
    duration: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Duration",
    },
    state: {
      anyOf: [
        {
          $ref: "#/components/schemas/TaskInstanceState",
        },
        {
          type: "null",
        },
      ],
    },
    try_number: {
      type: "integer",
      title: "Try Number",
    },
    max_tries: {
      type: "integer",
      title: "Max Tries",
    },
    task_display_name: {
      type: "string",
      title: "Task Display Name",
    },
    hostname: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Hostname",
    },
    unixname: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Unixname",
    },
    pool: {
      type: "string",
      title: "Pool",
    },
    pool_slots: {
      type: "integer",
      title: "Pool Slots",
    },
    queue: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Queue",
    },
    priority_weight: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Priority Weight",
    },
    operator: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Operator",
    },
    queued_when: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Queued When",
    },
    pid: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Pid",
    },
    executor: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Executor",
    },
    executor_config: {
      type: "string",
      title: "Executor Config",
    },
  },
  type: "object",
  required: [
    "task_id",
    "dag_id",
    "dag_run_id",
    "map_index",
    "start_date",
    "end_date",
    "duration",
    "state",
    "try_number",
    "max_tries",
    "task_display_name",
    "hostname",
    "unixname",
    "pool",
    "pool_slots",
    "queue",
    "priority_weight",
    "operator",
    "queued_when",
    "pid",
    "executor",
    "executor_config",
  ],
  title: "TaskInstanceHistoryResponse",
  description: "TaskInstanceHistory serializer for responses.",
} as const;

export const $TaskInstanceReferenceCollectionResponse = {
  properties: {
    task_instances: {
      items: {
        $ref: "#/components/schemas/TaskInstanceReferenceResponse",
      },
      type: "array",
      title: "Task Instances",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["task_instances", "total_entries"],
  title: "TaskInstanceReferenceCollectionResponse",
  description: "Task Instance Reference collection serializer for responses.",
} as const;

export const $TaskInstanceReferenceResponse = {
  properties: {
    task_id: {
      type: "string",
      title: "Task Id",
    },
    dag_run_id: {
      type: "string",
      title: "Dag Run Id",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
  },
  type: "object",
  required: ["task_id", "dag_run_id", "dag_id"],
  title: "TaskInstanceReferenceResponse",
  description: "Task Instance Reference serializer for responses.",
} as const;

export const $TaskInstanceResponse = {
  properties: {
    id: {
      type: "string",
      title: "Id",
    },
    task_id: {
      type: "string",
      title: "Task Id",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    dag_run_id: {
      type: "string",
      title: "Dag Run Id",
    },
    map_index: {
      type: "integer",
      title: "Map Index",
    },
    logical_date: {
      type: "string",
      format: "date-time",
      title: "Logical Date",
    },
    start_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date",
    },
    end_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date",
    },
    duration: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Duration",
    },
    state: {
      anyOf: [
        {
          $ref: "#/components/schemas/TaskInstanceState",
        },
        {
          type: "null",
        },
      ],
    },
    try_number: {
      type: "integer",
      title: "Try Number",
    },
    max_tries: {
      type: "integer",
      title: "Max Tries",
    },
    task_display_name: {
      type: "string",
      title: "Task Display Name",
    },
    hostname: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Hostname",
    },
    unixname: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Unixname",
    },
    pool: {
      type: "string",
      title: "Pool",
    },
    pool_slots: {
      type: "integer",
      title: "Pool Slots",
    },
    queue: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Queue",
    },
    priority_weight: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Priority Weight",
    },
    operator: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Operator",
    },
    queued_when: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Queued When",
    },
    pid: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Pid",
    },
    executor: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Executor",
    },
    executor_config: {
      type: "string",
      title: "Executor Config",
    },
    note: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Note",
    },
    rendered_map_index: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Rendered Map Index",
    },
    rendered_fields: {
      type: "object",
      title: "Rendered Fields",
      default: {},
    },
    trigger: {
      anyOf: [
        {
          $ref: "#/components/schemas/TriggerResponse",
        },
        {
          type: "null",
        },
      ],
    },
    triggerer_job: {
      anyOf: [
        {
          $ref: "#/components/schemas/JobResponse",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: [
    "id",
    "task_id",
    "dag_id",
    "dag_run_id",
    "map_index",
    "logical_date",
    "start_date",
    "end_date",
    "duration",
    "state",
    "try_number",
    "max_tries",
    "task_display_name",
    "hostname",
    "unixname",
    "pool",
    "pool_slots",
    "queue",
    "priority_weight",
    "operator",
    "queued_when",
    "pid",
    "executor",
    "executor_config",
    "note",
    "rendered_map_index",
    "trigger",
    "triggerer_job",
  ],
  title: "TaskInstanceResponse",
  description: "TaskInstance serializer for responses.",
} as const;

export const $TaskInstanceState = {
  type: "string",
  enum: [
    "removed",
    "scheduled",
    "queued",
    "running",
    "success",
    "restarting",
    "failed",
    "up_for_retry",
    "up_for_reschedule",
    "upstream_failed",
    "skipped",
    "deferred",
  ],
  title: "TaskInstanceState",
  description: `All possible states that a Task Instance can be in.

Note that None is also allowed, so always use this in a type hint with Optional.`,
} as const;

export const $TaskInstanceStateCount = {
  properties: {
    no_status: {
      type: "integer",
      title: "No Status",
    },
    removed: {
      type: "integer",
      title: "Removed",
    },
    scheduled: {
      type: "integer",
      title: "Scheduled",
    },
    queued: {
      type: "integer",
      title: "Queued",
    },
    running: {
      type: "integer",
      title: "Running",
    },
    success: {
      type: "integer",
      title: "Success",
    },
    restarting: {
      type: "integer",
      title: "Restarting",
    },
    failed: {
      type: "integer",
      title: "Failed",
    },
    up_for_retry: {
      type: "integer",
      title: "Up For Retry",
    },
    up_for_reschedule: {
      type: "integer",
      title: "Up For Reschedule",
    },
    upstream_failed: {
      type: "integer",
      title: "Upstream Failed",
    },
    skipped: {
      type: "integer",
      title: "Skipped",
    },
    deferred: {
      type: "integer",
      title: "Deferred",
    },
  },
  type: "object",
  required: [
    "no_status",
    "removed",
    "scheduled",
    "queued",
    "running",
    "success",
    "restarting",
    "failed",
    "up_for_retry",
    "up_for_reschedule",
    "upstream_failed",
    "skipped",
    "deferred",
  ],
  title: "TaskInstanceStateCount",
  description: "TaskInstance serializer for responses.",
} as const;

export const $TaskInstancesBatchBody = {
  properties: {
    dag_ids: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Dag Ids",
    },
    dag_run_ids: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Dag Run Ids",
    },
    task_ids: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Task Ids",
    },
    state: {
      anyOf: [
        {
          items: {
            anyOf: [
              {
                $ref: "#/components/schemas/TaskInstanceState",
              },
              {
                type: "null",
              },
            ],
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "State",
    },
    logical_date_gte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Logical Date Gte",
    },
    logical_date_lte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Logical Date Lte",
    },
    start_date_gte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date Gte",
    },
    start_date_lte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date Lte",
    },
    end_date_gte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date Gte",
    },
    end_date_lte: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date Lte",
    },
    duration_gte: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Duration Gte",
    },
    duration_lte: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Duration Lte",
    },
    pool: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Pool",
    },
    queue: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Queue",
    },
    executor: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Executor",
    },
    page_offset: {
      type: "integer",
      minimum: 0,
      title: "Page Offset",
      default: 0,
    },
    page_limit: {
      type: "integer",
      minimum: 0,
      title: "Page Limit",
      default: 100,
    },
    order_by: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Order By",
    },
  },
  type: "object",
  title: "TaskInstancesBatchBody",
  description: "Task Instance body for get batch.",
} as const;

export const $TaskInstancesLogResponse = {
  properties: {
    content: {
      type: "string",
      title: "Content",
    },
    continuation_token: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Continuation Token",
    },
  },
  type: "object",
  required: ["content", "continuation_token"],
  title: "TaskInstancesLogResponse",
  description: "Log serializer for responses.",
} as const;

export const $TaskOutletAssetReference = {
  properties: {
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    task_id: {
      type: "string",
      title: "Task Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
  },
  type: "object",
  required: ["dag_id", "task_id", "created_at", "updated_at"],
  title: "TaskOutletAssetReference",
  description: "Task outlet reference serializer for assets.",
} as const;

export const $TaskResponse = {
  properties: {
    task_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Task Id",
    },
    task_display_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Task Display Name",
    },
    owner: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Owner",
    },
    start_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Date",
    },
    end_date: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End Date",
    },
    trigger_rule: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Trigger Rule",
    },
    depends_on_past: {
      type: "boolean",
      title: "Depends On Past",
    },
    wait_for_downstream: {
      type: "boolean",
      title: "Wait For Downstream",
    },
    retries: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Retries",
    },
    queue: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Queue",
    },
    pool: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Pool",
    },
    pool_slots: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Pool Slots",
    },
    execution_timeout: {
      anyOf: [
        {
          $ref: "#/components/schemas/TimeDelta",
        },
        {
          type: "null",
        },
      ],
    },
    retry_delay: {
      anyOf: [
        {
          $ref: "#/components/schemas/TimeDelta",
        },
        {
          type: "null",
        },
      ],
    },
    retry_exponential_backoff: {
      type: "boolean",
      title: "Retry Exponential Backoff",
    },
    priority_weight: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Priority Weight",
    },
    weight_rule: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Weight Rule",
    },
    ui_color: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Ui Color",
    },
    ui_fgcolor: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Ui Fgcolor",
    },
    template_fields: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Template Fields",
    },
    downstream_task_ids: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Downstream Task Ids",
    },
    doc_md: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Doc Md",
    },
    operator_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Operator Name",
    },
    params: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Params",
    },
    class_ref: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Class Ref",
    },
    is_mapped: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Mapped",
    },
    extra_links: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Extra Links",
      description: "Extract and return extra_links.",
      readOnly: true,
    },
  },
  type: "object",
  required: [
    "task_id",
    "task_display_name",
    "owner",
    "start_date",
    "end_date",
    "trigger_rule",
    "depends_on_past",
    "wait_for_downstream",
    "retries",
    "queue",
    "pool",
    "pool_slots",
    "execution_timeout",
    "retry_delay",
    "retry_exponential_backoff",
    "priority_weight",
    "weight_rule",
    "ui_color",
    "ui_fgcolor",
    "template_fields",
    "downstream_task_ids",
    "doc_md",
    "operator_name",
    "params",
    "class_ref",
    "is_mapped",
    "extra_links",
  ],
  title: "TaskResponse",
  description: "Task serializer for responses.",
} as const;

export const $TimeDelta = {
  properties: {
    __type: {
      type: "string",
      title: "Type",
      default: "TimeDelta",
    },
    days: {
      type: "integer",
      title: "Days",
    },
    seconds: {
      type: "integer",
      title: "Seconds",
    },
    microseconds: {
      type: "integer",
      title: "Microseconds",
    },
  },
  type: "object",
  required: ["days", "seconds", "microseconds"],
  title: "TimeDelta",
  description:
    "TimeDelta can be used to interact with datetime.timedelta objects.",
} as const;

export const $TriggerDAGRunPostBody = {
  properties: {
    dag_run_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Dag Run Id",
    },
    data_interval_start: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Data Interval Start",
    },
    data_interval_end: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Data Interval End",
    },
    conf: {
      type: "object",
      title: "Conf",
    },
    note: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Note",
    },
  },
  type: "object",
  title: "TriggerDAGRunPostBody",
  description: "Trigger DAG Run Serializer for POST body.",
} as const;

export const $TriggerResponse = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
    },
    classpath: {
      type: "string",
      title: "Classpath",
    },
    kwargs: {
      type: "string",
      title: "Kwargs",
    },
    created_date: {
      type: "string",
      format: "date-time",
      title: "Created Date",
    },
    triggerer_id: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Triggerer Id",
    },
  },
  type: "object",
  required: ["id", "classpath", "kwargs", "created_date", "triggerer_id"],
  title: "TriggerResponse",
  description: "Trigger serializer for responses.",
} as const;

export const $TriggererInfoResponse = {
  properties: {
    status: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Status",
    },
    latest_triggerer_heartbeat: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Latest Triggerer Heartbeat",
    },
  },
  type: "object",
  required: ["status", "latest_triggerer_heartbeat"],
  title: "TriggererInfoResponse",
  description: "Triggerer info serializer for responses.",
} as const;

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "integer",
          },
        ],
      },
      type: "array",
      title: "Location",
    },
    msg: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Error Type",
    },
  },
  type: "object",
  required: ["loc", "msg", "type"],
  title: "ValidationError",
} as const;

export const $VariableBody = {
  properties: {
    key: {
      type: "string",
      title: "Key",
    },
    value: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Value",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
  },
  type: "object",
  required: ["key", "value"],
  title: "VariableBody",
  description: "Variable serializer for bodies.",
} as const;

export const $VariableCollectionResponse = {
  properties: {
    variables: {
      items: {
        $ref: "#/components/schemas/VariableResponse",
      },
      type: "array",
      title: "Variables",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["variables", "total_entries"],
  title: "VariableCollectionResponse",
  description: "Variable Collection serializer for responses.",
} as const;

export const $VariableResponse = {
  properties: {
    key: {
      type: "string",
      title: "Key",
    },
    value: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Value",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
  },
  type: "object",
  required: ["key", "value", "description"],
  title: "VariableResponse",
  description: "Variable serializer for responses.",
} as const;

export const $VersionInfo = {
  properties: {
    version: {
      type: "string",
      title: "Version",
    },
    git_version: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Git Version",
    },
  },
  type: "object",
  required: ["version", "git_version"],
  title: "VersionInfo",
  description: "Version information serializer for responses.",
} as const;

export const $XComCollection = {
  properties: {
    xcom_entries: {
      items: {
        $ref: "#/components/schemas/XComResponse",
      },
      type: "array",
      title: "Xcom Entries",
    },
    total_entries: {
      type: "integer",
      title: "Total Entries",
    },
  },
  type: "object",
  required: ["xcom_entries", "total_entries"],
  title: "XComCollection",
  description: "List of XCom items.",
} as const;

export const $XComResponse = {
  properties: {
    key: {
      type: "string",
      title: "Key",
    },
    timestamp: {
      type: "string",
      format: "date-time",
      title: "Timestamp",
    },
    logical_date: {
      type: "string",
      format: "date-time",
      title: "Logical Date",
    },
    map_index: {
      type: "integer",
      title: "Map Index",
    },
    task_id: {
      type: "string",
      title: "Task Id",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
  },
  type: "object",
  required: [
    "key",
    "timestamp",
    "logical_date",
    "map_index",
    "task_id",
    "dag_id",
  ],
  title: "XComResponse",
  description: "Serializer for a xcom item.",
} as const;

export const $XComResponseNative = {
  properties: {
    key: {
      type: "string",
      title: "Key",
    },
    timestamp: {
      type: "string",
      format: "date-time",
      title: "Timestamp",
    },
    logical_date: {
      type: "string",
      format: "date-time",
      title: "Logical Date",
    },
    map_index: {
      type: "integer",
      title: "Map Index",
    },
    task_id: {
      type: "string",
      title: "Task Id",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    value: {
      title: "Value",
    },
  },
  type: "object",
  required: [
    "key",
    "timestamp",
    "logical_date",
    "map_index",
    "task_id",
    "dag_id",
    "value",
  ],
  title: "XComResponseNative",
  description: "XCom response serializer with native return type.",
} as const;

export const $XComResponseString = {
  properties: {
    key: {
      type: "string",
      title: "Key",
    },
    timestamp: {
      type: "string",
      format: "date-time",
      title: "Timestamp",
    },
    logical_date: {
      type: "string",
      format: "date-time",
      title: "Logical Date",
    },
    map_index: {
      type: "integer",
      title: "Map Index",
    },
    task_id: {
      type: "string",
      title: "Task Id",
    },
    dag_id: {
      type: "string",
      title: "Dag Id",
    },
    value: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Value",
    },
  },
  type: "object",
  required: [
    "key",
    "timestamp",
    "logical_date",
    "map_index",
    "task_id",
    "dag_id",
    "value",
  ],
  title: "XComResponseString",
  description: "XCom response serializer with string return type.",
} as const;
