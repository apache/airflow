# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# generated by datamodel-codegen:
#   filename:  http://0.0.0.0:9091/openapi.json
#   version:   0.26.5

from __future__ import annotations

from datetime import datetime, timedelta
from enum import Enum
from typing import Annotated, Any, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class AppBuilderMenuItemResponse(BaseModel):
    """
    Serializer for AppBuilder Menu Item responses.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    name: Annotated[str, Field(title="Name")]
    href: Annotated[Optional[str], Field(title="Href")] = None
    category: Annotated[Optional[str], Field(title="Category")] = None


class AppBuilderViewResponse(BaseModel):
    """
    Serializer for AppBuilder View responses.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    name: Annotated[Optional[str], Field(title="Name")] = None
    category: Annotated[Optional[str], Field(title="Category")] = None
    view: Annotated[Optional[str], Field(title="View")] = None
    label: Annotated[Optional[str], Field(title="Label")] = None


class AssetAliasResponse(BaseModel):
    """
    Asset alias serializer for responses.
    """

    id: Annotated[int, Field(title="Id")]
    name: Annotated[str, Field(title="Name")]
    group: Annotated[str, Field(title="Group")]


class BaseInfoResponse(BaseModel):
    """
    Base info serializer for responses.
    """

    status: Annotated[Optional[str], Field(title="Status")] = None


class BulkAction(str, Enum):
    """
    Bulk Action to be performed on the used model.
    """

    CREATE = "create"
    DELETE = "delete"
    UPDATE = "update"


class BulkActionNotOnExistence(str, Enum):
    """
    Bulk Action to be taken if the entity does not exists.
    """

    FAIL = "fail"
    SKIP = "skip"


class BulkActionOnExistence(str, Enum):
    """
    Bulk Action to be taken if the entity already exists or not.
    """

    FAIL = "fail"
    SKIP = "skip"
    OVERWRITE = "overwrite"


class ClearTaskInstancesBody(BaseModel):
    """
    Request body for Clear Task Instances endpoint.
    """

    dry_run: Annotated[Optional[bool], Field(title="Dry Run")] = True
    start_date: Annotated[Optional[datetime], Field(title="Start Date")] = None
    end_date: Annotated[Optional[datetime], Field(title="End Date")] = None
    only_failed: Annotated[Optional[bool], Field(title="Only Failed")] = True
    only_running: Annotated[Optional[bool], Field(title="Only Running")] = False
    reset_dag_runs: Annotated[Optional[bool], Field(title="Reset Dag Runs")] = True
    task_ids: Annotated[Optional[list[str]], Field(title="Task Ids")] = None
    dag_run_id: Annotated[Optional[str], Field(title="Dag Run Id")] = None
    include_upstream: Annotated[Optional[bool], Field(title="Include Upstream")] = False
    include_downstream: Annotated[Optional[bool], Field(title="Include Downstream")] = False
    include_future: Annotated[Optional[bool], Field(title="Include Future")] = False
    include_past: Annotated[Optional[bool], Field(title="Include Past")] = False


class Value(RootModel[list]):
    root: Annotated[list, Field(max_length=2, min_length=2, title="Value")]


class ConfigOption(BaseModel):
    """
    Config option.
    """

    key: Annotated[str, Field(title="Key")]
    value: Annotated[Union[str, Value], Field(title="Value")]


class ConfigSection(BaseModel):
    """
    Config Section Schema.
    """

    name: Annotated[str, Field(title="Name")]
    options: Annotated[list[ConfigOption], Field(title="Options")]


class ConnectionBody(BaseModel):
    """
    Connection Serializer for requests body.
    """

    connection_id: Annotated[str, Field(max_length=200, pattern="^[\\w.-]+$", title="Connection Id")]
    conn_type: Annotated[str, Field(title="Conn Type")]
    description: Annotated[Optional[str], Field(title="Description")] = None
    host: Annotated[Optional[str], Field(title="Host")] = None
    login: Annotated[Optional[str], Field(title="Login")] = None
    schema_: Annotated[Optional[str], Field(alias="schema", title="Schema")] = None
    port: Annotated[Optional[int], Field(title="Port")] = None
    password: Annotated[Optional[str], Field(title="Password")] = None
    extra: Annotated[Optional[str], Field(title="Extra")] = None


class ConnectionBulkActionResponse(BaseModel):
    """
    Serializer for individual bulk action responses.

    Represents the outcome of a single bulk operation (create, update, or delete).
    The response includes a list of successful connection_ids and any errors encountered during the operation.
    This structure helps users understand which key actions succeeded and which failed.
    """

    success: Annotated[
        Optional[list[str]],
        Field(description="A list of connection_ids representing successful operations.", title="Success"),
    ] = None
    errors: Annotated[
        Optional[list[dict[str, Any]]],
        Field(
            description="A list of errors encountered during the operation, each containing details about the issue.",
            title="Errors",
        ),
    ] = None


class ConnectionBulkCreateAction(BaseModel):
    """
    Bulk Create Variable serializer for request bodies.
    """

    action: Optional[BulkAction] = "create"
    connections: Annotated[
        list[ConnectionBody], Field(description="A list of connections to be created.", title="Connections")
    ]
    action_on_existence: Optional[BulkActionOnExistence] = "fail"


class ConnectionBulkDeleteAction(BaseModel):
    """
    Bulk Delete Connection serializer for request bodies.
    """

    action: Optional[BulkAction] = "delete"
    connection_ids: Annotated[
        list[str], Field(description="A list of connection IDs to be deleted.", title="Connection Ids")
    ]
    action_on_non_existence: Optional[BulkActionNotOnExistence] = "fail"


class ConnectionBulkResponse(BaseModel):
    """
    Serializer for responses to bulk connection operations.

    This represents the results of create, update, and delete actions performed on connections in bulk.
    Each action (if requested) is represented as a field containing details about successful connection_ids and any encountered errors.
    Fields are populated in the response only if the respective action was part of the request, else are set None.
    """

    create: Annotated[
        Optional[ConnectionBulkActionResponse],
        Field(
            description="Details of the bulk create operation, including successful connection_ids and errors."
        ),
    ] = None
    update: Annotated[
        Optional[ConnectionBulkActionResponse],
        Field(
            description="Details of the bulk update operation, including successful connection_ids and errors."
        ),
    ] = None
    delete: Annotated[
        Optional[ConnectionBulkActionResponse],
        Field(
            description="Details of the bulk delete operation, including successful connection_ids and errors."
        ),
    ] = None


class ConnectionBulkUpdateAction(BaseModel):
    """
    Bulk Update Connection serializer for request bodies.
    """

    action: Optional[BulkAction] = "update"
    connections: Annotated[
        list[ConnectionBody], Field(description="A list of connections to be updated.", title="Connections")
    ]
    action_on_non_existence: Optional[BulkActionNotOnExistence] = "fail"


class ConnectionResponse(BaseModel):
    """
    Connection serializer for responses.
    """

    connection_id: Annotated[str, Field(title="Connection Id")]
    conn_type: Annotated[str, Field(title="Conn Type")]
    description: Annotated[Optional[str], Field(title="Description")] = None
    host: Annotated[Optional[str], Field(title="Host")] = None
    login: Annotated[Optional[str], Field(title="Login")] = None
    schema_: Annotated[Optional[str], Field(alias="schema", title="Schema")] = None
    port: Annotated[Optional[int], Field(title="Port")] = None
    password: Annotated[Optional[str], Field(title="Password")] = None
    extra: Annotated[Optional[str], Field(title="Extra")] = None


class ConnectionTestResponse(BaseModel):
    """
    Connection Test serializer for responses.
    """

    status: Annotated[bool, Field(title="Status")]
    message: Annotated[str, Field(title="Message")]


class CreateAssetEventsBody(BaseModel):
    """
    Create asset events request.
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    asset_id: Annotated[int, Field(title="Asset Id")]
    extra: Annotated[Optional[dict[str, Any]], Field(title="Extra")] = None


class DAGPatchBody(BaseModel):
    """
    Dag Serializer for updatable bodies.
    """

    is_paused: Annotated[bool, Field(title="Is Paused")]


class DAGRunClearBody(BaseModel):
    """
    DAG Run serializer for clear endpoint body.
    """

    dry_run: Annotated[Optional[bool], Field(title="Dry Run")] = True
    only_failed: Annotated[Optional[bool], Field(title="Only Failed")] = False


class Note(RootModel[str]):
    root: Annotated[str, Field(max_length=1000, title="Note")]


class DAGRunPatchStates(str, Enum):
    """
    Enum for DAG Run states when updating a DAG Run.
    """

    QUEUED = "queued"
    SUCCESS = "success"
    FAILED = "failed"


class DAGSourceResponse(BaseModel):
    """
    DAG Source serializer for responses.
    """

    content: Annotated[Optional[str], Field(title="Content")] = None
    dag_id: Annotated[str, Field(title="Dag Id")]
    version_number: Annotated[Optional[int], Field(title="Version Number")] = None


class DAGTagCollectionResponse(BaseModel):
    """
    DAG Tags Collection serializer for responses.
    """

    tags: Annotated[list[str], Field(title="Tags")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class DagProcessorInfoResponse(BaseModel):
    """
    DagProcessor info serializer for responses.
    """

    status: Annotated[Optional[str], Field(title="Status")] = None
    latest_dag_processor_heartbeat: Annotated[
        Optional[str], Field(title="Latest Dag Processor Heartbeat")
    ] = None


class DagRunAssetReference(BaseModel):
    """
    DAGRun serializer for asset responses.
    """

    run_id: Annotated[str, Field(title="Run Id")]
    dag_id: Annotated[str, Field(title="Dag Id")]
    logical_date: Annotated[datetime, Field(title="Logical Date")]
    start_date: Annotated[datetime, Field(title="Start Date")]
    end_date: Annotated[Optional[datetime], Field(title="End Date")] = None
    state: Annotated[str, Field(title="State")]
    data_interval_start: Annotated[datetime, Field(title="Data Interval Start")]
    data_interval_end: Annotated[datetime, Field(title="Data Interval End")]


class DagRunState(str, Enum):
    """
    All possible states that a DagRun can be in.

    These are "shared" with TaskInstanceState in some parts of the code,
    so please ensure that their values always match the ones with the
    same name in TaskInstanceState.
    """

    QUEUED = "queued"
    RUNNING = "running"
    SUCCESS = "success"
    FAILED = "failed"


class DagRunTriggeredByType(str, Enum):
    """
    Class with TriggeredBy types for DagRun.
    """

    CLI = "cli"
    OPERATOR = "operator"
    REST_API = "rest_api"
    UI = "ui"
    TEST = "test"
    TIMETABLE = "timetable"
    ASSET = "asset"
    BACKFILL = "backfill"


class DagRunType(str, Enum):
    """
    Class with DagRun types.
    """

    BACKFILL = "backfill"
    SCHEDULED = "scheduled"
    MANUAL = "manual"
    ASSET_TRIGGERED = "asset_triggered"


class DagScheduleAssetReference(BaseModel):
    """
    DAG schedule reference serializer for assets.
    """

    dag_id: Annotated[str, Field(title="Dag Id")]
    created_at: Annotated[datetime, Field(title="Created At")]
    updated_at: Annotated[datetime, Field(title="Updated At")]


class DagStatsStateResponse(BaseModel):
    """
    DagStatsState serializer for responses.
    """

    state: DagRunState
    count: Annotated[int, Field(title="Count")]


class DagTagResponse(BaseModel):
    """
    DAG Tag serializer for responses.
    """

    name: Annotated[str, Field(title="Name")]
    dag_id: Annotated[str, Field(title="Dag Id")]


class DagWarningType(str, Enum):
    """
    Enum for DAG warning types.

    This is the set of allowable values for the ``warning_type`` field
    in the DagWarning model.
    """

    ASSET_CONFLICT = "asset conflict"
    NON_EXISTENT_POOL = "non-existent pool"


class DryRunBackfillResponse(BaseModel):
    """
    Backfill serializer for responses in dry-run mode.
    """

    logical_date: Annotated[datetime, Field(title="Logical Date")]


class EventLogResponse(BaseModel):
    """
    Event Log Response.
    """

    event_log_id: Annotated[int, Field(title="Event Log Id")]
    when: Annotated[datetime, Field(title="When")]
    dag_id: Annotated[Optional[str], Field(title="Dag Id")] = None
    task_id: Annotated[Optional[str], Field(title="Task Id")] = None
    run_id: Annotated[Optional[str], Field(title="Run Id")] = None
    map_index: Annotated[Optional[int], Field(title="Map Index")] = None
    try_number: Annotated[Optional[int], Field(title="Try Number")] = None
    event: Annotated[str, Field(title="Event")]
    logical_date: Annotated[Optional[datetime], Field(title="Logical Date")] = None
    owner: Annotated[Optional[str], Field(title="Owner")] = None
    extra: Annotated[Optional[str], Field(title="Extra")] = None


class ExtraLinksResponse(RootModel[Optional[dict[str, Optional[str]]]]):
    """
    Extra Links Response.
    """

    root: Optional[dict[str, Optional[str]]] = None


class FastAPIAppResponse(BaseModel):
    """
    Serializer for Plugin FastAPI App responses.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    app: Annotated[str, Field(title="App")]
    url_prefix: Annotated[str, Field(title="Url Prefix")]
    name: Annotated[str, Field(title="Name")]


class HTTPExceptionResponse(BaseModel):
    """
    HTTPException Model used for error response.
    """

    detail: Annotated[Union[str, dict[str, Any]], Field(title="Detail")]


class ImportErrorResponse(BaseModel):
    """
    Import Error Response.
    """

    import_error_id: Annotated[int, Field(title="Import Error Id")]
    timestamp: Annotated[datetime, Field(title="Timestamp")]
    filename: Annotated[str, Field(title="Filename")]
    bundle_name: Annotated[str, Field(title="Bundle Name")]
    stack_trace: Annotated[str, Field(title="Stack Trace")]


class JobResponse(BaseModel):
    """
    Job serializer for responses.
    """

    id: Annotated[int, Field(title="Id")]
    dag_id: Annotated[Optional[str], Field(title="Dag Id")] = None
    state: Annotated[Optional[str], Field(title="State")] = None
    job_type: Annotated[Optional[str], Field(title="Job Type")] = None
    start_date: Annotated[Optional[datetime], Field(title="Start Date")] = None
    end_date: Annotated[Optional[datetime], Field(title="End Date")] = None
    latest_heartbeat: Annotated[Optional[datetime], Field(title="Latest Heartbeat")] = None
    executor_class: Annotated[Optional[str], Field(title="Executor Class")] = None
    hostname: Annotated[Optional[str], Field(title="Hostname")] = None
    unixname: Annotated[Optional[str], Field(title="Unixname")] = None


class PatchTaskInstanceBody(BaseModel):
    """
    Request body for Clear Task Instances endpoint.
    """

    dry_run: Annotated[Optional[bool], Field(title="Dry Run")] = True
    new_state: Annotated[Optional[str], Field(title="New State")] = None
    note: Annotated[Optional[Note], Field(title="Note")] = None
    include_upstream: Annotated[Optional[bool], Field(title="Include Upstream")] = False
    include_downstream: Annotated[Optional[bool], Field(title="Include Downstream")] = False
    include_future: Annotated[Optional[bool], Field(title="Include Future")] = False
    include_past: Annotated[Optional[bool], Field(title="Include Past")] = False


class PluginResponse(BaseModel):
    """
    Plugin serializer.
    """

    name: Annotated[str, Field(title="Name")]
    macros: Annotated[list[str], Field(title="Macros")]
    flask_blueprints: Annotated[list[str], Field(title="Flask Blueprints")]
    fastapi_apps: Annotated[list[FastAPIAppResponse], Field(title="Fastapi Apps")]
    appbuilder_views: Annotated[list[AppBuilderViewResponse], Field(title="Appbuilder Views")]
    appbuilder_menu_items: Annotated[list[AppBuilderMenuItemResponse], Field(title="Appbuilder Menu Items")]
    global_operator_extra_links: Annotated[list[str], Field(title="Global Operator Extra Links")]
    operator_extra_links: Annotated[list[str], Field(title="Operator Extra Links")]
    source: Annotated[str, Field(title="Source")]
    listeners: Annotated[list[str], Field(title="Listeners")]
    timetables: Annotated[list[str], Field(title="Timetables")]


class PoolBulkActionResponse(BaseModel):
    """
    Serializer for individual bulk action responses.

    Represents the outcome of a single bulk operation (create, update, or delete).
    The response includes a list of successful pool names and any errors encountered during the operation.
    This structure helps users understand which key actions succeeded and which failed.
    """

    success: Annotated[
        Optional[list[str]],
        Field(description="A list of pool names representing successful operations.", title="Success"),
    ] = None
    errors: Annotated[
        Optional[list[dict[str, Any]]],
        Field(
            description="A list of errors encountered during the operation, each containing details about the issue.",
            title="Errors",
        ),
    ] = None


class PoolBulkDeleteAction(BaseModel):
    """
    Bulk Delete Pool serializer for request bodies.
    """

    action: Optional[BulkAction] = "delete"
    pool_names: Annotated[
        list[str], Field(description="A list of pool names to be deleted.", title="Pool Names")
    ]
    action_on_non_existence: Optional[BulkActionNotOnExistence] = "fail"


class PoolBulkResponse(BaseModel):
    """
    Serializer for responses to bulk pool operations.

    This represents the results of create, update, and delete actions performed on pools in bulk.
    Each action (if requested) is represented as a field containing details about successful pool names and any encountered errors.
    Fields are populated in the response only if the respective action was part of the request, else are set None.
    """

    create: Annotated[
        Optional[PoolBulkActionResponse],
        Field(
            description="Details of the bulk create operation, including successful pool names and errors."
        ),
    ] = None
    update: Annotated[
        Optional[PoolBulkActionResponse],
        Field(
            description="Details of the bulk update operation, including successful pool names and errors."
        ),
    ] = None
    delete: Annotated[
        Optional[PoolBulkActionResponse],
        Field(
            description="Details of the bulk delete operation, including successful pool names and errors."
        ),
    ] = None


class PoolPatchBody(BaseModel):
    """
    Pool serializer for patch bodies.
    """

    pool: Annotated[Optional[str], Field(title="Pool")] = None
    slots: Annotated[Optional[int], Field(title="Slots")] = None
    description: Annotated[Optional[str], Field(title="Description")] = None
    include_deferred: Annotated[Optional[bool], Field(title="Include Deferred")] = None


class PoolPostBody(BaseModel):
    """
    Pool serializer for post bodies.
    """

    name: Annotated[str, Field(max_length=256, title="Name")]
    slots: Annotated[int, Field(title="Slots")]
    description: Annotated[Optional[str], Field(title="Description")] = None
    include_deferred: Annotated[Optional[bool], Field(title="Include Deferred")] = False


class PoolResponse(BaseModel):
    """
    Pool serializer for responses.
    """

    name: Annotated[str, Field(title="Name")]
    slots: Annotated[int, Field(title="Slots")]
    description: Annotated[Optional[str], Field(title="Description")] = None
    include_deferred: Annotated[bool, Field(title="Include Deferred")]
    occupied_slots: Annotated[int, Field(title="Occupied Slots")]
    running_slots: Annotated[int, Field(title="Running Slots")]
    queued_slots: Annotated[int, Field(title="Queued Slots")]
    scheduled_slots: Annotated[int, Field(title="Scheduled Slots")]
    open_slots: Annotated[int, Field(title="Open Slots")]
    deferred_slots: Annotated[int, Field(title="Deferred Slots")]


class ProviderResponse(BaseModel):
    """
    Provider serializer for responses.
    """

    package_name: Annotated[str, Field(title="Package Name")]
    description: Annotated[str, Field(title="Description")]
    version: Annotated[str, Field(title="Version")]


class QueuedEventResponse(BaseModel):
    """
    Queued Event serializer for responses..
    """

    dag_id: Annotated[str, Field(title="Dag Id")]
    asset_id: Annotated[int, Field(title="Asset Id")]
    created_at: Annotated[datetime, Field(title="Created At")]


class ReprocessBehavior(str, Enum):
    """
    Internal enum for setting reprocess behavior in a backfill.

    :meta private:
    """

    FAILED = "failed"
    COMPLETED = "completed"
    NONE = "none"


class SchedulerInfoResponse(BaseModel):
    """
    Scheduler info serializer for responses.
    """

    status: Annotated[Optional[str], Field(title="Status")] = None
    latest_scheduler_heartbeat: Annotated[Optional[str], Field(title="Latest Scheduler Heartbeat")] = None


class TaskDependencyResponse(BaseModel):
    """
    Task Dependency serializer for responses.
    """

    name: Annotated[str, Field(title="Name")]
    reason: Annotated[str, Field(title="Reason")]


class TaskInstanceState(str, Enum):
    """
    All possible states that a Task Instance can be in.

    Note that None is also allowed, so always use this in a type hint with Optional.
    """

    REMOVED = "removed"
    SCHEDULED = "scheduled"
    QUEUED = "queued"
    RUNNING = "running"
    SUCCESS = "success"
    RESTARTING = "restarting"
    FAILED = "failed"
    UP_FOR_RETRY = "up_for_retry"
    UP_FOR_RESCHEDULE = "up_for_reschedule"
    UPSTREAM_FAILED = "upstream_failed"
    SKIPPED = "skipped"
    DEFERRED = "deferred"


class TaskInstancesBatchBody(BaseModel):
    """
    Task Instance body for get batch.
    """

    dag_ids: Annotated[Optional[list[str]], Field(title="Dag Ids")] = None
    dag_run_ids: Annotated[Optional[list[str]], Field(title="Dag Run Ids")] = None
    task_ids: Annotated[Optional[list[str]], Field(title="Task Ids")] = None
    state: Annotated[Optional[list[Optional[TaskInstanceState]]], Field(title="State")] = None
    logical_date_gte: Annotated[Optional[datetime], Field(title="Logical Date Gte")] = None
    logical_date_lte: Annotated[Optional[datetime], Field(title="Logical Date Lte")] = None
    start_date_gte: Annotated[Optional[datetime], Field(title="Start Date Gte")] = None
    start_date_lte: Annotated[Optional[datetime], Field(title="Start Date Lte")] = None
    end_date_gte: Annotated[Optional[datetime], Field(title="End Date Gte")] = None
    end_date_lte: Annotated[Optional[datetime], Field(title="End Date Lte")] = None
    duration_gte: Annotated[Optional[float], Field(title="Duration Gte")] = None
    duration_lte: Annotated[Optional[float], Field(title="Duration Lte")] = None
    pool: Annotated[Optional[list[str]], Field(title="Pool")] = None
    queue: Annotated[Optional[list[str]], Field(title="Queue")] = None
    executor: Annotated[Optional[list[str]], Field(title="Executor")] = None
    page_offset: Annotated[Optional[int], Field(ge=0, title="Page Offset")] = 0
    page_limit: Annotated[Optional[int], Field(ge=0, title="Page Limit")] = 100
    order_by: Annotated[Optional[str], Field(title="Order By")] = None


class TaskInstancesLogResponse(BaseModel):
    """
    Log serializer for responses.
    """

    content: Annotated[str, Field(title="Content")]
    continuation_token: Annotated[Optional[str], Field(title="Continuation Token")] = None


class TaskOutletAssetReference(BaseModel):
    """
    Task outlet reference serializer for assets.
    """

    dag_id: Annotated[str, Field(title="Dag Id")]
    task_id: Annotated[str, Field(title="Task Id")]
    created_at: Annotated[datetime, Field(title="Created At")]
    updated_at: Annotated[datetime, Field(title="Updated At")]


class TimeDelta(BaseModel):
    """
    TimeDelta can be used to interact with datetime.timedelta objects.
    """

    field__type: Annotated[Optional[str], Field(alias="__type", title="Type")] = "TimeDelta"
    days: Annotated[int, Field(title="Days")]
    seconds: Annotated[int, Field(title="Seconds")]
    microseconds: Annotated[int, Field(title="Microseconds")]


class TriggerDAGRunPostBody(BaseModel):
    """
    Trigger DAG Run Serializer for POST body.
    """

    dag_run_id: Annotated[Optional[str], Field(title="Dag Run Id")] = None
    data_interval_start: Annotated[Optional[datetime], Field(title="Data Interval Start")] = None
    data_interval_end: Annotated[Optional[datetime], Field(title="Data Interval End")] = None
    conf: Annotated[Optional[dict[str, Any]], Field(title="Conf")] = None
    note: Annotated[Optional[str], Field(title="Note")] = None


class TriggerResponse(BaseModel):
    """
    Trigger serializer for responses.
    """

    id: Annotated[int, Field(title="Id")]
    classpath: Annotated[str, Field(title="Classpath")]
    kwargs: Annotated[str, Field(title="Kwargs")]
    created_date: Annotated[datetime, Field(title="Created Date")]
    triggerer_id: Annotated[Optional[int], Field(title="Triggerer Id")] = None


class TriggererInfoResponse(BaseModel):
    """
    Triggerer info serializer for responses.
    """

    status: Annotated[Optional[str], Field(title="Status")] = None
    latest_triggerer_heartbeat: Annotated[Optional[str], Field(title="Latest Triggerer Heartbeat")] = None


class ValidationError(BaseModel):
    loc: Annotated[list[Union[str, int]], Field(title="Location")]
    msg: Annotated[str, Field(title="Message")]
    type: Annotated[str, Field(title="Error Type")]


class VariableBody(BaseModel):
    """
    Variable serializer for bodies.
    """

    key: Annotated[str, Field(max_length=250, title="Key")]
    value: Annotated[str, Field(title="Value")]
    description: Annotated[Optional[str], Field(title="Description")] = None


class VariableBulkActionResponse(BaseModel):
    """
    Serializer for individual bulk action responses.

    Represents the outcome of a single bulk operation (create, update, or delete).
    The response includes a list of successful keys and any errors encountered during the operation.
    This structure helps users understand which key actions succeeded and which failed.
    """

    success: Annotated[
        Optional[list[str]],
        Field(description="A list of keys representing successful operations.", title="Success"),
    ] = []
    errors: Annotated[
        Optional[list[dict[str, Any]]],
        Field(
            description="A list of errors encountered during the operation, each containing details about the issue.",
            title="Errors",
        ),
    ] = []


class VariableBulkCreateAction(BaseModel):
    """
    Bulk Create Variable serializer for request bodies.
    """

    action: Optional[BulkAction] = "create"
    variables: Annotated[
        list[VariableBody], Field(description="A list of variables to be created.", title="Variables")
    ]
    action_on_existence: Optional[BulkActionOnExistence] = "fail"


class VariableBulkDeleteAction(BaseModel):
    """
    Bulk Delete Variable serializer for request bodies.
    """

    action: Optional[BulkAction] = "delete"
    keys: Annotated[list[str], Field(description="A list of variable keys to be deleted.", title="Keys")]
    action_on_non_existence: Optional[BulkActionNotOnExistence] = "fail"


class VariableBulkResponse(BaseModel):
    """
    Serializer for responses to bulk variable operations.

    This represents the results of create, update, and delete actions performed on variables in bulk.
    Each action (if requested) is represented as a field containing details about successful keys and any encountered errors.
    Fields are populated in the response only if the respective action was part of the request, else are set None.
    """

    create: Annotated[
        Optional[VariableBulkActionResponse],
        Field(description="Details of the bulk create operation, including successful keys and errors."),
    ] = None
    update: Annotated[
        Optional[VariableBulkActionResponse],
        Field(description="Details of the bulk update operation, including successful keys and errors."),
    ] = None
    delete: Annotated[
        Optional[VariableBulkActionResponse],
        Field(description="Details of the bulk delete operation, including successful keys and errors."),
    ] = None


class VariableBulkUpdateAction(BaseModel):
    """
    Bulk Update Variable serializer for request bodies.
    """

    action: Optional[BulkAction] = "update"
    variables: Annotated[
        list[VariableBody], Field(description="A list of variables to be updated.", title="Variables")
    ]
    action_on_non_existence: Optional[BulkActionNotOnExistence] = "fail"


class VariableResponse(BaseModel):
    """
    Variable serializer for responses.
    """

    key: Annotated[str, Field(title="Key")]
    value: Annotated[str, Field(title="Value")]
    description: Annotated[Optional[str], Field(title="Description")] = None
    is_encrypted: Annotated[bool, Field(title="Is Encrypted")]


class VersionInfo(BaseModel):
    """
    Version information serializer for responses.
    """

    version: Annotated[str, Field(title="Version")]
    git_version: Annotated[Optional[str], Field(title="Git Version")] = None


class XComResponse(BaseModel):
    """
    Serializer for a xcom item.
    """

    key: Annotated[str, Field(title="Key")]
    timestamp: Annotated[datetime, Field(title="Timestamp")]
    logical_date: Annotated[datetime, Field(title="Logical Date")]
    map_index: Annotated[int, Field(title="Map Index")]
    task_id: Annotated[str, Field(title="Task Id")]
    dag_id: Annotated[str, Field(title="Dag Id")]
    run_id: Annotated[str, Field(title="Run Id")]


class XComResponseNative(BaseModel):
    """
    XCom response serializer with native return type.
    """

    key: Annotated[str, Field(title="Key")]
    timestamp: Annotated[datetime, Field(title="Timestamp")]
    logical_date: Annotated[datetime, Field(title="Logical Date")]
    map_index: Annotated[int, Field(title="Map Index")]
    task_id: Annotated[str, Field(title="Task Id")]
    dag_id: Annotated[str, Field(title="Dag Id")]
    run_id: Annotated[str, Field(title="Run Id")]
    value: Annotated[Any, Field(title="Value")]


class XComResponseString(BaseModel):
    """
    XCom response serializer with string return type.
    """

    key: Annotated[str, Field(title="Key")]
    timestamp: Annotated[datetime, Field(title="Timestamp")]
    logical_date: Annotated[datetime, Field(title="Logical Date")]
    map_index: Annotated[int, Field(title="Map Index")]
    task_id: Annotated[str, Field(title="Task Id")]
    dag_id: Annotated[str, Field(title="Dag Id")]
    run_id: Annotated[str, Field(title="Run Id")]
    value: Annotated[Optional[str], Field(title="Value")] = None


class AssetAliasCollectionResponse(BaseModel):
    """
    Asset alias collection response.
    """

    asset_aliases: Annotated[list[AssetAliasResponse], Field(title="Asset Aliases")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class AssetEventResponse(BaseModel):
    """
    Asset event serializer for responses.
    """

    id: Annotated[int, Field(title="Id")]
    asset_id: Annotated[int, Field(title="Asset Id")]
    uri: Annotated[Optional[str], Field(title="Uri")] = None
    name: Annotated[Optional[str], Field(title="Name")] = None
    group: Annotated[Optional[str], Field(title="Group")] = None
    extra: Annotated[Optional[dict[str, Any]], Field(title="Extra")] = None
    source_task_id: Annotated[Optional[str], Field(title="Source Task Id")] = None
    source_dag_id: Annotated[Optional[str], Field(title="Source Dag Id")] = None
    source_run_id: Annotated[Optional[str], Field(title="Source Run Id")] = None
    source_map_index: Annotated[int, Field(title="Source Map Index")]
    created_dagruns: Annotated[list[DagRunAssetReference], Field(title="Created Dagruns")]
    timestamp: Annotated[datetime, Field(title="Timestamp")]


class AssetResponse(BaseModel):
    """
    Asset serializer for responses.
    """

    id: Annotated[int, Field(title="Id")]
    name: Annotated[str, Field(title="Name")]
    uri: Annotated[str, Field(title="Uri")]
    group: Annotated[str, Field(title="Group")]
    extra: Annotated[Optional[dict[str, Any]], Field(title="Extra")] = None
    created_at: Annotated[datetime, Field(title="Created At")]
    updated_at: Annotated[datetime, Field(title="Updated At")]
    consuming_dags: Annotated[list[DagScheduleAssetReference], Field(title="Consuming Dags")]
    producing_tasks: Annotated[list[TaskOutletAssetReference], Field(title="Producing Tasks")]
    aliases: Annotated[list[AssetAliasResponse], Field(title="Aliases")]


class BackfillPostBody(BaseModel):
    """
    Object used for create backfill request.
    """

    dag_id: Annotated[str, Field(title="Dag Id")]
    from_date: Annotated[datetime, Field(title="From Date")]
    to_date: Annotated[datetime, Field(title="To Date")]
    run_backwards: Annotated[Optional[bool], Field(title="Run Backwards")] = False
    dag_run_conf: Annotated[Optional[dict[str, Any]], Field(title="Dag Run Conf")] = {}
    reprocess_behavior: Optional[ReprocessBehavior] = "none"
    max_active_runs: Annotated[Optional[int], Field(title="Max Active Runs")] = 10


class BackfillResponse(BaseModel):
    """
    Base serializer for Backfill.
    """

    id: Annotated[int, Field(title="Id")]
    dag_id: Annotated[str, Field(title="Dag Id")]
    from_date: Annotated[datetime, Field(title="From Date")]
    to_date: Annotated[datetime, Field(title="To Date")]
    dag_run_conf: Annotated[dict[str, Any], Field(title="Dag Run Conf")]
    is_paused: Annotated[bool, Field(title="Is Paused")]
    reprocess_behavior: ReprocessBehavior
    max_active_runs: Annotated[int, Field(title="Max Active Runs")]
    created_at: Annotated[datetime, Field(title="Created At")]
    completed_at: Annotated[Optional[datetime], Field(title="Completed At")] = None
    updated_at: Annotated[datetime, Field(title="Updated At")]


class Config(BaseModel):
    """
    List of config sections with their options.
    """

    sections: Annotated[list[ConfigSection], Field(title="Sections")]


class ConnectionBulkBody(BaseModel):
    """
    Request body for bulk Connection operations (create, update, delete).
    """

    actions: Annotated[
        list[Union[ConnectionBulkCreateAction, ConnectionBulkUpdateAction, ConnectionBulkDeleteAction]],
        Field(description="A list of Connection actions to perform.", title="Actions"),
    ]


class ConnectionCollectionResponse(BaseModel):
    """
    Connection Collection serializer for responses.
    """

    connections: Annotated[list[ConnectionResponse], Field(title="Connections")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class DAGDetailsResponse(BaseModel):
    """
    Specific serializer for DAG Details responses.
    """

    dag_id: Annotated[str, Field(title="Dag Id")]
    dag_display_name: Annotated[str, Field(title="Dag Display Name")]
    is_paused: Annotated[bool, Field(title="Is Paused")]
    is_active: Annotated[bool, Field(title="Is Active")]
    last_parsed_time: Annotated[Optional[datetime], Field(title="Last Parsed Time")] = None
    last_expired: Annotated[Optional[datetime], Field(title="Last Expired")] = None
    default_view: Annotated[Optional[str], Field(title="Default View")] = None
    fileloc: Annotated[str, Field(title="Fileloc")]
    description: Annotated[Optional[str], Field(title="Description")] = None
    timetable_summary: Annotated[Optional[str], Field(title="Timetable Summary")] = None
    timetable_description: Annotated[Optional[str], Field(title="Timetable Description")] = None
    tags: Annotated[list[DagTagResponse], Field(title="Tags")]
    max_active_tasks: Annotated[int, Field(title="Max Active Tasks")]
    max_active_runs: Annotated[Optional[int], Field(title="Max Active Runs")] = None
    max_consecutive_failed_dag_runs: Annotated[int, Field(title="Max Consecutive Failed Dag Runs")]
    has_task_concurrency_limits: Annotated[bool, Field(title="Has Task Concurrency Limits")]
    has_import_errors: Annotated[bool, Field(title="Has Import Errors")]
    next_dagrun: Annotated[Optional[datetime], Field(title="Next Dagrun")] = None
    next_dagrun_data_interval_start: Annotated[
        Optional[datetime], Field(title="Next Dagrun Data Interval Start")
    ] = None
    next_dagrun_data_interval_end: Annotated[
        Optional[datetime], Field(title="Next Dagrun Data Interval End")
    ] = None
    next_dagrun_create_after: Annotated[Optional[datetime], Field(title="Next Dagrun Create After")] = None
    owners: Annotated[list[str], Field(title="Owners")]
    catchup: Annotated[bool, Field(title="Catchup")]
    dag_run_timeout: Annotated[Optional[timedelta], Field(title="Dag Run Timeout")] = None
    asset_expression: Annotated[Optional[dict[str, Any]], Field(title="Asset Expression")] = None
    doc_md: Annotated[Optional[str], Field(title="Doc Md")] = None
    start_date: Annotated[Optional[datetime], Field(title="Start Date")] = None
    end_date: Annotated[Optional[datetime], Field(title="End Date")] = None
    is_paused_upon_creation: Annotated[Optional[bool], Field(title="Is Paused Upon Creation")] = None
    params: Annotated[Optional[dict[str, Any]], Field(title="Params")] = None
    render_template_as_native_obj: Annotated[bool, Field(title="Render Template As Native Obj")]
    template_search_path: Annotated[Optional[list[str]], Field(title="Template Search Path")] = None
    timezone: Annotated[Optional[str], Field(title="Timezone")] = None
    last_parsed: Annotated[Optional[datetime], Field(title="Last Parsed")] = None
    file_token: Annotated[str, Field(description="Return file token.", title="File Token")]
    concurrency: Annotated[
        int, Field(description="Return max_active_tasks as concurrency.", title="Concurrency")
    ]


class DAGResponse(BaseModel):
    """
    DAG serializer for responses.
    """

    dag_id: Annotated[str, Field(title="Dag Id")]
    dag_display_name: Annotated[str, Field(title="Dag Display Name")]
    is_paused: Annotated[bool, Field(title="Is Paused")]
    is_active: Annotated[bool, Field(title="Is Active")]
    last_parsed_time: Annotated[Optional[datetime], Field(title="Last Parsed Time")] = None
    last_expired: Annotated[Optional[datetime], Field(title="Last Expired")] = None
    default_view: Annotated[Optional[str], Field(title="Default View")] = None
    fileloc: Annotated[str, Field(title="Fileloc")]
    description: Annotated[Optional[str], Field(title="Description")] = None
    timetable_summary: Annotated[Optional[str], Field(title="Timetable Summary")] = None
    timetable_description: Annotated[Optional[str], Field(title="Timetable Description")] = None
    tags: Annotated[list[DagTagResponse], Field(title="Tags")]
    max_active_tasks: Annotated[int, Field(title="Max Active Tasks")]
    max_active_runs: Annotated[Optional[int], Field(title="Max Active Runs")] = None
    max_consecutive_failed_dag_runs: Annotated[int, Field(title="Max Consecutive Failed Dag Runs")]
    has_task_concurrency_limits: Annotated[bool, Field(title="Has Task Concurrency Limits")]
    has_import_errors: Annotated[bool, Field(title="Has Import Errors")]
    next_dagrun: Annotated[Optional[datetime], Field(title="Next Dagrun")] = None
    next_dagrun_data_interval_start: Annotated[
        Optional[datetime], Field(title="Next Dagrun Data Interval Start")
    ] = None
    next_dagrun_data_interval_end: Annotated[
        Optional[datetime], Field(title="Next Dagrun Data Interval End")
    ] = None
    next_dagrun_create_after: Annotated[Optional[datetime], Field(title="Next Dagrun Create After")] = None
    owners: Annotated[list[str], Field(title="Owners")]
    file_token: Annotated[str, Field(description="Return file token.", title="File Token")]


class DAGRunPatchBody(BaseModel):
    """
    DAG Run Serializer for PATCH requests.
    """

    state: Optional[DAGRunPatchStates] = None
    note: Annotated[Optional[Note], Field(title="Note")] = None


class DAGRunResponse(BaseModel):
    """
    DAG Run serializer for responses.
    """

    dag_run_id: Annotated[str, Field(title="Dag Run Id")]
    dag_id: Annotated[str, Field(title="Dag Id")]
    logical_date: Annotated[Optional[datetime], Field(title="Logical Date")] = None
    queued_at: Annotated[Optional[datetime], Field(title="Queued At")] = None
    start_date: Annotated[Optional[datetime], Field(title="Start Date")] = None
    end_date: Annotated[Optional[datetime], Field(title="End Date")] = None
    data_interval_start: Annotated[Optional[datetime], Field(title="Data Interval Start")] = None
    data_interval_end: Annotated[Optional[datetime], Field(title="Data Interval End")] = None
    last_scheduling_decision: Annotated[Optional[datetime], Field(title="Last Scheduling Decision")] = None
    run_type: DagRunType
    state: DagRunState
    external_trigger: Annotated[bool, Field(title="External Trigger")]
    triggered_by: DagRunTriggeredByType
    conf: Annotated[dict[str, Any], Field(title="Conf")]
    note: Annotated[Optional[str], Field(title="Note")] = None


class DAGRunsBatchBody(BaseModel):
    """
    List DAG Runs body for batch endpoint.
    """

    order_by: Annotated[Optional[str], Field(title="Order By")] = None
    page_offset: Annotated[Optional[int], Field(ge=0, title="Page Offset")] = 0
    page_limit: Annotated[Optional[int], Field(ge=0, title="Page Limit")] = 100
    dag_ids: Annotated[Optional[list[str]], Field(title="Dag Ids")] = None
    states: Annotated[Optional[list[Optional[DagRunState]]], Field(title="States")] = None
    logical_date_gte: Annotated[Optional[datetime], Field(title="Logical Date Gte")] = None
    logical_date_lte: Annotated[Optional[datetime], Field(title="Logical Date Lte")] = None
    start_date_gte: Annotated[Optional[datetime], Field(title="Start Date Gte")] = None
    start_date_lte: Annotated[Optional[datetime], Field(title="Start Date Lte")] = None
    end_date_gte: Annotated[Optional[datetime], Field(title="End Date Gte")] = None
    end_date_lte: Annotated[Optional[datetime], Field(title="End Date Lte")] = None


class DAGWarningResponse(BaseModel):
    """
    DAG Warning serializer for responses.
    """

    dag_id: Annotated[str, Field(title="Dag Id")]
    warning_type: DagWarningType
    message: Annotated[str, Field(title="Message")]
    timestamp: Annotated[datetime, Field(title="Timestamp")]


class DagStatsResponse(BaseModel):
    """
    DAG Stats serializer for responses.
    """

    dag_id: Annotated[str, Field(title="Dag Id")]
    stats: Annotated[list[DagStatsStateResponse], Field(title="Stats")]


class DryRunBackfillCollectionResponse(BaseModel):
    """
    Backfill collection serializer for responses in dry-run mode.
    """

    backfills: Annotated[list[DryRunBackfillResponse], Field(title="Backfills")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class EventLogCollectionResponse(BaseModel):
    """
    Event Log Collection Response.
    """

    event_logs: Annotated[list[EventLogResponse], Field(title="Event Logs")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class HTTPValidationError(BaseModel):
    detail: Annotated[Optional[list[ValidationError]], Field(title="Detail")] = None


class HealthInfoResponse(BaseModel):
    """
    Health serializer for responses.
    """

    metadatabase: BaseInfoResponse
    scheduler: SchedulerInfoResponse
    triggerer: TriggererInfoResponse
    dag_processor: Optional[DagProcessorInfoResponse] = None


class ImportErrorCollectionResponse(BaseModel):
    """
    Import Error Collection Response.
    """

    import_errors: Annotated[list[ImportErrorResponse], Field(title="Import Errors")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class JobCollectionResponse(BaseModel):
    """
    Job Collection Response.
    """

    jobs: Annotated[list[JobResponse], Field(title="Jobs")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class PluginCollectionResponse(BaseModel):
    """
    Plugin Collection serializer.
    """

    plugins: Annotated[list[PluginResponse], Field(title="Plugins")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class PoolBulkCreateAction(BaseModel):
    """
    Bulk Create Pool serializer for request bodies.
    """

    action: Optional[BulkAction] = "create"
    pools: Annotated[list[PoolPostBody], Field(description="A list of pools to be created.", title="Pools")]
    action_on_existence: Optional[BulkActionOnExistence] = "fail"


class PoolBulkUpdateAction(BaseModel):
    """
    Bulk Update Pool serializer for request bodies.
    """

    action: Optional[BulkAction] = "update"
    pools: Annotated[list[PoolPatchBody], Field(description="A list of pools to be updated.", title="Pools")]
    action_on_non_existence: Optional[BulkActionNotOnExistence] = "fail"


class PoolCollectionResponse(BaseModel):
    """
    Pool Collection serializer for responses.
    """

    pools: Annotated[list[PoolResponse], Field(title="Pools")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class ProviderCollectionResponse(BaseModel):
    """
    Provider Collection serializer for responses.
    """

    providers: Annotated[list[ProviderResponse], Field(title="Providers")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class QueuedEventCollectionResponse(BaseModel):
    """
    Queued Event Collection serializer for responses.
    """

    queued_events: Annotated[list[QueuedEventResponse], Field(title="Queued Events")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class TaskDependencyCollectionResponse(BaseModel):
    """
    Task scheduling dependencies collection serializer for responses.
    """

    dependencies: Annotated[list[TaskDependencyResponse], Field(title="Dependencies")]


class TaskInstanceHistoryResponse(BaseModel):
    """
    TaskInstanceHistory serializer for responses.
    """

    task_id: Annotated[str, Field(title="Task Id")]
    dag_id: Annotated[str, Field(title="Dag Id")]
    dag_run_id: Annotated[str, Field(title="Dag Run Id")]
    map_index: Annotated[int, Field(title="Map Index")]
    start_date: Annotated[Optional[datetime], Field(title="Start Date")] = None
    end_date: Annotated[Optional[datetime], Field(title="End Date")] = None
    duration: Annotated[Optional[float], Field(title="Duration")] = None
    state: Optional[TaskInstanceState] = None
    try_number: Annotated[int, Field(title="Try Number")]
    max_tries: Annotated[int, Field(title="Max Tries")]
    task_display_name: Annotated[str, Field(title="Task Display Name")]
    hostname: Annotated[Optional[str], Field(title="Hostname")] = None
    unixname: Annotated[Optional[str], Field(title="Unixname")] = None
    pool: Annotated[str, Field(title="Pool")]
    pool_slots: Annotated[int, Field(title="Pool Slots")]
    queue: Annotated[Optional[str], Field(title="Queue")] = None
    priority_weight: Annotated[Optional[int], Field(title="Priority Weight")] = None
    operator: Annotated[Optional[str], Field(title="Operator")] = None
    queued_when: Annotated[Optional[datetime], Field(title="Queued When")] = None
    pid: Annotated[Optional[int], Field(title="Pid")] = None
    executor: Annotated[Optional[str], Field(title="Executor")] = None
    executor_config: Annotated[str, Field(title="Executor Config")]


class TaskInstanceResponse(BaseModel):
    """
    TaskInstance serializer for responses.
    """

    id: Annotated[str, Field(title="Id")]
    task_id: Annotated[str, Field(title="Task Id")]
    dag_id: Annotated[str, Field(title="Dag Id")]
    dag_run_id: Annotated[str, Field(title="Dag Run Id")]
    map_index: Annotated[int, Field(title="Map Index")]
    logical_date: Annotated[datetime, Field(title="Logical Date")]
    start_date: Annotated[Optional[datetime], Field(title="Start Date")] = None
    end_date: Annotated[Optional[datetime], Field(title="End Date")] = None
    duration: Annotated[Optional[float], Field(title="Duration")] = None
    state: Optional[TaskInstanceState] = None
    try_number: Annotated[int, Field(title="Try Number")]
    max_tries: Annotated[int, Field(title="Max Tries")]
    task_display_name: Annotated[str, Field(title="Task Display Name")]
    hostname: Annotated[Optional[str], Field(title="Hostname")] = None
    unixname: Annotated[Optional[str], Field(title="Unixname")] = None
    pool: Annotated[str, Field(title="Pool")]
    pool_slots: Annotated[int, Field(title="Pool Slots")]
    queue: Annotated[Optional[str], Field(title="Queue")] = None
    priority_weight: Annotated[Optional[int], Field(title="Priority Weight")] = None
    operator: Annotated[Optional[str], Field(title="Operator")] = None
    queued_when: Annotated[Optional[datetime], Field(title="Queued When")] = None
    pid: Annotated[Optional[int], Field(title="Pid")] = None
    executor: Annotated[Optional[str], Field(title="Executor")] = None
    executor_config: Annotated[str, Field(title="Executor Config")]
    note: Annotated[Optional[str], Field(title="Note")] = None
    rendered_map_index: Annotated[Optional[str], Field(title="Rendered Map Index")] = None
    rendered_fields: Annotated[Optional[dict[str, Any]], Field(title="Rendered Fields")] = {}
    trigger: Optional[TriggerResponse] = None
    triggerer_job: Optional[JobResponse] = None


class TaskResponse(BaseModel):
    """
    Task serializer for responses.
    """

    task_id: Annotated[Optional[str], Field(title="Task Id")] = None
    task_display_name: Annotated[Optional[str], Field(title="Task Display Name")] = None
    owner: Annotated[Optional[str], Field(title="Owner")] = None
    start_date: Annotated[Optional[datetime], Field(title="Start Date")] = None
    end_date: Annotated[Optional[datetime], Field(title="End Date")] = None
    trigger_rule: Annotated[Optional[str], Field(title="Trigger Rule")] = None
    depends_on_past: Annotated[bool, Field(title="Depends On Past")]
    wait_for_downstream: Annotated[bool, Field(title="Wait For Downstream")]
    retries: Annotated[Optional[float], Field(title="Retries")] = None
    queue: Annotated[Optional[str], Field(title="Queue")] = None
    pool: Annotated[Optional[str], Field(title="Pool")] = None
    pool_slots: Annotated[Optional[float], Field(title="Pool Slots")] = None
    execution_timeout: Optional[TimeDelta] = None
    retry_delay: Optional[TimeDelta] = None
    retry_exponential_backoff: Annotated[bool, Field(title="Retry Exponential Backoff")]
    priority_weight: Annotated[Optional[float], Field(title="Priority Weight")] = None
    weight_rule: Annotated[Optional[str], Field(title="Weight Rule")] = None
    ui_color: Annotated[Optional[str], Field(title="Ui Color")] = None
    ui_fgcolor: Annotated[Optional[str], Field(title="Ui Fgcolor")] = None
    template_fields: Annotated[Optional[list[str]], Field(title="Template Fields")] = None
    downstream_task_ids: Annotated[Optional[list[str]], Field(title="Downstream Task Ids")] = None
    doc_md: Annotated[Optional[str], Field(title="Doc Md")] = None
    operator_name: Annotated[Optional[str], Field(title="Operator Name")] = None
    params: Annotated[Optional[dict[str, Any]], Field(title="Params")] = None
    class_ref: Annotated[Optional[dict[str, Any]], Field(title="Class Ref")] = None
    is_mapped: Annotated[Optional[bool], Field(title="Is Mapped")] = None
    extra_links: Annotated[
        list[str], Field(description="Extract and return extra_links.", title="Extra Links")
    ]


class VariableBulkBody(BaseModel):
    """
    Request body for bulk variable operations (create, update, delete).
    """

    actions: Annotated[
        list[Union[VariableBulkCreateAction, VariableBulkUpdateAction, VariableBulkDeleteAction]],
        Field(description="A list of variable actions to perform.", title="Actions"),
    ]


class VariableCollectionResponse(BaseModel):
    """
    Variable Collection serializer for responses.
    """

    variables: Annotated[list[VariableResponse], Field(title="Variables")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class XComCollection(BaseModel):
    """
    List of XCom items.
    """

    xcom_entries: Annotated[list[XComResponse], Field(title="Xcom Entries")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class AssetCollectionResponse(BaseModel):
    """
    Asset collection response.
    """

    assets: Annotated[list[AssetResponse], Field(title="Assets")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class AssetEventCollectionResponse(BaseModel):
    """
    Asset event collection response.
    """

    asset_events: Annotated[list[AssetEventResponse], Field(title="Asset Events")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class BackfillCollectionResponse(BaseModel):
    """
    Backfill Collection serializer for responses.
    """

    backfills: Annotated[list[BackfillResponse], Field(title="Backfills")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class DAGCollectionResponse(BaseModel):
    """
    DAG Collection serializer for responses.
    """

    dags: Annotated[list[DAGResponse], Field(title="Dags")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class DAGRunCollectionResponse(BaseModel):
    """
    DAG Run Collection serializer for responses.
    """

    dag_runs: Annotated[list[DAGRunResponse], Field(title="Dag Runs")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class DAGWarningCollectionResponse(BaseModel):
    """
    DAG warning collection serializer for responses.
    """

    dag_warnings: Annotated[list[DAGWarningResponse], Field(title="Dag Warnings")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class DagStatsCollectionResponse(BaseModel):
    """
    DAG Stats Collection serializer for responses.
    """

    dags: Annotated[list[DagStatsResponse], Field(title="Dags")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class PoolBulkBody(BaseModel):
    """
    Request body for bulk Pool operations (create, update, delete).
    """

    actions: Annotated[
        list[Union[PoolBulkCreateAction, PoolBulkUpdateAction, PoolBulkDeleteAction]],
        Field(description="A list of Pool actions to perform.", title="Actions"),
    ]


class TaskCollectionResponse(BaseModel):
    """
    Task collection serializer for responses.
    """

    tasks: Annotated[list[TaskResponse], Field(title="Tasks")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class TaskInstanceCollectionResponse(BaseModel):
    """
    Task Instance Collection serializer for responses.
    """

    task_instances: Annotated[list[TaskInstanceResponse], Field(title="Task Instances")]
    total_entries: Annotated[int, Field(title="Total Entries")]


class TaskInstanceHistoryCollectionResponse(BaseModel):
    """
    TaskInstanceHistory Collection serializer for responses.
    """

    task_instances: Annotated[list[TaskInstanceHistoryResponse], Field(title="Task Instances")]
    total_entries: Annotated[int, Field(title="Total Entries")]
