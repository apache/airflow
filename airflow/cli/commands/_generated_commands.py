# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#
# DO NOT MODIFY THIS FILE DIRECTLY
# IT IS AUTOGENERATED BY scripts/ci/pre_commit/generate_cli_commands_for_auth_managers_executors.py
# RUN `pre-commit run generate-cli-commands-for-auth-managers-executors` TO UPDATE

from __future__ import annotations

from airflow.cli.cli_config import (
    ActionCommand,
    Arg,
    GroupCommand,
    lazy_load_command,
    positive_int,
)
from airflow.configuration import conf
from airflow.utils.timezone import parse as timeparse

EXECUTORS_CLI_COMMANDS = {
    "LocalExecutor": [],
    "DebugExecutor": [],
    "CeleryExecutor": [
        GroupCommand(
            name="celery",
            help="Celery components",
            subcommands=[
                ActionCommand(
                    name="worker",
                    help="Start a Celery worker node",
                    func=lazy_load_command("airflow.providers.celery.cli.celery_command.worker"),
                    args=[
                        Arg(
                            flags=("-q", "--queues"),
                            help="Comma delimited list of queues to serve",
                            default=conf.get("operators", "DEFAULT_QUEUE"),
                        ),
                        Arg(
                            flags=("-c", "--concurrency"),
                            help="The number of worker processes",
                            default=conf.getint("celery", "worker_concurrency"),
                            type=int,
                        ),
                        Arg(
                            flags=("-H", "--celery-hostname"),
                            help="Set the hostname of celery worker if you have multiple workers on a single machine",
                        ),
                        Arg(flags=("--pid",), help="PID file location", nargs="?"),
                        Arg(
                            flags=("-D", "--daemon"),
                            help="Daemonize instead of running in the foreground",
                            action="store_true",
                        ),
                        Arg(flags=("-u", "--umask"), help="Set the umask of celery worker in daemon mode"),
                        Arg(flags=("--stdout",), help="Redirect stdout to this file"),
                        Arg(flags=("--stderr",), help="Redirect stderr to this file"),
                        Arg(flags=("-l", "--log-file"), help="Location of the log file"),
                        Arg(
                            flags=("-a", "--autoscale"),
                            help="Minimum and Maximum number of worker to autoscale",
                        ),
                        Arg(
                            flags=("-s", "--skip-serve-logs"),
                            help="Don't start the serve logs process along with the workers",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("--without-mingle",),
                            help="Don't synchronize with other workers at start-up",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("--without-gossip",),
                            help="Don't subscribe to other workers events",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="flower",
                    help="Start a Celery Flower",
                    func=lazy_load_command("airflow.providers.celery.cli.celery_command.flower"),
                    args=[
                        Arg(
                            flags=("-H", "--hostname"),
                            help="Set the hostname on which to run the server",
                            default=conf.get("celery", "FLOWER_HOST"),
                        ),
                        Arg(
                            flags=("-p", "--port"),
                            help="The port on which to run the server",
                            default=conf.getint("celery", "FLOWER_PORT"),
                            type=int,
                        ),
                        Arg(flags=("-c", "--flower-conf"), help="Configuration file for flower"),
                        Arg(
                            flags=("-u", "--url-prefix"),
                            help="URL prefix for Flower",
                            default=conf.get("celery", "FLOWER_URL_PREFIX"),
                        ),
                        Arg(
                            flags=("-A", "--basic-auth"),
                            help="Securing Flower with Basic Authentication. Accepts user:password pairs separated by a comma. Example: flower_basic_auth = user1:password1,user2:password2",
                            default=conf.get("celery", "FLOWER_BASIC_AUTH"),
                        ),
                        Arg(flags=("-a", "--broker-api"), help="Broker API"),
                        Arg(flags=("--pid",), help="PID file location", nargs="?"),
                        Arg(
                            flags=("-D", "--daemon"),
                            help="Daemonize instead of running in the foreground",
                            action="store_true",
                        ),
                        Arg(flags=("--stdout",), help="Redirect stdout to this file"),
                        Arg(flags=("--stderr",), help="Redirect stderr to this file"),
                        Arg(flags=("-l", "--log-file"), help="Location of the log file"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="stop",
                    help="Stop the Celery worker gracefully",
                    func=lazy_load_command("airflow.providers.celery.cli.celery_command.stop_worker"),
                    args=[
                        Arg(flags=("--pid",), help="PID file location", nargs="?"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
            ],
            description="Start celery components. Works only when using CeleryExecutor. For more information, see https://airflow.apache.org/docs/apache-airflow/stable/executor/celery.html",
            epilog=None,
        ),
    ],
    "SequentialExecutor": [],
    "KubernetesExecutor": [
        GroupCommand(
            name="kubernetes",
            help="Tools to help run the KubernetesExecutor",
            subcommands=[
                ActionCommand(
                    name="cleanup-pods",
                    help="Clean up Kubernetes pods (created by KubernetesExecutor/KubernetesPodOperator) in evicted/failed/succeeded/pending states",
                    func=lazy_load_command(
                        "airflow.providers.cncf.kubernetes.cli.kubernetes_command.cleanup_pods"
                    ),
                    args=[
                        Arg(
                            flags=("--namespace",),
                            help="Kubernetes Namespace. Default value is `[kubernetes] namespace` in configuration.",
                            default=conf.get("kubernetes_executor", "namespace"),
                        ),
                        Arg(
                            flags=("--min-pending-minutes",),
                            help="Pending pods created before the time interval are to be cleaned up, measured in minutes. Default value is 30(m). The minimum value is 5(m).",
                            default=30,
                            type=positive_int(allow_zero=False),
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="generate-dag-yaml",
                    help="Generate YAML files for all tasks in DAG. Useful for debugging tasks without launching into a cluster",
                    func=lazy_load_command(
                        "airflow.providers.cncf.kubernetes.cli.kubernetes_command.generate_pod_yaml"
                    ),
                    args=[
                        Arg(flags=("dag_id",), help="The id of the dag"),
                        Arg(flags=("logical_date",), help="The logical date of the DAG", type=timeparse),
                        Arg(
                            flags=("-S", "--subdir"),
                            help="File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg' ",
                            default="/root/airflow/dags",
                        ),
                        Arg(
                            flags=("-o", "--output-path"),
                            help="The output for generated yaml files",
                            default="/opt/airflow",
                            type=str,
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
            ],
            description=None,
            epilog=None,
        ),
    ],
    "LocalKubernetesExecutor": [
        GroupCommand(
            name="kubernetes",
            help="Tools to help run the KubernetesExecutor",
            subcommands=[
                ActionCommand(
                    name="cleanup-pods",
                    help="Clean up Kubernetes pods (created by KubernetesExecutor/KubernetesPodOperator) in evicted/failed/succeeded/pending states",
                    func=lazy_load_command(
                        "airflow.providers.cncf.kubernetes.cli.kubernetes_command.cleanup_pods"
                    ),
                    args=[
                        Arg(
                            flags=("--namespace",),
                            help="Kubernetes Namespace. Default value is `[kubernetes] namespace` in configuration.",
                            default=conf.get("kubernetes_executor", "namespace"),
                        ),
                        Arg(
                            flags=("--min-pending-minutes",),
                            help="Pending pods created before the time interval are to be cleaned up, measured in minutes. Default value is 30(m). The minimum value is 5(m).",
                            default=30,
                            type=positive_int(allow_zero=False),
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="generate-dag-yaml",
                    help="Generate YAML files for all tasks in DAG. Useful for debugging tasks without launching into a cluster",
                    func=lazy_load_command(
                        "airflow.providers.cncf.kubernetes.cli.kubernetes_command.generate_pod_yaml"
                    ),
                    args=[
                        Arg(flags=("dag_id",), help="The id of the dag"),
                        Arg(flags=("logical_date",), help="The logical date of the DAG", type=timeparse),
                        Arg(
                            flags=("-S", "--subdir"),
                            help="File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg' ",
                            default="/root/airflow/dags",
                        ),
                        Arg(
                            flags=("-o", "--output-path"),
                            help="The output for generated yaml files",
                            default="/opt/airflow",
                            type=str,
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
            ],
            description=None,
            epilog=None,
        ),
    ],
    "CeleryKubernetesExecutor": [
        GroupCommand(
            name="celery",
            help="Celery components",
            subcommands=[
                ActionCommand(
                    name="worker",
                    help="Start a Celery worker node",
                    func=lazy_load_command("airflow.providers.celery.cli.celery_command.worker"),
                    args=[
                        Arg(
                            flags=("-q", "--queues"),
                            help="Comma delimited list of queues to serve",
                            default=conf.get("operators", "DEFAULT_QUEUE"),
                        ),
                        Arg(
                            flags=("-c", "--concurrency"),
                            help="The number of worker processes",
                            default=conf.getint("celery", "worker_concurrency"),
                            type=int,
                        ),
                        Arg(
                            flags=("-H", "--celery-hostname"),
                            help="Set the hostname of celery worker if you have multiple workers on a single machine",
                        ),
                        Arg(flags=("--pid",), help="PID file location", nargs="?"),
                        Arg(
                            flags=("-D", "--daemon"),
                            help="Daemonize instead of running in the foreground",
                            action="store_true",
                        ),
                        Arg(flags=("-u", "--umask"), help="Set the umask of celery worker in daemon mode"),
                        Arg(flags=("--stdout",), help="Redirect stdout to this file"),
                        Arg(flags=("--stderr",), help="Redirect stderr to this file"),
                        Arg(flags=("-l", "--log-file"), help="Location of the log file"),
                        Arg(
                            flags=("-a", "--autoscale"),
                            help="Minimum and Maximum number of worker to autoscale",
                        ),
                        Arg(
                            flags=("-s", "--skip-serve-logs"),
                            help="Don't start the serve logs process along with the workers",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("--without-mingle",),
                            help="Don't synchronize with other workers at start-up",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("--without-gossip",),
                            help="Don't subscribe to other workers events",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="flower",
                    help="Start a Celery Flower",
                    func=lazy_load_command("airflow.providers.celery.cli.celery_command.flower"),
                    args=[
                        Arg(
                            flags=("-H", "--hostname"),
                            help="Set the hostname on which to run the server",
                            default=conf.get("celery", "FLOWER_HOST"),
                        ),
                        Arg(
                            flags=("-p", "--port"),
                            help="The port on which to run the server",
                            default=conf.getint("celery", "FLOWER_PORT"),
                            type=int,
                        ),
                        Arg(flags=("-c", "--flower-conf"), help="Configuration file for flower"),
                        Arg(
                            flags=("-u", "--url-prefix"),
                            help="URL prefix for Flower",
                            default=conf.get("celery", "FLOWER_URL_PREFIX"),
                        ),
                        Arg(
                            flags=("-A", "--basic-auth"),
                            help="Securing Flower with Basic Authentication. Accepts user:password pairs separated by a comma. Example: flower_basic_auth = user1:password1,user2:password2",
                            default=conf.get("celery", "FLOWER_BASIC_AUTH"),
                        ),
                        Arg(flags=("-a", "--broker-api"), help="Broker API"),
                        Arg(flags=("--pid",), help="PID file location", nargs="?"),
                        Arg(
                            flags=("-D", "--daemon"),
                            help="Daemonize instead of running in the foreground",
                            action="store_true",
                        ),
                        Arg(flags=("--stdout",), help="Redirect stdout to this file"),
                        Arg(flags=("--stderr",), help="Redirect stderr to this file"),
                        Arg(flags=("-l", "--log-file"), help="Location of the log file"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="stop",
                    help="Stop the Celery worker gracefully",
                    func=lazy_load_command("airflow.providers.celery.cli.celery_command.stop_worker"),
                    args=[
                        Arg(flags=("--pid",), help="PID file location", nargs="?"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
            ],
            description="Start celery components. Works only when using CeleryExecutor. For more information, see https://airflow.apache.org/docs/apache-airflow/stable/executor/celery.html",
            epilog=None,
        ),
        GroupCommand(
            name="kubernetes",
            help="Tools to help run the KubernetesExecutor",
            subcommands=[
                ActionCommand(
                    name="cleanup-pods",
                    help="Clean up Kubernetes pods (created by KubernetesExecutor/KubernetesPodOperator) in evicted/failed/succeeded/pending states",
                    func=lazy_load_command(
                        "airflow.providers.cncf.kubernetes.cli.kubernetes_command.cleanup_pods"
                    ),
                    args=[
                        Arg(
                            flags=("--namespace",),
                            help="Kubernetes Namespace. Default value is `[kubernetes] namespace` in configuration.",
                            default=conf.get("kubernetes_executor", "namespace"),
                        ),
                        Arg(
                            flags=("--min-pending-minutes",),
                            help="Pending pods created before the time interval are to be cleaned up, measured in minutes. Default value is 30(m). The minimum value is 5(m).",
                            default=30,
                            type=positive_int(allow_zero=False),
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="generate-dag-yaml",
                    help="Generate YAML files for all tasks in DAG. Useful for debugging tasks without launching into a cluster",
                    func=lazy_load_command(
                        "airflow.providers.cncf.kubernetes.cli.kubernetes_command.generate_pod_yaml"
                    ),
                    args=[
                        Arg(flags=("dag_id",), help="The id of the dag"),
                        Arg(flags=("logical_date",), help="The logical date of the DAG", type=timeparse),
                        Arg(
                            flags=("-S", "--subdir"),
                            help="File location or directory from which to look for the dag. Defaults to '[AIRFLOW_HOME]/dags' where [AIRFLOW_HOME] is the value you set for 'AIRFLOW_HOME' config you set in 'airflow.cfg' ",
                            default="/root/airflow/dags",
                        ),
                        Arg(
                            flags=("-o", "--output-path"),
                            help="The output for generated yaml files",
                            default="/opt/airflow",
                            type=str,
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
            ],
            description=None,
            epilog=None,
        ),
    ],
}
AUTH_MANAGERS_CLI_COMMANDS = {
    "SimpleAuthManager": [],
    "FabAuthManager": [
        GroupCommand(
            name="users",
            help="Manage users",
            subcommands=[
                ActionCommand(
                    name="list",
                    help="List users",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.user_command.users_list"
                    ),
                    args=[
                        Arg(
                            flags=("-o", "--output"),
                            help="Output format. Allowed values: json, yaml, plain, table (default: table)",
                            default="table",
                            choices=("table", "json", "yaml", "plain"),
                            metavar="(table, json, yaml, plain)",
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="create",
                    help="Create a user",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.user_command.users_create"
                    ),
                    args=[
                        Arg(
                            flags=("-r", "--role"),
                            help="Role of the user. Existing roles include Admin, User, Op, Viewer, and Public",
                            type=str,
                            required="True",
                        ),
                        Arg(
                            flags=("-u", "--username"), help="Username of the user", type=str, required="True"
                        ),
                        Arg(flags=("-e", "--email"), help="Email of the user", type=str, required="True"),
                        Arg(
                            flags=("-f", "--firstname"),
                            help="First name of the user",
                            type=str,
                            required="True",
                        ),
                        Arg(
                            flags=("-l", "--lastname"),
                            help="Last name of the user",
                            type=str,
                            required="True",
                        ),
                        Arg(
                            flags=("-p", "--password"),
                            help="Password of the user, required to create a user without --use-random-password",
                            type=str,
                        ),
                        Arg(
                            flags=("--use-random-password",),
                            help="Do not prompt for password. Use random string instead. Required to create a user without --password ",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog="""examples:
To create an user with "Admin" role and username equals to "admin", run:

    $ airflow users create \
          --username admin \
          --firstname FIRST_NAME \
          --lastname LAST_NAME \
          --role Admin \
          --email admin@example.org""",
                    hide=False,
                ),
                ActionCommand(
                    name="reset-password",
                    help="Reset a user's password",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.user_command.user_reset_password"
                    ),
                    args=[
                        Arg(flags=("-u", "--username"), help="Username of the user", type=str),
                        Arg(flags=("-e", "--email"), help="Email of the user", type=str),
                        Arg(
                            flags=("-p", "--password"),
                            help="Password of the user, required to create a user without --use-random-password",
                            type=str,
                        ),
                        Arg(
                            flags=("--use-random-password",),
                            help="Do not prompt for password. Use random string instead. Required to create a user without --password ",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog="""examples:
To reset an user with username equals to "admin", run:

    $ airflow users reset-password \
          --username admin""",
                    hide=False,
                ),
                ActionCommand(
                    name="delete",
                    help="Delete a user",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.user_command.users_delete"
                    ),
                    args=[
                        Arg(flags=("-u", "--username"), help="Username of the user", type=str),
                        Arg(flags=("-e", "--email"), help="Email of the user", type=str),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="add-role",
                    help="Add role to a user",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.user_command.add_role"
                    ),
                    args=[
                        Arg(flags=("-u", "--username"), help="Username of the user", type=str),
                        Arg(flags=("-e", "--email"), help="Email of the user", type=str),
                        Arg(
                            flags=("-r", "--role"),
                            help="Role of the user. Existing roles include Admin, User, Op, Viewer, and Public",
                            type=str,
                            required="True",
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="remove-role",
                    help="Remove role from a user",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.user_command.remove_role"
                    ),
                    args=[
                        Arg(flags=("-u", "--username"), help="Username of the user", type=str),
                        Arg(flags=("-e", "--email"), help="Email of the user", type=str),
                        Arg(
                            flags=("-r", "--role"),
                            help="Role of the user. Existing roles include Admin, User, Op, Viewer, and Public",
                            type=str,
                            required="True",
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="import",
                    help="Import users",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.user_command.users_import"
                    ),
                    args=[
                        Arg(
                            flags=("import",),
                            help="""Import users from JSON file. Example format::

    [
        {
            "email": "foo@bar.org",
            "firstname": "Jon",
            "lastname": "Doe",
            "roles": ["Public"],
            "username": "jondoe"
        }
    ]""",
                            metavar="FILEPATH",
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="export",
                    help="Export all users",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.user_command.users_export"
                    ),
                    args=[
                        Arg(flags=("export",), help="Export all users to JSON file", metavar="FILEPATH"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
            ],
            description=None,
            epilog=None,
        ),
        GroupCommand(
            name="roles",
            help="Manage roles",
            subcommands=[
                ActionCommand(
                    name="list",
                    help="List roles",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.role_command.roles_list"
                    ),
                    args=[
                        Arg(flags=("-p", "--permission"), help="Show role permissions", action="store_true"),
                        Arg(
                            flags=("-o", "--output"),
                            help="Output format. Allowed values: json, yaml, plain, table (default: table)",
                            default="table",
                            choices=("table", "json", "yaml", "plain"),
                            metavar="(table, json, yaml, plain)",
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="create",
                    help="Create role",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.role_command.roles_create"
                    ),
                    args=[
                        Arg(flags=("role",), help="The name of a role", nargs="*"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="delete",
                    help="Delete role",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.role_command.roles_delete"
                    ),
                    args=[
                        Arg(flags=("role",), help="The name of a role", nargs="*"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="add-perms",
                    help="Add roles permissions",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.role_command.roles_add_perms"
                    ),
                    args=[
                        Arg(flags=("role",), help="The name of a role", nargs="*"),
                        Arg(
                            flags=("-r", "--resource"),
                            help="The name of permissions",
                            nargs="*",
                            required="True",
                        ),
                        Arg(
                            flags=("-a", "--action"),
                            help="The action of permissions",
                            nargs="*",
                            required="True",
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="del-perms",
                    help="Delete roles permissions",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.role_command.roles_del_perms"
                    ),
                    args=[
                        Arg(flags=("role",), help="The name of a role", nargs="*"),
                        Arg(
                            flags=("-r", "--resource"),
                            help="The name of permissions",
                            nargs="*",
                            required="True",
                        ),
                        Arg(flags=("-a", "--action"), help="The action of permissions", nargs="*"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="export",
                    help="Export roles (without permissions) from db to JSON file",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.role_command.roles_export"
                    ),
                    args=[
                        Arg(flags=("file",), help="Export all roles to JSON file", nargs=None),
                        Arg(
                            flags=("-p", "--pretty"),
                            help="Format output JSON file by sorting role names and indenting by 4 spaces",
                            action="store_true",
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="import",
                    help="Import roles (without permissions) from JSON file to db",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.role_command.roles_import"
                    ),
                    args=[
                        Arg(flags=("file",), help="Import roles from JSON file", nargs=None),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
            ],
            description=None,
            epilog=None,
        ),
        ActionCommand(
            name="sync-perm",
            help="Update permissions for existing roles and optionally DAGs",
            func=lazy_load_command(
                "airflow.providers.fab.auth_manager.cli_commands.sync_perm_command.sync_perm"
            ),
            args=[
                Arg(
                    flags=("--include-dags",),
                    help="If passed, DAG specific permissions will also be synced.",
                    action="store_true",
                ),
                Arg(flags=("-v", "--verbose"), help="Make logging output more verbose", action="store_true"),
            ],
            description=None,
            epilog=None,
            hide=False,
        ),
        GroupCommand(
            name="fab-db",
            help="Manage FAB",
            subcommands=[
                ActionCommand(
                    name="migrate",
                    help="Migrates the FAB metadata database to the latest version",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.db_command.migratedb"
                    ),
                    args=[
                        Arg(
                            flags=("-r", "--to-revision"),
                            help="(Optional) If provided, only run migrations up to and including this Alembic revision.",
                        ),
                        Arg(
                            flags=("-n", "--to-version"),
                            help="(Optional) The airflow version to upgrade to. Note: must provide either `--to-revision` or `--to-version`.",
                        ),
                        Arg(
                            flags=("-s", "--show-sql-only"),
                            help="Don't actually run migrations; just print out sql scripts for offline migration. Required if using either `--from-revision` or `--from-version`.",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("--from-revision",),
                            help="(Optional) If generating sql, may supply a *from* Alembic revision",
                        ),
                        Arg(
                            flags=("--from-version",),
                            help="(Optional) If generating sql, may supply a *from* version",
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description="Migrate the schema of the FAB metadata database. Create the database if it does not exist To print but not execute commands, use option ``--show-sql-only``. If using options ``--from-revision`` or ``--from-version``, you must also use ``--show-sql-only``, because if actually *running* migrations, we should only migrate from the *current* Alembic revision.",
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="downgrade",
                    help="Downgrade the schema of the FAB metadata database.",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.db_command.downgrade"
                    ),
                    args=[
                        Arg(
                            flags=("-r", "--to-revision"),
                            help="The Alembic revision to downgrade to. Note: must provide either `--to-revision` or `--to-version`.",
                        ),
                        Arg(
                            flags=("-n", "--to-version"),
                            help="(Optional) If provided, only run migrations up to this version.",
                        ),
                        Arg(
                            flags=("-s", "--show-sql-only"),
                            help="Don't actually run migrations; just print out sql scripts for offline migration. Required if using either `--from-revision` or `--from-version`.",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("-y", "--yes"),
                            help="Do not prompt to confirm. Use with care!",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("--from-revision",),
                            help="(Optional) If generating sql, may supply a *from* Alembic revision",
                        ),
                        Arg(
                            flags=("--from-version",),
                            help="(Optional) If generating sql, may supply a *from* version",
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description="Downgrade the schema of the FAB metadata database. You must provide either `--to-revision` or `--to-version`. To print but not execute commands, use option `--show-sql-only`. If using options `--from-revision` or `--from-version`, you must also use `--show-sql-only`, because if actually *running* migrations, we should only migrate from the *current* Alembic revision.",
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="reset",
                    help="Burn down and rebuild the FAB metadata database",
                    func=lazy_load_command(
                        "airflow.providers.fab.auth_manager.cli_commands.db_command.resetdb"
                    ),
                    args=[
                        Arg(
                            flags=("-y", "--yes"),
                            help="Do not prompt to confirm. Use with care!",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("-s", "--skip-init"),
                            help="Only remove tables; do not perform db init.",
                            action="store_true",
                            default=False,
                        ),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
            ],
            description=None,
            epilog=None,
        ),
    ],
    "AwsAuthManager": [
        GroupCommand(
            name="aws-auth-manager",
            help="Manage resources used by AWS auth manager",
            subcommands=[
                ActionCommand(
                    name="init-avp",
                    help="Initialize Amazon Verified resources to be used by AWS manager",
                    func=lazy_load_command(
                        "airflow.providers.amazon.aws.auth_manager.cli.avp_commands.init_avp"
                    ),
                    args=[
                        Arg(
                            flags=("--policy-store-description",),
                            help="Policy store description",
                            default="Airflow",
                        ),
                        Arg(flags=("--dry-run",), help="Perform a dry run", action="store_true"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
                ActionCommand(
                    name="update-avp-schema",
                    help="Update Amazon Verified permissions policy store schema to the latest version in 'airflow/providers/amazon/aws/auth_manager/avp/schema.json'",
                    func=lazy_load_command(
                        "airflow.providers.amazon.aws.auth_manager.cli.avp_commands.update_schema"
                    ),
                    args=[
                        Arg(flags=("--policy-store-id",), help="Policy store ID"),
                        Arg(flags=("--dry-run",), help="Perform a dry run", action="store_true"),
                        Arg(
                            flags=("-v", "--verbose"),
                            help="Make logging output more verbose",
                            action="store_true",
                        ),
                    ],
                    description=None,
                    epilog=None,
                    hide=False,
                ),
            ],
            description=None,
            epilog=None,
        ),
    ],
}
