#!/bin/bash
set -e

function get_debugging_info {
  echo "Failed to deploy Airflow!"
  echo "Printing description and logs where containers in pod are not ready..."
  for pod in $(kubectl get pods -n airflow | grep -v NAME | grep -v 1/1 | grep -v 2/2 | grep -v 3/3 | grep -v Completed | awk '{ print $1 }'); do
    echo "======================="
    set -x
    kubectl describe pod -n airflow $pod
    kubectl logs -n airflow $pod | tail -n 30
    set +x
    echo "======================="
  done
  kubectl get pods --all-namespaces
  echo "======================="
  kubectl get ds --all-namespaces
  echo "======================="
  kubectl get sts --all-namespaces
  echo "======================="
  kubectl get deployments --all-namespaces
}

# Common bash line that sets DIR to the directory of this script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
REPO_DIR=$DIR/../

if [[ -z "${HELM_CHART_PATH}" ]]; then
  export HELM_CHART_PATH=$REPO_DIR
fi

source $DIR/clean-slate

echo "Deploying Airflow..."

kubectl get pods -w &
WATCH_PID=$!

START=$(date +%s)

set +e
set -x

helm install \
  -n airflow \
  --set executor=$EXECUTOR \
  --wait \
  $HELM_CHART_PATH

if [ ! $? -eq 0 ]; then
  echo "Helm chart failed to install"
  get_debugging_info
  exit 1
fi

HELM_CODE=0
set +x

# Wait for all pods to become ready
RC=0
while [ $RC -eq 0 ]; do
  NOW=$(date +%s)
  DURATION="$(($NOW-$START))"
  echo "Waiting for all pods to become ready. ${DURATION} seconds have elapsed, timeout at 800 seconds"
  if [ $DURATION -gt 800 ];then
    HELM_CODE=1
    RC=1
    echo "Error (timeout): giving up after 800 seconds"
  else
    sleep 10
    kubectl get pods > /tmp/pods
    if [ ! $? -eq 0 ];then
      echo "kubectl get pods timed out. retrying."
      continue
    fi
    set +e
    cat /tmp/pods | grep -v 1/1 | grep -v 2/2 | grep -v 3/3 | grep -v NAME >/dev/null 2>&1
    RC=$?
    set -e
  fi
done

kill $WATCH_PID

# Output debugging information if the Helm install failed
if [ $HELM_CODE -eq 0 ]; then
  echo "Airflow deployed!"
else
  echo "Failed to deploy Airflow!"
  get_debugging_info
  exit 1
fi
