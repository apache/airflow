{{/*
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
*/}}

################################
## Airflow Worker Deployment
#################################
{{- $persistence := and .Values.workers.persistence.enabled .Values.workers.celery.persistence.enabled }}
{{- $keda := or .Values.workers.celery.keda.enabled .Values.workers.keda.enabled }}
{{- $hpa := and (or .Values.workers.celery.hpa.enabled .Values.workers.hpa.enabled) (or (not .Values.workers.celery.keda.enabled) (not .Values.workers.keda.enabled)) }}
{{- if or (contains "CeleryExecutor" .Values.executor) (contains "CeleryKubernetesExecutor" .Values.executor) }}
{{- $nodeSelector := or .Values.workers.celery.nodeSelector .Values.workers.nodeSelector .Values.nodeSelector }}
{{- $affinity := or .Values.workers.celery.affinity .Values.workers.affinity .Values.affinity }}
{{- $tolerations := or .Values.workers.celery.tolerations .Values.workers.tolerations .Values.tolerations }}
{{- $topologySpreadConstraints := or .Values.workers.celery.topologySpreadConstraints .Values.workers.topologySpreadConstraints .Values.topologySpreadConstraints }}
{{- $revisionHistoryLimit := or .Values.workers.celery.revisionHistoryLimit .Values.workers.revisionHistoryLimit .Values.revisionHistoryLimit }}
{{- $securityContext := include "airflowPodSecurityContext" (list . .Values.workers) }}
{{- $securityContextCelery := include "airflowPodSecurityContext" (list . .Values.workers.celery) }}
{{- $containerSecurityContext := include "containerSecurityContext" (list . .Values.workers) }}
{{- $containerSecurityContextCelery := include "containerSecurityContext" (list . .Values.workers.celery) }}
{{- $containerSecurityContextPersistence := include "containerSecurityContext" (list . .Values.workers.persistence) }}
{{- $containerSecurityContextPersistenceCelery := include "containerSecurityContext" (list . .Values.workers.celery.persistence) }}
{{- $containerSecurityContextWaitForMigrations := include "containerSecurityContext" (list . .Values.workers.waitForMigrations) }}
{{- $containerSecurityContextWaitForMigrationsCelery := include "containerSecurityContext" (list . .Values.workers.celery.waitForMigrations) }}
{{- $containerSecurityContextLogGroomerSidecar := include "containerSecurityContext" (list . .Values.workers.logGroomerSidecar) }}
{{- $containerSecurityContextLogGroomerSidecarCelery := include "containerSecurityContext" (list . .Values.workers.celery.logGroomerSidecar) }}
{{- $containerSecurityContextKerberosSidecar := include "containerSecurityContext" (list . .Values.workers.kerberosSidecar) }}
{{- $containerSecurityContextKerberosSidecarCelery := include "containerSecurityContext" (list . .Values.workers.celery.kerberosSidecar) }}
{{- $containerLifecycleHooks := or .Values.workers.celery.containerLifecycleHooks .Values.workers.containerLifecycleHooks .Values.containerLifecycleHooks }}
{{- $containerLifecycleHooksLogGroomerSidecar := or .Values.workers.celery.logGroomerSidecar.containerLifecycleHooks .Values.workers.logGroomerSidecar.containerLifecycleHooks .Values.containerLifecycleHooks }}
{{- $containerLifecycleHooksKerberosSidecar := or .Values.workers.celery.kerberosSidecar.containerLifecycleHooks .Values.workers.kerberosSidecar.containerLifecycleHooks .Values.containerLifecycleHooks }}
{{- $safeToEvict := dict "cluster-autoscaler.kubernetes.io/safe-to-evict" ((or .Values.workers.celery.safeToEvict .Values.workers.safeToEvict) | toString) }}
{{- $podAnnotations := mergeOverwrite (deepCopy .Values.airflowPodAnnotations) $safeToEvict .Values.workers.podAnnotations .Values.workers.celery.podAnnotations }}
apiVersion: apps/v1
kind: {{ if $persistence }}StatefulSet{{ else }}Deployment{{ end }}
metadata:
  name: {{ include "airflow.fullname" . }}-worker
  labels:
    tier: airflow
    component: worker
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
    {{- with .Values.labels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- if or .Values.workers.annotations .Values.workers.celery.annotations }}
  annotations: {{- toYaml (.Values.workers.celery.annotations | default .Values.workers.annotations) | nindent 4 }}
  {{- end }}
spec:
  {{- if $persistence }}
  serviceName: {{ include "airflow.fullname" . }}-worker
  {{- end }}
  {{- if and (not $keda) (not $hpa) }}
  {{- if ne (int .Values.workers.celery.replicas) 1 }}
  replicas: {{ .Values.workers.celery.replicas }}
  {{- else }}
  replicas: {{ .Values.workers.replicas }}
  {{- end }}
  {{- end }}
  {{- if $revisionHistoryLimit }}
  revisionHistoryLimit: {{ $revisionHistoryLimit }}
  {{- end }}
  {{- if and $persistence (or .Values.workers.persistence.persistentVolumeClaimRetentionPolicy .Values.workers.celery.persistence.persistentVolumeClaimRetentionPolicy) }}
  persistentVolumeClaimRetentionPolicy: {{- toYaml (.Values.workers.celery.persistence.persistentVolumeClaimRetentionPolicy | default .Values.workers.persistence.persistentVolumeClaimRetentionPolicy) | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      tier: airflow
      component: worker
      release: {{ .Release.Name }}
  {{- if and $persistence (or .Values.workers.podManagementPolicy .Values.workers.celery.podManagementPolicy) }}
  podManagementPolicy: {{ .Values.workers.celery.podManagementPolicy | default .Values.workers.podManagementPolicy }}
  {{- end }}
  {{- if and $persistence (or .Values.workers.celery.updateStrategy .Values.workers.updateStrategy) }}
  updateStrategy: {{- toYaml (.Values.workers.celery.updateStrategy | default .Values.workers.updateStrategy) | nindent 4 }}
  {{- end }}
  {{- if and (not $persistence) (or .Values.workers.strategy .Values.workers.celery.strategy) }}
  {{- if ne (toJson .Values.workers.celery.strategy | quote) (toJson "{\"rollingUpdate\":{\"maxSurge\":\"100%\",\"maxUnavailable\":\"50%\"}}") }}
  strategy: {{- toYaml .Values.workers.celery.strategy | nindent 4 }}
  {{- else }}
  strategy: {{- toYaml .Values.workers.strategy | nindent 4 }}
  {{- end }}
  {{- end }}
  template:
    metadata:
      labels:
        tier: airflow
        component: worker
        release: {{ .Release.Name }}
        {{- if or .Values.labels .Values.workers.labels .Values.workers.celery.labels }}
          {{- mustMerge .Values.workers.celery.labels .Values.workers.labels .Values.labels | toYaml | nindent 8 }}
        {{- end }}
      annotations:
        checksum/metadata-secret: {{ include (print $.Template.BasePath "/secrets/metadata-connection-secret.yaml") . | sha256sum }}
        checksum/result-backend-secret: {{ include (print $.Template.BasePath "/secrets/result-backend-connection-secret.yaml") . | sha256sum }}
        checksum/pgbouncer-config-secret: {{ include (print $.Template.BasePath "/secrets/pgbouncer-config-secret.yaml") . | sha256sum }}
        checksum/webserver-secret-key: {{ include (print $.Template.BasePath "/secrets/webserver-secret-key-secret.yaml") . | sha256sum }}
        checksum/kerberos-keytab: {{ include (print $.Template.BasePath "/secrets/kerberos-keytab-secret.yaml") . | sha256sum }}
        checksum/airflow-config: {{ include (print $.Template.BasePath "/configmaps/configmap.yaml") . | sha256sum }}
        checksum/extra-configmaps: {{ include (print $.Template.BasePath "/configmaps/extra-configmaps.yaml") . | sha256sum }}
        checksum/extra-secrets: {{ include (print $.Template.BasePath "/secrets/extra-secrets.yaml") . | sha256sum }}
        {{- if $podAnnotations }}
          {{- toYaml $podAnnotations | nindent 8 }}
        {{- end }}
    spec:
      {{- if or .Values.workers.runtimeClassName .Values.workers.celery.runtimeClassName }}
      runtimeClassName: {{ .Values.workers.celery.runtimeClassName | default .Values.workers.runtimeClassName }}
      {{- end }}
      {{- if or .Values.workers.priorityClassName .Values.workers.celery.priorityClassName }}
      priorityClassName: {{ .Values.workers.celery.priorityClassName | default .Values.workers.priorityClassName }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
      {{- end }}
      nodeSelector: {{- toYaml $nodeSelector | nindent 8 }}
      affinity:
        {{- if $affinity }}
          {{- toYaml $affinity | nindent 8 }}
        {{- else }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  component: worker
              topologyKey: kubernetes.io/hostname
            weight: 100
        {{- end }}
      tolerations: {{- toYaml $tolerations | nindent 8 }}
      topologySpreadConstraints: {{- toYaml $topologySpreadConstraints | nindent 8 }}
      {{- if or .Values.workers.hostAliases .Values.workers.celery.hostAliases }}
      hostAliases: {{- toYaml (.Values.workers.celery.hostAliases | default .Values.workers.hostAliases) | nindent 8 }}
      {{- end }}
      {{- if ne (int .Values.workers.celery.terminationGracePeriodSeconds) 600 }}
      terminationGracePeriodSeconds: {{ .Values.workers.celery.terminationGracePeriodSeconds }}
      {{- else }}
      terminationGracePeriodSeconds: {{ .Values.workers.terminationGracePeriodSeconds }}
      {{- end }}
      restartPolicy: Always
      {{- if .Values.workers.useWorkerDedicatedServiceAccounts }}
      serviceAccountName: {{ include "worker.celery.serviceAccountName" . }}
      {{- else }}
      serviceAccountName: {{ include "worker.serviceAccountName" . }}
      {{- end }}
      {{- if .Values.workers.celery.securityContexts.pod }}
      securityContext: {{ $securityContextCelery | nindent 8 }}
      {{- else }}
      securityContext: {{ $securityContext | nindent 8 }}
      {{- end }}
      {{- if or .Values.registry.secretName .Values.registry.connection }}
      imagePullSecrets:
        - name: {{ template "registry_secret" . }}
      {{- end }}
      initContainers:
        {{- if and $persistence (or .Values.workers.persistence.fixPermissions .Values.workers.celery.persistence.fixPermissions) }}
        - name: volume-permissions
          resources: {{- toYaml (.Values.workers.celery.resources | default .Values.workers.resources) | nindent 12 }}
          image: {{ template "airflow_image" . }}
          imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
          command:
            - chown
            - -R
            - "{{ include "airflowPodSecurityContextsIds" (list . .Values.workers.celery .Values.workers) }}"
            - {{ template "airflow_logs" . }}
          {{- if .Values.workers.celery.persistence.securityContexts.container }}
          securityContext: {{ $containerSecurityContextPersistenceCelery | nindent 12 }}
          {{- else }}
          securityContext: {{ $containerSecurityContextPersistence | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: logs
              mountPath: {{ template "airflow_logs" . }}
        {{- end }}
        {{- if and (semverCompare ">=2.8.0" .Values.airflowVersion) (or .Values.workers.kerberosInitContainer.enabled .Values.workers.celery.kerberosInitContainer.enabled) }}
        - name: kerberos-init
          image: {{ template "airflow_image" . }}
          imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
          args: ["kerberos", "-o"]
          resources: {{- toYaml (.Values.workers.celery.kerberosInitContainer.resources | default .Values.workers.kerberosInitContainer.resources) | nindent 12 }}
          volumeMounts:
            - name: logs
              mountPath: {{ template "airflow_logs" . }}
            {{- include "airflow_config_mount" . | nindent 12 }}
            - name: config
              mountPath: {{ .Values.kerberos.configPath | quote }}
              subPath: krb5.conf
              readOnly: true
            - name: kerberos-keytab
              subPath: "kerberos.keytab"
              mountPath: {{ .Values.kerberos.keytabPath | quote }}
              readOnly: true
            - name: kerberos-ccache
              mountPath: {{ .Values.kerberos.ccacheMountPath | quote }}
              readOnly: false
            {{- if .Values.volumeMounts }}
              {{- toYaml .Values.volumeMounts | nindent 12 }}
            {{- end }}
            {{- if or .Values.workers.extraVolumeMounts .Values.workers.celery.extraVolumeMounts }}
              {{- tpl (toYaml (.Values.workers.celery.extraVolumeMounts | default .Values.workers.extraVolumeMounts)) . | nindent 12 }}
            {{- end }}
            {{- if or .Values.webserver.webserverConfig .Values.webserver.webserverConfigConfigMapName }}
              {{- include "airflow_webserver_config_mount" . | nindent 12 }}
            {{- end }}
          envFrom: {{- include "custom_airflow_environment_from" . | default "\n  []" | indent 10 }}
          env:
            - name: KRB5_CONFIG
              value: {{ .Values.kerberos.configPath | quote }}
            - name: KRB5CCNAME
              value: {{ include "kerberos_ccache_path" . | quote }}
            {{- include "custom_airflow_environment" . | indent 10 }}
            {{- include "standard_airflow_environment" . | indent 10 }}
        {{- end }}
        {{- if and .Values.workers.waitForMigrations.enabled .Values.workers.celery.waitForMigrations.enabled }}
        - name: wait-for-airflow-migrations
          resources: {{- toYaml (.Values.workers.celery.resources | default .Values.workers.resources) | nindent 12 }}
          image: {{ template "airflow_image_for_migrations" . }}
          imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
          {{- if .Values.workers.celery.waitForMigrations.securityContexts.container }}
          securityContext: {{ $containerSecurityContextWaitForMigrationsCelery | nindent 12 }}
          {{- else }}
          securityContext: {{ $containerSecurityContextWaitForMigrations | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- include "airflow_config_mount" . | nindent 12 }}
            {{- if .Values.volumeMounts }}
              {{- toYaml .Values.volumeMounts | nindent 12 }}
            {{- end }}
            {{- if or .Values.workers.extraVolumeMounts .Values.workers.celery.extraVolumeMounts }}
              {{- tpl (toYaml (.Values.workers.celery.extraVolumeMounts | default .Values.workers.extraVolumeMounts)) . | nindent 12 }}
            {{- end }}
            {{- if or .Values.webserver.webserverConfig .Values.webserver.webserverConfigConfigMapName }}
              {{- include "airflow_webserver_config_mount" . | nindent 12 }}
            {{- end }}
          args: {{- include "wait-for-migrations-command" . | indent 10 }}
          envFrom: {{- include "custom_airflow_environment_from" . | default "\n  []" | indent 10 }}
          env:
            {{- include "custom_airflow_environment" . | indent 10 }}
            {{- include "standard_airflow_environment" . | indent 10 }}
            {{- if or .Values.workers.waitForMigrations.env .Values.workers.celery.waitForMigrations.env }}
              {{- tpl (toYaml (.Values.workers.celery.waitForMigrations.env | default .Values.workers.waitForMigrations.env)) $ | nindent 12 }}
            {{- end }}
        {{- end }}
        {{- if and (.Values.dags.gitSync.enabled) (not .Values.dags.persistence.enabled) }}
          {{- include "git_sync_container" (dict "Values" .Values "is_init" "true" "Template" .Template) | nindent 8 }}
        {{- end }}
        {{- if or .Values.workers.extraInitContainers .Values.workers.celery.extraInitContainers }}
          {{- tpl (toYaml (.Values.workers.celery.extraInitContainers | default .Values.workers.extraInitContainers)) . | nindent 8 }}
        {{- end }}
      containers:
        - name: worker
          image: {{ template "airflow_image" . }}
          imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
          {{- if .Values.workers.celery.securityContexts.container }}
          securityContext: {{ $containerSecurityContextCelery | nindent 12 }}
          {{- else }}
          securityContext: {{ $containerSecurityContext | nindent 12 }}
          {{- end }}
          {{- if $containerLifecycleHooks  }}
          lifecycle: {{- tpl (toYaml $containerLifecycleHooks) . | nindent 12 }}
          {{- end }}
          {{- if or .Values.workers.command .Values.workers.celery.command }}
          command: {{ tpl (toYaml (.Values.workers.celery.command | default .Values.workers.command)) . | nindent 12 }}
          {{- end }}
          {{- if or .Values.workers.args .Values.workers.celery.args }}
          {{- if ne (.Values.workers.celery.args | toJson) (list "bash" "-c" "exec \\\nairflow {{ semverCompare \">=2.0.0\" .Values.airflowVersion | ternary \"celery worker\" \"worker\" }}" | toJson)}}
          args: {{ tpl (toYaml .Values.workers.celery.args) . | nindent 12 }}
          {{- else }}
          args: {{ tpl (toYaml .Values.workers.args) . | nindent 12 }}
          {{- end }}
          {{- end }}
          resources: {{- toYaml (.Values.workers.celery.resources | default .Values.workers.resources) | nindent 12 }}
          {{- if and .Values.workers.livenessProbe.enabled .Values.workers.celery.livenessProbe.enabled }}
          livenessProbe:
            {{- if ne (int .Values.workers.celery.livenessProbe.initialDelaySeconds) 10 }}
            initialDelaySeconds: {{ .Values.workers.celery.livenessProbe.initialDelaySeconds }}
            {{- else }}
            initialDelaySeconds: {{ .Values.workers.livenessProbe.initialDelaySeconds }}
            {{- end }}
            {{- if ne (int .Values.workers.celery.livenessProbe.timeoutSeconds) 20 }}
            timeoutSeconds: {{ .Values.workers.celery.livenessProbe.timeoutSeconds }}
            {{- else }}
            timeoutSeconds: {{ .Values.workers.livenessProbe.timeoutSeconds }}
            {{- end }}
            {{- if ne (int .Values.workers.celery.livenessProbe.failureThreshold) 5 }}
            failureThreshold: {{ .Values.workers.celery.livenessProbe.failureThreshold }}
            {{- else }}
            failureThreshold: {{ .Values.workers.livenessProbe.failureThreshold }}
            {{- end }}
            {{- if ne (int .Values.workers.celery.livenessProbe.periodSeconds) 60 }}
            periodSeconds: {{ .Values.workers.celery.livenessProbe.periodSeconds }}
            {{- else }}
            periodSeconds: {{ .Values.workers.livenessProbe.periodSeconds }}
            {{- end }}
            exec:
              command:
                {{- if or .Values.workers.livenessProbe.command .Values.workers.celery.livenessProbe.command }}
                  {{- toYaml (.Values.workers.celery.livenessProbe.command | default .Values.workers.livenessProbe.command) | nindent 16 }}
                {{- else }}
                - sh
                - -c
                - CONNECTION_CHECK_MAX_COUNT=0 exec /entrypoint python -m celery --app {{ include "celery_executor_namespace" . }} inspect ping -d celery@$(hostname)
                {{- end }}
          {{- end }}
          ports:
            {{- if or .Values.workers.extraPorts .Values.workers.celery.extraPorts }}
              {{- toYaml (.Values.workers.celery.extraPorts | default .Values.workers.extraPorts) | nindent 12 }}
            {{- end }}
            - name: worker-logs
              containerPort: {{ .Values.ports.workerLogs }}
          volumeMounts:
            {{- if .Values.volumeMounts }}
              {{- toYaml .Values.volumeMounts | nindent 12 }}
            {{- end }}
            {{- if or .Values.workers.extraVolumeMounts .Values.workers.celery.extraVolumeMounts }}
              {{- tpl (toYaml (.Values.workers.celery.extraVolumeMounts | default .Values.workers.extraVolumeMounts)) . | nindent 12 }}
            {{- end }}
            - name: logs
              mountPath: {{ template "airflow_logs" . }}
            {{- include "airflow_config_mount" . | nindent 12 }}
            {{- if .Values.kerberos.enabled }}
            - name: kerberos-keytab
              subPath: "kerberos.keytab"
              mountPath: {{ .Values.kerberos.keytabPath | quote }}
              readOnly: true
            - name: config
              mountPath: {{ .Values.kerberos.configPath | quote }}
              subPath: krb5.conf
              readOnly: true
            - name: kerberos-ccache
              mountPath: {{ .Values.kerberos.ccacheMountPath | quote }}
              readOnly: true
            {{- end }}
            {{- if or .Values.dags.persistence.enabled .Values.dags.gitSync.enabled }}
              {{- include "airflow_dags_mount" . | nindent 12 }}
            {{- end }}
            {{- if or .Values.webserver.webserverConfig .Values.webserver.webserverConfigConfigMapName }}
              {{- include "airflow_webserver_config_mount" . | nindent 12 }}
            {{- end }}
          envFrom: {{- include "custom_airflow_environment_from" . | default "\n  []" | indent 10 }}
          env:
            # Only signal the main process, not the process group, to make Warm Shutdown work properly
            - name: DUMB_INIT_SETSID
              value: "0"
            {{- include "custom_airflow_environment" . | indent 10 }}
            {{- include "standard_airflow_environment" . | indent 10 }}
            {{- include "container_extra_envs" (list . (.Values.workers.celery.env | default .Values.workers.env)) | indent 10 }}
            {{- if or .Values.workers.kerberosSidecar.enabled .Values.workers.celery.kerberosSidecar.enabled }}
            - name: KRB5_CONFIG
              value: {{ .Values.kerberos.configPath | quote }}
            - name: KRB5CCNAME
              value: {{ include "kerberos_ccache_path" . | quote }}
            {{- end }}
        {{- if and (.Values.dags.gitSync.enabled) (not .Values.dags.persistence.enabled) }}
          {{- include "git_sync_container" . | nindent 8 }}
        {{- end }}
        {{- if and $persistence (and .Values.workers.celery.logGroomerSidecar.enabled .Values.workers.logGroomerSidecar.enabled) }}
        - name: worker-log-groomer
          image: {{ template "airflow_image" . }}
          imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
          {{- if .Values.workers.celery.logGroomerSidecar.securityContexts.container }}
          securityContext: {{ $containerSecurityContextLogGroomerSidecarCelery | nindent 12 }}
          {{- else }}
          securityContext: {{ $containerSecurityContextLogGroomerSidecar | nindent 12 }}
          {{- end }}
          {{- if $containerLifecycleHooksLogGroomerSidecar }}
          lifecycle: {{- tpl (toYaml $containerLifecycleHooksLogGroomerSidecar) . | nindent 12 }}
          {{- end }}
          {{- if or .Values.workers.logGroomerSidecar.command .Values.workers.celery.logGroomerSidecar.command }}
          command: {{ tpl (toYaml (.Values.workers.celery.logGroomerSidecar.command | default .Values.workers.logGroomerSidecar.command)) . | nindent 12 }}
          {{- end }}
          {{- if ne (.Values.workers.celery.logGroomerSidecar.args | toJson) (list "bash" "/clean-logs" | toJson) }}
          args: {{ tpl (toYaml .Values.workers.celery.logGroomerSidecar.args) . | nindent 12 }}
          {{- else if .Values.workers.logGroomerSidecar.args }}
          args: {{ tpl (toYaml .Values.workers.logGroomerSidecar.args) . | nindent 12 }}
          {{- end }}
          env:
          {{ if and .Values.workers.celery.logGroomerSidecar.retentionDays .Values.workers.logGroomerSidecar.retentionDays }}
          {{- if ne (int .Values.workers.celery.logGroomerSidecar.retentionDays) 15 }}
            - name: AIRFLOW__LOG_RETENTION_DAYS
              value: "{{ .Values.workers.celery.logGroomerSidecar.retentionDays }}"
          {{- else if .Values.workers.logGroomerSidecar.retentionDays }}
            - name: AIRFLOW__LOG_RETENTION_DAYS
              value: "{{ .Values.workers.logGroomerSidecar.retentionDays }}"
          {{- end }}
          {{- end }}
          {{ if and .Values.workers.celery.logGroomerSidecar.frequencyMinutes .Values.workers.logGroomerSidecar.frequencyMinutes }}
          {{- if ne (int .Values.workers.celery.logGroomerSidecar.frequencyMinutes) 15 }}
            - name: AIRFLOW__LOG_CLEANUP_FREQUENCY_MINUTES
              value: "{{ .Values.workers.celery.logGroomerSidecar.frequencyMinutes }}"
          {{- else if .Values.workers.logGroomerSidecar.frequencyMinutes }}
            - name: AIRFLOW__LOG_CLEANUP_FREQUENCY_MINUTES
              value: "{{ .Values.workers.logGroomerSidecar.frequencyMinutes }}"
          {{- end }}
          {{- end }}
            - name: AIRFLOW_HOME
              value: "{{ .Values.airflowHome }}"
          {{- if or .Values.workers.logGroomerSidecar.env .Values.workers.celery.logGroomerSidecar.env }}
              {{- tpl (toYaml (.Values.workers.celery.logGroomerSidecar.env | default .Values.workers.logGroomerSidecar.env)) $ | nindent 12 }}
          {{- end }}
          resources: {{- toYaml (.Values.workers.celery.logGroomerSidecar.resources | default .Values.workers.logGroomerSidecar.resources) | nindent 12 }}
          volumeMounts:
            - name: logs
              mountPath: {{ template "airflow_logs" . }}
            {{- if .Values.volumeMounts }}
              {{- toYaml .Values.volumeMounts | nindent 12 }}
            {{- end }}
            {{- if or .Values.workers.extraVolumeMounts .Values.workers.celery.extraVolumeMounts }}
              {{- tpl (toYaml (.Values.workers.celery.extraVolumeMounts | default .Values.workers.extraVolumeMounts)) . | nindent 12 }}
            {{- end }}
            {{- if or .Values.webserver.webserverConfig .Values.webserver.webserverConfigConfigMapName }}
              {{- include "airflow_webserver_config_mount" . | nindent 12 }}
            {{- end }}
        {{- end }}
        {{- if or .Values.workers.kerberosSidecar.enabled .Values.workers.celery.kerberosSidecar.enabled }}
        - name: worker-kerberos
          image: {{ template "airflow_image" . }}
          imagePullPolicy: {{ .Values.images.airflow.pullPolicy }}
          {{- if .Values.workers.celery.kerberosSidecar.securityContexts.container }}
          securityContext: {{ $containerSecurityContextKerberosSidecarCelery | nindent 12 }}
          {{- else }}
          securityContext: {{ $containerSecurityContextKerberosSidecar | nindent 12 }}
          {{- end }}
          {{- if $containerLifecycleHooksKerberosSidecar }}
          lifecycle: {{- tpl (toYaml $containerLifecycleHooksKerberosSidecar) . | nindent 12 }}
          {{- end }}
          args: ["kerberos"]
          resources: {{- toYaml (.Values.workers.celery.kerberosSidecar.resources | default .Values.workers.kerberosSidecar.resources) | nindent 12 }}
          volumeMounts:
            - name: logs
              mountPath: {{ template "airflow_logs" . }}
            {{- include "airflow_config_mount" . | nindent 12 }}
            - name: config
              mountPath: {{ .Values.kerberos.configPath | quote }}
              subPath: krb5.conf
              readOnly: true
            - name: kerberos-keytab
              subPath: "kerberos.keytab"
              mountPath: {{ .Values.kerberos.keytabPath | quote }}
              readOnly: true
            - name: kerberos-ccache
              mountPath: {{ .Values.kerberos.ccacheMountPath | quote }}
              readOnly: false
            {{- if .Values.volumeMounts }}
              {{- toYaml .Values.volumeMounts | nindent 12 }}
            {{- end }}
            {{- if or .Values.workers.extraVolumeMounts .Values.workers.celery.extraVolumeMounts }}
              {{- tpl (toYaml (.Values.workers.celery.extraVolumeMounts | default .Values.workers.extraVolumeMounts)) . | nindent 12 }}
            {{- end }}
            {{- if or .Values.webserver.webserverConfig .Values.webserver.webserverConfigConfigMapName }}
              {{- include "airflow_webserver_config_mount" . | nindent 12 }}
            {{- end }}
          envFrom: {{- include "custom_airflow_environment_from" . | default "\n  []" | indent 10 }}
          env:
            - name: KRB5_CONFIG
              value: {{ .Values.kerberos.configPath | quote }}
            - name: KRB5CCNAME
              value: {{ include "kerberos_ccache_path" . | quote }}
            {{- include "custom_airflow_environment" . | indent 10 }}
            {{- include "standard_airflow_environment" . | indent 10 }}
        {{- end }}
        {{- if or .Values.workers.extraContainers .Values.workers.celery.extraContainers }}
          {{- tpl (toYaml (.Values.workers.celery.extraContainers | default .Values.workers.extraContainers)) . | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.volumes }}
          {{- toYaml .Values.volumes | nindent 8 }}
        {{- end }}
        {{- if or .Values.workers.extraVolumes .Values.workers.celery.extraVolumes }}
          {{- tpl (toYaml (.Values.workers.celery.extraVolumes | default .Values.workers.extraVolumes)) . | nindent 8 }}
        {{- end }}
        - name: config
          configMap:
            name: {{ template "airflow_config" . }}
        {{- if or .Values.webserver.webserverConfig .Values.webserver.webserverConfigConfigMapName }}
        - name: webserver-config
          configMap:
            name: {{ template "airflow_webserver_config_configmap_name" . }}
        {{- end }}
        {{- if .Values.kerberos.enabled }}
        - name: kerberos-keytab
          secret:
            secretName: {{ include "kerberos_keytab_secret" . | quote }}
        - name: kerberos-ccache
          emptyDir: {}
        {{- end }}
        {{- if .Values.dags.persistence.enabled }}
        - name: dags
          persistentVolumeClaim:
            claimName: {{ template "airflow_dags_volume_claim" . }}
        {{- else if .Values.dags.gitSync.enabled }}
        - name: dags
          emptyDir: {{- toYaml (default (dict) .Values.dags.gitSync.emptyDirConfig) | nindent 12 }}
        {{- if or .Values.dags.gitSync.sshKeySecret .Values.dags.gitSync.sshKey}}
          {{- include "git_sync_ssh_key_volume" . | indent 8 }}
        {{- end }}
        {{- end }}
  {{- if .Values.logs.persistence.enabled }}
        - name: logs
          persistentVolumeClaim:
            claimName: {{ template "airflow_logs_volume_claim" . }}
  {{- else if not $persistence }}
        - name: logs
          emptyDir: {{- toYaml (default (dict) .Values.logs.emptyDirConfig) | nindent 12 }}
  {{- else }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: logs
        {{- if or .Values.workers.persistence.annotations .Values.workers.celery.persistence.annotations }}
        annotations: {{- toYaml (.Values.workers.celery.persistence.annotations | default .Values.workers.persistence.annotations) | nindent 10 }}
        {{- end }}
      spec:
        {{- if or .Values.workers.persistence.storageClassName .Values.workers.celery.persistence.storageClassName }}
        storageClassName: {{ tpl (.Values.workers.celery.persistence.storageClassName | default .Values.workers.persistence.storageClassName) . | quote }}
        {{- end }}
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            {{- if ne .Values.workers.celery.persistence.size "100Gi "}}
            storage: {{ .Values.workers.celery.persistence.size }}
            {{- else }}
            storage: {{ .Values.workers.persistence.size }}
            {{- end }}
    {{- with (.Values.workers.celery.volumeClaimTemplates | default .Values.workers.volumeClaimTemplates) }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- end }}
{{- end }}
