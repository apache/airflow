{
    "$schema": "http://json-schema.org/draft-07/schema",
    "description": "Default values for airflow. Declare variables to be passed into your templates.",
    "type": "object",
    "x-docsSectionOrder": [
        "Common",
        "Airflow",
        "Images",
        "Ports",
        "Database",
        "PgBouncer",
        "Scheduler",
        "Webserver",
        "Workers",
        "Triggerer",
        "DagProcessor",
        "Flower",
        "Redis",
        "StatsD",
        "Jobs",
        "Kubernetes",
        "Ingress",
        "Kerberos"
    ],
    "properties": {
        "fullnameOverride": {
            "description": "Provide a name to substitute for the full names of resources",
            "type": "string",
            "default": "",
            "x-docsSection": null
        },
        "revisionHistoryLimit": {
            "description": "Global number of old replicasets to retain. Can be overridden by each deployment's revisionHistoryLimit",
            "type": [
                "integer",
                "null"
            ],
            "default": null,
            "x-docsSection": null
        },
        "nameOverride": {
            "description": "Override the name of the chart",
            "type": "string",
            "default": "",
            "x-docsSection": null
        },
        "kubeVersionOverride": {
            "description": "Provide a Kubernetes version (used for API Version selection) to override the auto-detected version",
            "type": "string",
            "default": "",
            "x-docsSection": null
        },
        "uid": {
            "description": "User of airflow user.",
            "type": "integer",
            "default": 50000,
            "x-docsSection": "Airflow"
        },
        "gid": {
            "description": "Group of airflow user.",
            "type": "integer",
            "default": 0,
            "x-docsSection": "Airflow"
        },
        "airflowHome": {
            "description": "Airflow home directory. Used for mount paths.",
            "type": "string",
            "default": "/opt/airflow",
            "x-docsSection": "Airflow"
        },
        "defaultAirflowRepository": {
            "description": "Default airflow repository. Overrides all the specific images below.",
            "type": "string",
            "default": "apache/airflow",
            "x-docsSection": "Common"
        },
        "defaultAirflowTag": {
            "description": "Default airflow tag to deploy.",
            "type": "string",
            "default": "2.5.3",
            "x-docsSection": "Common"
        },
        "defaultAirflowDigest": {
            "description": "Default airflow digest to deploy. Overrides tag.",
            "type": [
                "string",
                "null"
            ],
            "default": null,
            "x-docsSection": "Common"
        },
        "airflowVersion": {
            "description": "Airflow version (Used to make some decisions based on Airflow Version being deployed).",
            "type": "string",
            "default": "2.5.3",
            "x-docsSection": "Common"
        },
        "securityContext": {
            "description": "Pod security context definition. The values in this parameter will be used when `securityContext` is not defined for specific Pods",
            "type": "object",
            "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
            "default": {},
            "x-docsSection": "Kubernetes",
            "examples": [
                {
                    "runAsUser": 50000,
                    "runAsGroup": 0,
                    "fsGroup": 0
                }
            ]
        },
        "nodeSelector": {
            "description": "Select certain nodes for all pods.",
            "type": "object",
            "default": {},
            "x-docsSection": "Kubernetes",
            "additionalProperties": {
                "type": "string"
            }
        },
        "affinity": {
            "description": "Specify scheduling constraints for all pods.",
            "type": "object",
            "default": {},
            "x-docsSection": "Kubernetes",
            "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
        },
        "tolerations": {
            "description": "Specify Tolerations for all pods.",
            "type": "array",
            "default": [],
            "x-docsSection": "Kubernetes",
            "items": {
                "type": "object",
                "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
            }
        },
        "topologySpreadConstraints": {
            "description": "Specify topology spread constraints for all pods.",
            "type": "array",
            "default": [],
            "x-docsSection": "Kubernetes",
            "items": {
                "type": "object",
                "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
            }
        },
        "labels": {
            "description": "Add common labels to all objects and pods defined in this chart.",
            "type": "object",
            "default": {},
            "x-docsSection": "Kubernetes",
            "additionalProperties": {
                "type": "string"
            }
        },
        "ingress": {
            "description": "Ingress configuration.",
            "type": "object",
            "x-docsSection": "Ingress",
            "properties": {
                "enabled": {
                    "description": "Enable all ingress resources (deprecated - use ingress.web.enabled and ingress.flower.enabled).",
                    "type": [
                        "boolean",
                        "null"
                    ],
                    "default": null
                },
                "web": {
                    "description": "Configuration for the Ingress of the web Service.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable web ingress resource.",
                            "type": "boolean",
                            "default": false
                        },
                        "annotations": {
                            "description": "Annotations for the web Ingress.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "path": {
                            "description": "The path for the web Ingress.",
                            "type": "string",
                            "default": "/"
                        },
                        "pathType": {
                            "description": "The pathType for the web Ingress (required for Kubernetes 1.19 and above).",
                            "type": "string",
                            "default": "ImplementationSpecific"
                        },
                        "host": {
                            "description": "The hostname for the web Ingress. (Deprecated - renamed to `ingress.web.hosts`)",
                            "type": "string",
                            "default": ""
                        },
                        "hosts": {
                            "description": "The hostnames or hosts configuration for the web Ingress.",
                            "type": "array",
                            "default": [],
                            "items": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "description": "The hostname for the web Ingress.",
                                                "type": "string",
                                                "default": ""
                                            },
                                            "tls": {
                                                "description": "Configuration for web Ingress TLS.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                    "enabled": {
                                                        "description": "Enable TLS termination for the web Ingress.",
                                                        "type": "boolean",
                                                        "default": false
                                                    },
                                                    "secretName": {
                                                        "description": "The name of a pre-created Secret containing a TLS private key and certificate.",
                                                        "type": "string",
                                                        "default": ""
                                                    }
                                                }
                                            }
                                        },
                                        "required": [
                                            "name"
                                        ]
                                    },
                                    {
                                        "type": "string",
                                        "default": "",
                                        "$comment": "Deprecated by object above"
                                    }
                                ]
                            }
                        },
                        "ingressClassName": {
                            "description": "The Ingress Class for the web Ingress.",
                            "type": "string",
                            "default": ""
                        },
                        "tls": {
                            "description": "Configuration for web Ingress TLS. (Deprecated - renamed to `ingress.web.hosts[*].tls`)",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "enabled": {
                                    "description": "Enable TLS termination for the web Ingress.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "secretName": {
                                    "description": "The name of a pre-created Secret containing a TLS private key and certificate.",
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        },
                        "precedingPaths": {
                            "description": "HTTP paths to add to the web Ingress before the default path.",
                            "type": "array",
                            "default": []
                        },
                        "succeedingPaths": {
                            "description": "HTTP paths to add to the web Ingress after the default path.",
                            "type": "array",
                            "default": []
                        }
                    }
                },
                "flower": {
                    "description": "Configuration for the Ingress of the flower Service.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable flower ingress resource.",
                            "type": "boolean",
                            "default": false
                        },
                        "annotations": {
                            "description": "Annotations for the flower Ingress.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "path": {
                            "description": "The path for the flower Ingress.",
                            "type": "string",
                            "default": "/"
                        },
                        "pathType": {
                            "description": "The pathType for the flower Ingress (required for Kubernetes 1.19 and above).",
                            "type": "string",
                            "default": "ImplementationSpecific"
                        },
                        "host": {
                            "description": "The hostname for the flower Ingress. (Deprecated - renamed to `ingress.flower.hosts`)",
                            "type": "string",
                            "default": ""
                        },
                        "hosts": {
                            "description": "The hostnames or hosts configuration for the flower Ingress.",
                            "type": "array",
                            "default": [],
                            "items": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "properties": {
                                            "name": {
                                                "description": "The hostname for the web Ingress.",
                                                "type": "string",
                                                "default": ""
                                            },
                                            "tls": {
                                                "description": "Configuration for web Ingress TLS.",
                                                "type": "object",
                                                "additionalProperties": false,
                                                "properties": {
                                                    "enabled": {
                                                        "description": "Enable TLS termination for the web Ingress.",
                                                        "type": "boolean",
                                                        "default": false
                                                    },
                                                    "secretName": {
                                                        "description": "The name of a pre-created Secret containing a TLS private key and certificate.",
                                                        "type": "string",
                                                        "default": ""
                                                    }
                                                }
                                            }
                                        },
                                        "required": [
                                            "name"
                                        ]
                                    },
                                    {
                                        "type": "string",
                                        "default": "",
                                        "$comment": "Deprecated by object above"
                                    }
                                ]
                            }
                        },
                        "ingressClassName": {
                            "description": "The Ingress Class for the flower Ingress.",
                            "type": "string",
                            "default": ""
                        },
                        "tls": {
                            "description": "Configuration for flower Ingress TLS. (Deprecated - renamed to `ingress.flower.hosts[*].tls`)",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "enabled": {
                                    "description": "Enable TLS termination for the flower Ingress.",
                                    "type": "boolean",
                                    "default": false
                                },
                                "secretName": {
                                    "description": "The name of a pre-created Secret containing a TLS private key and certificate.",
                                    "type": "string",
                                    "default": ""
                                }
                            }
                        }
                    }
                }
            }
        },
        "networkPolicies": {
            "description": "Network policy configuration.",
            "type": "object",
            "x-docsSection": "Kubernetes",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enabled network policies.",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "airflowPodAnnotations": {
            "description": "Extra annotations to apply to all Airflow pods.",
            "type": "object",
            "default": {},
            "x-docsSection": "Kubernetes",
            "additionalProperties": {
                "type": "string"
            }
        },
        "airflowConfigAnnotations": {
            "description": "Extra annotations to apply to the main Airflow configmap.",
            "type": "object",
            "default": {},
            "x-docsSection": "Kubernetes",
            "additionalProperties": {
                "type": "string"
            }
        },
        "airflowLocalSettings": {
            "description": "`airflow_local_settings` file as a string (can be templated).",
            "type": [
                "string",
                "null"
            ],
            "x-docsSection": "Common",
            "default": "See values.yaml"
        },
        "rbac": {
            "description": "Enable RBAC (default on most clusters these days).",
            "type": "object",
            "x-docsSection": "Kubernetes",
            "properties": {
                "create": {
                    "description": "Specifies whether RBAC resources should be created.",
                    "type": "boolean",
                    "default": true
                },
                "createSCCRoleBinding": {
                    "description": "Specifies whether SCC RoleBinding resource should be created (refer to :doc:`Production Guide <production-guide>`).",
                    "type": "boolean",
                    "default": false
                }
            }
        },
        "executor": {
            "description": "Airflow executor.",
            "type": "string",
            "x-docsSection": "Common",
            "default": "CeleryExecutor",
            "enum": [
                "LocalExecutor",
                "LocalKubernetesExecutor",
                "CeleryExecutor",
                "KubernetesExecutor",
                "CeleryKubernetesExecutor"
            ]
        },
        "allowPodLaunching": {
            "description": "Whether various Airflow components launch pods.",
            "type": "boolean",
            "x-docsSection": "Airflow",
            "default": true
        },
        "images": {
            "description": "Images.",
            "type": "object",
            "x-docsSection": "Images",
            "additionalProperties": false,
            "properties": {
                "airflow": {
                    "description": "Configuration of the airflow image.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "repository": {
                            "description": "The airflow image repository.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "tag": {
                            "description": "The airflow image tag.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "digest": {
                            "description": "The airflow image digest. If set, it will override the tag.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "pullPolicy": {
                            "description": "The airflow image pull policy.",
                            "type": "string",
                            "enum": [
                                "Always",
                                "Never",
                                "IfNotPresent"
                            ],
                            "default": "IfNotPresent"
                        }
                    }
                },
                "useDefaultImageForMigration": {
                    "description": "To avoid images with user code for running and waiting for DB migrations set this to ``true``. ",
                    "type": "boolean",
                    "x-docsSection": "Images",
                    "default": false
                },
                "migrationsWaitTimeout": {
                    "description": "The time (in seconds) to wait for the DB migrations to complete.",
                    "type": "number",
                    "x-docsSection": "Images",
                    "default": 60
                },
                "pod_template": {
                    "description": "Configuration of the pod_template image.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "repository": {
                            "description": "The pod_template image repository. If ``config.kubernetes.worker_container_repository`` is set, k8s executor will use config value instead.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "tag": {
                            "description": "The pod_template image tag. If ``config.kubernetes.worker_container_tag`` is set, k8s executor will use config value instead.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "pullPolicy": {
                            "description": "The pod_template image pull policy.",
                            "type": "string",
                            "enum": [
                                "Always",
                                "Never",
                                "IfNotPresent"
                            ],
                            "default": "IfNotPresent"
                        }
                    }
                },
                "flower": {
                    "description": "Configuration of the flower image.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "repository": {
                            "description": "The flower image repository.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "tag": {
                            "description": "The flower image tag.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "pullPolicy": {
                            "description": "The flower image pull policy.",
                            "type": "string",
                            "enum": [
                                "Always",
                                "Never",
                                "IfNotPresent"
                            ],
                            "default": "IfNotPresent"
                        }
                    }
                },
                "statsd": {
                    "description": "Configuration of the StatsD image.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "repository": {
                            "description": "The StatsD image repository.",
                            "type": "string",
                            "default": "quay.io/prometheus/statsd-exporter"
                        },
                        "tag": {
                            "description": "The StatsD image tag.",
                            "type": "string",
                            "default": "v0.22.8"
                        },
                        "pullPolicy": {
                            "description": "The StatsD image pull policy.",
                            "type": "string",
                            "enum": [
                                "Always",
                                "Never",
                                "IfNotPresent"
                            ],
                            "default": "IfNotPresent"
                        }
                    }
                },
                "redis": {
                    "description": "Configuration of the redis image.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "repository": {
                            "description": "The redis image repository.",
                            "type": "string",
                            "default": "redis"
                        },
                        "tag": {
                            "description": "The redis image tag.",
                            "type": "string",
                            "default": "7-bullseye"
                        },
                        "pullPolicy": {
                            "description": "The redis image pull policy.",
                            "type": "string",
                            "enum": [
                                "Always",
                                "Never",
                                "IfNotPresent"
                            ],
                            "default": "IfNotPresent"
                        }
                    }
                },
                "pgbouncer": {
                    "description": "Configuration of the PgBouncer image.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "repository": {
                            "description": "The PgBouncer image repository.",
                            "type": "string",
                            "default": "apache/airflow"
                        },
                        "tag": {
                            "description": "The PgBouncer image tag.",
                            "type": "string",
                            "default": "airflow-pgbouncer-2023.02.24-1.16.1"
                        },
                        "pullPolicy": {
                            "description": "The PgBouncer image pull policy.",
                            "type": "string",
                            "enum": [
                                "Always",
                                "Never",
                                "IfNotPresent"
                            ],
                            "default": "IfNotPresent"
                        }
                    }
                },
                "pgbouncerExporter": {
                    "description": "Configuration of the PgBouncer exporter image.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "repository": {
                            "description": "The PgBouncer exporter image repository.",
                            "type": "string",
                            "default": "apache/airflow"
                        },
                        "tag": {
                            "description": "The PgBouncer exporter image tag.",
                            "type": "string",
                            "default": "airflow-pgbouncer-exporter-2023.02.21-0.14.0"
                        },
                        "pullPolicy": {
                            "description": "The PgBouncer exporter image pull policy.",
                            "type": "string",
                            "enum": [
                                "Always",
                                "Never",
                                "IfNotPresent"
                            ],
                            "default": "IfNotPresent"
                        }
                    }
                },
                "gitSync": {
                    "description": "Configuration of the gitSync image.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "repository": {
                            "description": "The gitSync image repository.",
                            "type": "string",
                            "default": "registry.k8s.io/git-sync/git-sync"
                        },
                        "tag": {
                            "description": "The gitSync image tag.",
                            "type": "string",
                            "default": "v3.6.3"
                        },
                        "pullPolicy": {
                            "description": "The gitSync image pull policy.",
                            "type": "string",
                            "enum": [
                                "Always",
                                "Never",
                                "IfNotPresent"
                            ],
                            "default": "IfNotPresent"
                        }
                    }
                }
            }
        },
        "env": {
            "description": "Environment variables for all Airflow containers.",
            "type": "array",
            "x-docsSection": "Airflow",
            "default": [],
            "items": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "value"
                ],
                "additionalProperties": false
            },
            "examples": [
                {
                    "name": "MYENVVAR",
                    "value": "something_fun"
                }
            ]
        },
        "volumes": {
            "description": "Volumes for all Airflow containers.",
            "x-docsSection": "Airflow",
            "type": "array",
            "default": [],
            "items": {
                "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
            }
        },
        "volumeMounts": {
            "description": "VolumeMounts for all Airflow containers.",
            "x-docsSection": "Airflow",
            "type": "array",
            "default": [],
            "items": {
                "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
            }
        },
        "secret": {
            "description": "Secrets for all Airflow containers.",
            "type": "array",
            "x-docsSection": "Airflow",
            "default": [],
            "items": {
                "type": "object",
                "properties": {
                    "envName": {
                        "description": "The name of the environment variable under which the secret will be available",
                        "type": "string"
                    },
                    "secretName": {
                        "description": "The name of the Kubernetes secret that will be read",
                        "type": "string"
                    },
                    "secretKey": {
                        "description": "The key of the Kubernetes secret",
                        "type": "string"
                    }
                },
                "additionalProperties": false,
                "required": [
                    "envName",
                    "secretName"
                ]
            },
            "examples": [
                {
                    "envName": "SecretEnvVar",
                    "secretName": "somesecret",
                    "secretKey": "somekey"
                }
            ]
        },
        "enableBuiltInSecretEnvVars": {
            "description": "Uses built-in secret values set as environment variables passed to Airflow. You should supply corresponding environment variables as ``extraEnv`` variables if you disable them here.",
            "type": "object",
            "additionalProperties": false,
            "x-docsSection": "Airflow",
            "properties": {
                "AIRFLOW__CORE__FERNET_KEY": {
                    "description": "Enable ``AIRFLOW__CORE__FERNET_KEY`` variable to be read from the Fernet key Secret",
                    "type": "boolean",
                    "default": true
                },
                "AIRFLOW__CORE__SQL_ALCHEMY_CONN": {
                    "description": "Enable ``AIRFLOW__CORE__SQL_ALCHEMY_CONN`` variable to be read from the Metadata Secret",
                    "type": "boolean",
                    "default": true
                },
                "AIRFLOW__DATABASE__SQL_ALCHEMY_CONN": {
                    "description": "Enable ``AIRFLOW__DATABASE__SQL_ALCHEMY_CONN`` variable to be read from the Metadata Secret",
                    "type": "boolean",
                    "default": true
                },
                "AIRFLOW_CONN_AIRFLOW_DB": {
                    "description": "Enable ``AIRFLOW_CONN_AIRFLOW_DB`` variable to be read from the Metadata Secret",
                    "type": "boolean",
                    "default": true
                },
                "AIRFLOW__WEBSERVER__SECRET_KEY": {
                    "description": "Enable ``AIRFLOW__WEBSERVER__SECRET_KEY`` variable to be read from the Webserver Secret Key Secret",
                    "type": "boolean",
                    "default": true
                },
                "AIRFLOW__CELERY__CELERY_RESULT_BACKEND": {
                    "description": "Enable ``AIRFLOW__CELERY__CELERY_RESULT_BACKEND`` variable to be read from the Celery Result Backend Secret - Airflow 1.10.* variant",
                    "type": "boolean",
                    "default": true
                },
                "AIRFLOW__CELERY__RESULT_BACKEND": {
                    "description": "Enable ``AIRFLOW__CELERY__RESULT_BACKEND`` variable to be read from the Celery Result Backend Secret",
                    "type": "boolean",
                    "default": true
                },
                "AIRFLOW__CELERY__BROKER_URL": {
                    "description": "Enable ``AIRFLOW__CELERY__BROKER_URL`` variable to be read from the Celery Broker URL Secret",
                    "type": "boolean",
                    "default": true
                },
                "AIRFLOW__ELASTICSEARCH__HOST": {
                    "description": "Enable ``AIRFLOW__ELASTICSEARCH__HOST`` variable to be read from the Elasticsearch Host Secret",
                    "type": "boolean",
                    "default": true
                },
                "AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST": {
                    "description": "Enable ``AIRFLOW__ELASTICSEARCH__ELASTICSEARCH_HOST`` variable to be read from the Elasticsearch Host Secret - Airflow <1.10.4 variant",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "extraEnv": {
            "description": "Extra env 'items' that will be added to the definition of Airflow containers; a string is expected (can be templated).",
            "type": [
                "null",
                "string"
            ],
            "x-docsSection": "Airflow",
            "default": null,
            "examples": [
                "- name: AIRFLOW__CORE__LOAD_EXAMPLES\n   value: True"
            ]
        },
        "extraEnvFrom": {
            "description": "Extra envFrom 'items' that will be added to the definition of Airflow containers; a string is expected (can be templated).",
            "type": [
                "null",
                "string"
            ],
            "x-docsSection": "Airflow",
            "default": null,
            "examples": [
                "- secretRef:\n    name: '{{ .Release.Name }}-airflow-connections'",
                "- configMapRef:\n    name: '{{ .Release.Name }}-airflow-variables'"
            ]
        },
        "extraSecrets": {
            "description": "Extra secrets that will be managed by the chart.",
            "type": "object",
            "x-docsSection": "Kubernetes",
            "default": {},
            "additionalProperties": {
                "description": "Name of the secret (can be templated).",
                "type": "object",
                "minProperties": 1,
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "description": "Type **as string** of secret E.G. Opaque, kubernetes.io/dockerconfigjson, etc.",
                        "type": "string"
                    },
                    "labels": {
                        "description": "Labels for the secret",
                        "type": "object",
                        "default": null,
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "annotations": {
                        "description": "Annotations for the secret",
                        "type": "object",
                        "default": null,
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "data": {
                        "description": "Content **as string** for the 'data' item of the secret (can be templated)",
                        "type": "string"
                    },
                    "stringData": {
                        "description": "Content **as string** for the 'stringData' item of the secret (can be templated)",
                        "type": "string"
                    }
                }
            },
            "examples": [
                {
                    "{{ .Release.Name }}-airflow-connections": {
                        "data": "AIRFLOW_CONN_GCP: 'base64_encoded_gcp_conn_string'\nAIRFLOW_CONN_AWS: 'base64_encoded_aws_conn_string'",
                        "stringData": "AIRFLOW_CONN_OTHER: 'other_conn'"
                    }
                }
            ]
        },
        "extraConfigMaps": {
            "description": "Extra ConfigMaps that will be managed by the chart.",
            "type": "object",
            "x-docsSection": "Kubernetes",
            "default": {},
            "additionalProperties": {
                "description": "Name of the configMap (can be templated).",
                "type": "object",
                "minProperties": 1,
                "additionalProperties": false,
                "properties": {
                    "labels": {
                        "description": "Labels for the configmap",
                        "type": "object",
                        "default": null,
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "annotations": {
                        "description": "Annotations for the configmap",
                        "type": "object",
                        "default": null,
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "data": {
                        "description": "Content **as string** for the 'data' item of the configmap (can be templated)",
                        "type": "string"
                    }
                }
            },
            "examples": [
                {
                    "{{ .Release.Name }}-airflow-variables": {
                        "data": "AIRFLOW_VAR_HELLO_MESSAGE: 'Hi!'\nAIRFLOW_VAR_KUBERNETES_NAMESPACE: '{{ .Release.Namespace }}'"
                    }
                }
            ]
        },
        "data": {
            "description": "Airflow database & redis configuration.",
            "type": "object",
            "x-docsSection": "Database",
            "additionalProperties": false,
            "properties": {
                "metadataSecretName": {
                    "description": "Metadata connection string secret.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "resultBackendSecretName": {
                    "description": "Result backend connection string secret.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "brokerUrlSecretName": {
                    "description": "Redis broker URL secret.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "x-docsSection": "Redis",
                    "default": null
                },
                "metadataConnection": {
                    "description": "Metadata connection configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "user": {
                            "description": "The database user.",
                            "type": "string",
                            "default": "postgres"
                        },
                        "pass": {
                            "description": "The user's password.",
                            "type": "string",
                            "default": "postgres"
                        },
                        "protocol": {
                            "description": "The database protocol.",
                            "type": "string",
                            "default": "postgresql"
                        },
                        "host": {
                            "description": "The database host.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "port": {
                            "description": "The database port.",
                            "type": "integer",
                            "default": 5432
                        },
                        "db": {
                            "description": "The name of the database.",
                            "type": "string",
                            "default": "postgres"
                        },
                        "sslmode": {
                            "description": "The database SSL parameter.",
                            "type": "string",
                            "default": "disable"
                        }
                    }
                },
                "resultBackendConnection": {
                    "description": "Result backend connection configuration.",
                    "type": [
                        "object",
                        "null"
                    ],
                    "default": null,
                    "additionalProperties": false,
                    "properties": {
                        "user": {
                            "description": "The database user.",
                            "type": "string",
                            "default": null
                        },
                        "pass": {
                            "description": "The database password.",
                            "type": "string",
                            "default": null
                        },
                        "protocol": {
                            "description": "The database protocol.",
                            "type": "string",
                            "default": null
                        },
                        "host": {
                            "description": "The database host.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "port": {
                            "description": "The database port.",
                            "type": "integer",
                            "default": null
                        },
                        "db": {
                            "description": "The name of the database.",
                            "type": "string",
                            "default": null
                        },
                        "sslmode": {
                            "description": "The database SSL parameter.",
                            "type": "string",
                            "default": null
                        }
                    },
                    "required": [
                        "user",
                        "pass",
                        "protocol",
                        "host",
                        "port",
                        "db",
                        "sslmode"
                    ]
                },
                "brokerUrl": {
                    "description": "Direct url to the redis broker (when using an external redis instance) (can only be set during install, not upgrade).",
                    "type": [
                        "string",
                        "null"
                    ],
                    "x-docsSection": "Redis",
                    "default": null
                }
            }
        },
        "fernetKey": {
            "description": "The Fernet key used to encrypt passwords (can only be set during install, not upgrade).",
            "type": [
                "string",
                "null"
            ],
            "x-docsSection": "Common",
            "default": null
        },
        "fernetKeySecretName": {
            "description": "The Fernet key secret name.",
            "type": [
                "string",
                "null"
            ],
            "x-docsSection": "Airflow",
            "default": null
        },
        "webserverSecretKey": {
            "description": "The Flask secret key for Airflow Webserver to encrypt browser session.",
            "type": [
                "string",
                "null"
            ],
            "x-docsSection": "Common",
            "default": null
        },
        "webserverSecretKeySecretName": {
            "description": "The Secret name containing Flask secret_key for the Webserver.",
            "type": [
                "string",
                "null"
            ],
            "x-docsSection": "Airflow",
            "default": null
        },
        "kerberos": {
            "description": "Kerberos configurations for airflow",
            "type": "object",
            "x-docsSection": "Kerberos",
            "properties": {
                "enabled": {
                    "description": "Enable kerberos.",
                    "type": "boolean",
                    "default": false
                },
                "ccacheMountPath": {
                    "description": "Path to mount shared volume for kerberos credentials cache.",
                    "type": "string",
                    "default": "/var/kerberos-ccache"
                },
                "ccacheFileName": {
                    "description": "Name for kerberos credentials cache file.",
                    "type": "string",
                    "default": "cache"
                },
                "configPath": {
                    "description": "Path to mount krb5.conf kerberos configuration file.",
                    "type": "string",
                    "default": "/etc/krb5.conf"
                },
                "keytabBase64Content": {
                    "description": "Kerberos keytab base64 encoded content.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "keytabPath": {
                    "description": "Path to mount the keytab for refreshing credentials in the kerberos sidecar.",
                    "type": "string",
                    "default": "/etc/airflow.keytab"
                },
                "principal": {
                    "description": "Principal to use when refreshing kerberos credentials.",
                    "type": "string",
                    "default": "airflow@FOO.COM"
                },
                "reinitFrequency": {
                    "description": "How often (in seconds) airflow kerberos will reinitialize the credentials cache.",
                    "type": "integer",
                    "default": 3600
                },
                "config": {
                    "description": "Contents of krb5.conf.",
                    "type": "string",
                    "default": "See values.yaml"
                }
            }
        },
        "workers": {
            "description": "Airflow Worker configuration.",
            "type": "object",
            "x-docsSection": "Workers",
            "additionalProperties": false,
            "properties": {
                "replicas": {
                    "description": "Number of Airflow Celery workers in StatefulSet.",
                    "type": "integer",
                    "default": 1
                },
                "revisionHistoryLimit": {
                    "description": "Number of old replicasets to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                },
                "command": {
                    "description": "Command to use when running Airflow workers (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running Airflow workers (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "-c",
                        "exec \\\nairflow {{ semverCompare \">=2.0.0\" .Values.airflowVersion | ternary \"celery worker\" \"worker\" }}"
                    ]
                },
                "livenessProbe": {
                    "description": "Liveness probe configuration for worker containers.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable liveness probe for celery workers.",
                            "type": "boolean",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "description": "Number of seconds after the container has started before liveness probes are initiated.",
                            "type": "integer",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "description": "Number of seconds after which the probe times out. Minimum value is 1 seconds.",
                            "type": "integer",
                            "default": 20
                        },
                        "failureThreshold": {
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1.",
                            "type": "integer",
                            "default": 5
                        },
                        "periodSeconds": {
                            "description": "How often (in seconds) to perform the probe. Minimum value is 1.",
                            "type": "integer",
                            "default": 60
                        },
                        "command": {
                            "description": "Command for livenessProbe",
                            "type": [
                                "array",
                                "null"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "updateStrategy": {
                    "description": "Specifies the strategy used to replace old Pods by new ones when deployed as a StatefulSet.",
                    "type": [
                        "null",
                        "object"
                    ],
                    "default": null
                },
                "strategy": {
                    "description": "Specifies the strategy used to replace old Pods by new ones when deployed as a Deployment.",
                    "type": [
                        "null",
                        "object"
                    ],
                    "default": {
                        "rollingUpdate": {
                            "maxSurge": "100%",
                            "maxUnavailable": "50%"
                        }
                    }
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the worker Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "keda": {
                    "description": "KEDA configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Allow KEDA autoscaling. `Persistence.enabled` must be set to false to use KEDA.",
                            "type": "boolean",
                            "default": false
                        },
                        "namespaceLabels": {
                            "description": "Labels used in `matchLabels` for namespace in the PgBouncer NetworkPolicy.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "pollingInterval": {
                            "description": "How often KEDA polls the airflow DB to report new scale requests to the HPA.",
                            "type": "integer",
                            "default": 5
                        },
                        "cooldownPeriod": {
                            "description": "How many seconds KEDA will wait before scaling to zero.",
                            "type": "integer",
                            "default": 30
                        },
                        "minReplicaCount": {
                            "description": "Minimum number of workers created by KEDA.",
                            "type": "integer",
                            "default": 0
                        },
                        "maxReplicaCount": {
                            "description": "Maximum number of workers created by KEDA.",
                            "type": "integer",
                            "default": 10
                        },
                        "advanced": {
                            "description": "Advanced KEDA configuration.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": false,
                            "properties": {
                                "horizontalPodAutoscalerConfig": {
                                    "description": "HorizontalPodAutoscalerConfig specifies horizontal scale config.",
                                    "type": "object",
                                    "default": {},
                                    "properties": {
                                        "behavior": {
                                            "description": "HorizontalPodAutoscalerBehavior configures the scaling behavior of the target.",
                                            "type": "object",
                                            "default": {},
                                            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "persistence": {
                    "description": "Persistence configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable persistent volumes.",
                            "type": "boolean",
                            "default": true
                        },
                        "size": {
                            "description": "Volume size for worker StatefulSet.",
                            "type": "string",
                            "default": "100Gi"
                        },
                        "storageClassName": {
                            "description": "If using a custom StorageClass, pass name ref to all StatefulSets here.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "fixPermissions": {
                            "description": "Execute init container to chown log directory. This is currently only needed in kind, due to usage of local-path provisioner.",
                            "type": "boolean",
                            "default": false
                        },
                        "annotations": {
                            "description": "Annotations to add to worker volumes.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "kerberosSidecar": {
                    "description": "Kerberos sidecar for Airflow workers.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable Kerberos sidecar for the worker.",
                            "type": "boolean",
                            "default": false
                        },
                        "resources": {
                            "description": "Resources on workers kerberos sidecar",
                            "type": "object",
                            "default": {},
                            "examples": [
                                {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "128Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "128Mi"
                                    }
                                }
                            ],
                            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                        }
                    }
                },
                "resources": {
                    "description": "Resources on workers",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Grace period for tasks to finish after SIGTERM is sent from Kubernetes.",
                    "type": "integer",
                    "default": 600
                },
                "safeToEvict": {
                    "description": "This setting tells Kubernetes that it's ok to evict when it wants to scale a node down.",
                    "type": "boolean",
                    "default": true
                },
                "extraContainers": {
                    "description": "Launch additional containers into workers. Note, if used with KubernetesExecutor, you are responsible for signaling sidecars to exit when the main container finishes so Airflow can continue the worker shutdown process!",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraInitContainers": {
                    "description": "Add additional init containers into workers.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    },
                    "type": "array",
                    "default": []
                },
                "extraVolumes": {
                    "description": "Mount additional volumes into workers.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "extraVolumeMounts": {
                    "description": "Mount additional volumes into workers.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for worker pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Specify priority for worker pods.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "affinity": {
                    "description": "Specify scheduling constraints for worker pods.",
                    "type": "object",
                    "default": "See values.yaml",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for worker pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for worker pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "hostAliases": {
                    "description": "Specify HostAliases for workers.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
                    },
                    "type": "array",
                    "default": [],
                    "examples": [
                        {
                            "ip": "127.0.0.2",
                            "hostnames": [
                                "test.hostname.one"
                            ]
                        },
                        {
                            "ip": "127.0.0.3",
                            "hostnames": [
                                "test.hostname.two"
                            ]
                        }
                    ]
                },
                "annotations": {
                    "description": "Annotations to add to the worker deployment",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "podAnnotations": {
                    "description": "Annotations to add to the worker pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "Labels to add to the worker objects and pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "logGroomerSidecar": {
                    "$ref": "#/definitions/logGroomerConfigType",
                    "description": "Configuration for log groomer sidecar"
                },
                "securityContext": {
                    "description": "Security context for the worker pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "waitForMigrations": {
                    "description": "wait-for-airflow-migrations init container.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "env": {
                            "description": "Add additional env vars to wait-for-airflow-migrations init container.",
                            "type": "array",
                            "default": [],
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "env": {
                    "description": "Add additional env vars to worker.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "additionalProperties": false
                    }
                }
            }
        },
        "scheduler": {
            "description": "Airflow scheduler settings.",
            "type": "object",
            "x-docsSection": "Scheduler",
            "additionalProperties": false,
            "properties": {
                "hostAliases": {
                    "description": "HostAliases for the scheduler pod.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
                    },
                    "type": "array",
                    "default": [],
                    "examples": [
                        {
                            "ip": "127.0.0.1",
                            "hostnames": [
                                "foo.local"
                            ]
                        },
                        {
                            "ip": "10.1.2.3",
                            "hostnames": [
                                "foo.remote"
                            ]
                        }
                    ]
                },
                "livenessProbe": {
                    "description": "Liveness probe configuration for scheduler container.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "initialDelaySeconds": {
                            "description": "Number of seconds after the container has started before liveness probes are initiated.",
                            "type": "integer",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "description": "Number of seconds after which the probe times out. Minimum value is 1 seconds.",
                            "type": "integer",
                            "default": 20
                        },
                        "failureThreshold": {
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1.",
                            "type": "integer",
                            "default": 5
                        },
                        "periodSeconds": {
                            "description": "How often (in seconds) to perform the probe. Minimum value is 1.",
                            "type": "integer",
                            "default": 60
                        },
                        "command": {
                            "description": "Command for livenessProbe",
                            "type": [
                                "array",
                                "null"
                            ],
                            "items": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "replicas": {
                    "description": "Airflow 2.0 allows users to run multiple schedulers. This feature is only recommended for MySQL 8+ and PostgreSQL",
                    "type": "integer",
                    "default": 1
                },
                "revisionHistoryLimit": {
                    "description": "Number of old replicasets to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                },
                "command": {
                    "description": "Command to use when running the Airflow scheduler (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running the Airflow scheduler (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "-c",
                        "exec airflow scheduler"
                    ]
                },
                "updateStrategy": {
                    "description": "Specifies the strategy used to replace old Pods by new ones when deployed as a StatefulSet (when using LocalExecutor and workers.persistence).",
                    "type": [
                        "null",
                        "object"
                    ],
                    "default": null
                },
                "strategy": {
                    "description": "Specifies the strategy used to replace old Pods by new ones when deployed as a Deployment (when not using LocalExecutor and workers.persistence).",
                    "type": [
                        "null",
                        "object"
                    ],
                    "default": null
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the scheduler Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "podDisruptionBudget": {
                    "description": "Scheduler pod disruption budget.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable pod disruption budget.",
                            "type": "boolean",
                            "default": false
                        },
                        "config": {
                            "description": "Disruption budget configuration.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "maxUnavailable": {
                                    "description": "Max unavailable pods for scheduler.",
                                    "type": [
                                        "integer",
                                        "string"
                                    ],
                                    "default": 1
                                }
                            }
                        }
                    }
                },
                "resources": {
                    "description": "Resources for scheduler pods.",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "safeToEvict": {
                    "description": "This setting tells Kubernetes that its ok to evict when it wants to scale a node down.",
                    "type": "boolean",
                    "default": true
                },
                "extraContainers": {
                    "description": "Launch additional containers into scheduler.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraInitContainers": {
                    "description": "Add additional init containers into scheduler.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraVolumes": {
                    "description": "Mount additional volumes into scheduler.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "extraVolumeMounts": {
                    "description": "Mount additional volumes into scheduler.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for scheduler pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Specify priority for scheduler pods.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "affinity": {
                    "description": "Specify scheduling constraints for scheduler pods.",
                    "type": "object",
                    "default": "See values.yaml",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for scheduler pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for scheduler pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "annotations": {
                    "description": "Annotations to add to the scheduler deployment",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "podAnnotations": {
                    "description": "Annotations to add to the scheduler pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "Labels to add to the scheduler objects and pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "logGroomerSidecar": {
                    "$ref": "#/definitions/logGroomerConfigType",
                    "description": "Configuration for log groomer sidecar"
                },
                "securityContext": {
                    "description": "Security context for the scheduler pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "waitForMigrations": {
                    "description": "wait-for-airflow-migrations init container.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable wait-for-airflow-migrations init container.",
                            "type": "boolean",
                            "default": true
                        },
                        "env": {
                            "description": "Add additional env vars to wait-for-airflow-migrations init container.",
                            "type": "array",
                            "default": [],
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "env": {
                    "description": "Add additional env vars to scheduler.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "additionalProperties": false
                    }
                }
            }
        },
        "triggerer": {
            "description": "Airflow triggerer settings.",
            "type": "object",
            "x-docsSection": "Triggerer",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enable triggerer (requires Python 3.7+).",
                    "type": "boolean",
                    "default": true
                },
                "livenessProbe": {
                    "description": "Liveness probe configuration for triggerer.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "initialDelaySeconds": {
                            "description": "Number of seconds after the container has started before liveness probes are initiated.",
                            "type": "integer",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "description": "Number of seconds after which the probe times out. Minimum value is 1 seconds.",
                            "type": "integer",
                            "default": 20
                        },
                        "failureThreshold": {
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1.",
                            "type": "integer",
                            "default": 5
                        },
                        "periodSeconds": {
                            "description": "How often (in seconds) to perform the probe. Minimum value is 1.",
                            "type": "integer",
                            "default": 60
                        },
                        "command": {
                            "description": "Command for livenessProbe",
                            "type": [
                                "array",
                                "null"
                            ],
                            "items": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "replicas": {
                    "description": "Number of triggerers to run.",
                    "type": "integer",
                    "default": 1
                },
                "revisionHistoryLimit": {
                    "description": "Number of old replicasets to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                },
                "command": {
                    "description": "Command to use when running the Airflow triggerer (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running the Airflow triggerer (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "-c",
                        "exec airflow triggerer"
                    ]
                },
                "updateStrategy": {
                    "description": "Specifies the strategy used to replace old Pods by new ones when deployed as a StatefulSet.",
                    "type": [
                        "null",
                        "object"
                    ],
                    "default": null
                },
                "strategy": {
                    "description": "Specifies the strategy used to replace old Pods by new ones when deployed as a Deployment.",
                    "type": [
                        "null",
                        "object"
                    ],
                    "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
                    "default": {
                        "rollingUpdate": {
                            "maxSurge": "100%",
                            "maxUnavailable": "50%"
                        }
                    }
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the triggerer Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "persistence": {
                    "description": "Persistence configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable persistent volumes.",
                            "type": "boolean",
                            "default": true
                        },
                        "size": {
                            "description": "Volume size for triggerer StatefulSet.",
                            "type": "string",
                            "default": "100Gi"
                        },
                        "storageClassName": {
                            "description": "If using a custom StorageClass, pass name ref to all StatefulSets here.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "fixPermissions": {
                            "description": "Execute init container to chown log directory. This is currently only needed in kind, due to usage of local-path provisioner.",
                            "type": "boolean",
                            "default": false
                        },
                        "annotations": {
                            "description": "Annotations to add to triggerer volumes.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "resources": {
                    "description": "Resources for triggerer pods.",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "safeToEvict": {
                    "description": "This setting tells Kubernetes that its ok to evict when it wants to scale a node down.",
                    "type": "boolean",
                    "default": true
                },
                "extraContainers": {
                    "description": "Launch additional containers into triggerer.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraInitContainers": {
                    "description": "Add additional init containers into triggerer.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraVolumes": {
                    "description": "Mount additional volumes into triggerer.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "extraVolumeMounts": {
                    "description": "Mount additional volumes into triggerer.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for triggerer pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Specify priority for triggerer pods.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "affinity": {
                    "description": "Specify scheduling constraints for triggerer pods.",
                    "type": "object",
                    "default": "See values.yaml",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for triggerer pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for triggerer pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "terminationGracePeriodSeconds": {
                    "description": "Grace period for tasks to finish after SIGTERM is sent from Kubernetes.",
                    "type": "integer",
                    "default": 60
                },
                "annotations": {
                    "description": "Annotations to add to the triggerer deployment",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "podAnnotations": {
                    "description": "Annotations to add to the triggerer pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "Labels to add to the triggerer objects and pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "securityContext": {
                    "description": "Security context for the triggerer pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "logGroomerSidecar": {
                    "$ref": "#/definitions/logGroomerConfigType",
                    "description": "Configuration for log groomer sidecar"
                },
                "waitForMigrations": {
                    "description": "wait-for-airflow-migrations init container.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable wait-for-airflow-migrations init container.",
                            "type": "boolean",
                            "default": true
                        },
                        "env": {
                            "description": "Add additional env vars to wait-for-airflow-migrations init container.",
                            "type": "array",
                            "default": [],
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "env": {
                    "description": "Add additional env vars to triggerer.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "additionalProperties": false
                    }
                }
            }
        },
        "dagProcessor": {
            "description": "Airflow dag processor settings.",
            "type": "object",
            "x-docsSection": "DagProcessor",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enable standalone dag processor (requires Airflow 2.3.0+).",
                    "type": "boolean",
                    "default": false
                },
                "livenessProbe": {
                    "description": "Liveness probe configuration for dag processor.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "initialDelaySeconds": {
                            "description": "Number of seconds after the container has started before liveness probes are initiated.",
                            "type": "integer",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "description": "Number of seconds after which the probe times out. Minimum value is 1 seconds.",
                            "type": "integer",
                            "default": 20
                        },
                        "failureThreshold": {
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1.",
                            "type": "integer",
                            "default": 5
                        },
                        "periodSeconds": {
                            "description": "How often (in seconds) to perform the probe. Minimum value is 1.",
                            "type": "integer",
                            "default": 60
                        },
                        "command": {
                            "description": "Command for livenessProbe",
                            "type": [
                                "array",
                                "null"
                            ],
                            "items": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "replicas": {
                    "description": "Number of dag processors to run.",
                    "type": "integer",
                    "default": 1
                },
                "revisionHistoryLimit": {
                    "description": "Number of old replicasets to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                },
                "command": {
                    "description": "Command to use when running the Airflow dag processor (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running the Airflow dag processor (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "-c",
                        "exec airflow dag-processor"
                    ]
                },
                "strategy": {
                    "description": "Specifies the strategy used to replace old Pods by new ones when deployed as a Deployment.",
                    "type": [
                        "null",
                        "object"
                    ],
                    "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
                    "default": {
                        "rollingUpdate": {
                            "maxSurge": "100%",
                            "maxUnavailable": "50%"
                        }
                    }
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the dag processor Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "resources": {
                    "description": "Resources for dag processor pods.",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "safeToEvict": {
                    "description": "This setting tells Kubernetes that its ok to evict when it wants to scale a node down.",
                    "type": "boolean",
                    "default": true
                },
                "extraContainers": {
                    "description": "Launch additional containers into dag processor.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraInitContainers": {
                    "description": "Add additional init containers into dag processor.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraVolumes": {
                    "description": "Mount additional volumes into dag processor.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "extraVolumeMounts": {
                    "description": "Mount additional volumes into dag processor.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for dag processor pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Specify priority for dag processor pods.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "affinity": {
                    "description": "Specify scheduling constraints for dag processor pods.",
                    "type": "object",
                    "default": "See values.yaml",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for dag processor pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for dag processor pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "terminationGracePeriodSeconds": {
                    "description": "Grace period for tasks to finish after SIGTERM is sent from Kubernetes.",
                    "type": "integer",
                    "default": 60
                },
                "annotations": {
                    "description": "Annotations to add to the dag processor deployment",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "podAnnotations": {
                    "description": "Annotations to add to the dag processor pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "securityContext": {
                    "description": "Security context for the dag processor pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "waitForMigrations": {
                    "description": "wait-for-airflow-migrations init container.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable wait-for-airflow-migrations init container.",
                            "type": "boolean",
                            "default": true
                        },
                        "env": {
                            "description": "Add additional env vars to wait-for-airflow-migrations init container.",
                            "type": "array",
                            "default": [],
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "env": {
                    "description": "Add additional env vars to dag processor.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "additionalProperties": false
                    }
                }
            }
        },
        "createUserJob": {
            "description": "Airflow job to create a user settings.",
            "type": "object",
            "x-docsSection": "Jobs",
            "additionalProperties": false,
            "properties": {
                "command": {
                    "description": "Command to use when running create user job (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running create user job (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "-c",
                        "exec \\\nairflow {{ semverCompare \">=2.0.0\" .Values.airflowVersion | ternary \"users create\" \"create_user\" }} \"$@\"",
                        "--",
                        "-r",
                        "{{ .Values.webserver.defaultUser.role }}",
                        "-u",
                        "{{ .Values.webserver.defaultUser.username }}",
                        "-e",
                        "{{ .Values.webserver.defaultUser.email }}",
                        "-f",
                        "{{ .Values.webserver.defaultUser.firstName }}",
                        "-l",
                        "{{ .Values.webserver.defaultUser.lastName }}",
                        "-p",
                        "{{ .Values.webserver.defaultUser.password }}"
                    ]
                },
                "annotations": {
                    "description": "Annotations to add to the create user job pod.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "jobAnnotations": {
                    "description": "Annotations to add to the create user job job.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "Labels to add to the create user job objects and pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the create user job Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "extraContainers": {
                    "description": "Launch additional containers for the create user job pod",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraVolumes": {
                    "description": "Mount additional volumes into create user job",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "extraVolumeMounts": {
                    "description": "Mount additional volumes into create user job",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for the create user job pod.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "affinity": {
                    "description": "Specify scheduling constraints for the create user job pod.",
                    "type": "object",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for the create user job pod.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for the create user job pod.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "securityContext": {
                    "description": "Security context for the create user job pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "resources": {
                    "description": "Resources for the create user job pod",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ]
                },
                "useHelmHooks": {
                    "description": "Specify if you want to use the default Helm Hook annotations",
                    "type": "boolean",
                    "default": true
                },
                "applyCustomEnv": {
                    "description": "Specify if you want additional configured env vars applied to this job",
                    "type": "boolean",
                    "default": true
                },
                "ttlSecondsAfterFinished": {
                    "description": "Limit the lifetime of the job object after it finished execution",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": 300
                },
                "env": {
                    "description": "Add additional env vars to the create user job pod.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "additionalProperties": false
                    }
                }
            }
        },
        "migrateDatabaseJob": {
            "description": "Airflow job to migrate databases settings.",
            "type": "object",
            "x-docsSection": "Jobs",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enable migrate database job.",
                    "type": "boolean",
                    "default": true
                },
                "command": {
                    "description": "Command to use when running migrate database job (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running migrate database job (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "-c",
                        "exec \\\nairflow {{ semverCompare \">=2.0.0\" .Values.airflowVersion | ternary \"db upgrade\" \"upgradedb\" }}"
                    ]
                },
                "annotations": {
                    "description": "Annotations to add to the migrate database job pod.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "jobAnnotations": {
                    "description": "Annotations to add to the migrate database job.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the migrate database job Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "resources": {
                    "description": "Resources for the migrate database job pod",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ]
                },
                "extraContainers": {
                    "description": "Launch additional containers for the migrate database job pod",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraVolumes": {
                    "description": "Mount additional volumes into migrate database job",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "extraVolumeMounts": {
                    "description": "Mount additional volumes into migrate database job",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for the migrate database job pod.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "affinity": {
                    "description": "Specify scheduling constraints for the migrate database job pod.",
                    "type": "object",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for the migrate database job pod.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for migrate database job pod.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "securityContext": {
                    "description": "Security context for the migrate database job pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "useHelmHooks": {
                    "description": "Specify if you want to use the default Helm Hook annotations",
                    "type": "boolean",
                    "default": true
                },
                "applyCustomEnv": {
                    "description": "Specify if you want additional configured env vars applied to this job",
                    "type": "boolean",
                    "default": true
                },
                "ttlSecondsAfterFinished": {
                    "description": "Limit the lifetime of the job object after it finished execution",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": 300
                }
            }
        },
        "webserver": {
            "description": "Airflow webserver settings.",
            "type": "object",
            "x-docsSection": "Webserver",
            "additionalProperties": false,
            "properties": {
                "hostAliases": {
                    "description": "HostAliases for the webserver pod.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
                    },
                    "type": "array",
                    "default": [],
                    "examples": [
                        {
                            "ip": "127.0.0.1",
                            "hostnames": [
                                "foo.local"
                            ]
                        },
                        {
                            "ip": "10.1.2.3",
                            "hostnames": [
                                "foo.remote"
                            ]
                        }
                    ]
                },
                "allowPodLogReading": {
                    "description": "Allow webserver to read k8s pod logs. Useful when you don't have an external log store.",
                    "type": "boolean",
                    "default": true
                },
                "livenessProbe": {
                    "description": "Liveness probe configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "initialDelaySeconds": {
                            "description": "Webserver Liveness probe initial delay.",
                            "type": "integer",
                            "default": 15
                        },
                        "timeoutSeconds": {
                            "description": "Webserver Liveness probe timeout seconds.",
                            "type": "integer",
                            "default": 30
                        },
                        "failureThreshold": {
                            "description": "Webserver Liveness probe failure threshold.",
                            "type": "integer",
                            "default": 20
                        },
                        "periodSeconds": {
                            "description": "Webserver Liveness probe period seconds.",
                            "type": "integer",
                            "default": 5
                        },
                        "scheme": {
                            "description": "Webserver Liveness probe scheme.",
                            "type": "string",
                            "default": "HTTP"
                        }
                    }
                },
                "readinessProbe": {
                    "description": "Readiness probe configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "initialDelaySeconds": {
                            "description": "Webserver Readiness probe initial delay.",
                            "type": "integer",
                            "default": 15
                        },
                        "timeoutSeconds": {
                            "description": "Webserver Readiness probe timeout seconds.",
                            "type": "integer",
                            "default": 30
                        },
                        "failureThreshold": {
                            "description": "Webserver Readiness probe failure threshold.",
                            "type": "integer",
                            "default": 20
                        },
                        "periodSeconds": {
                            "description": "Webserver Readiness probe period seconds.",
                            "type": "integer",
                            "default": 5
                        },
                        "scheme": {
                            "description": "Webserver Readiness probe scheme.",
                            "type": "string",
                            "default": "HTTP"
                        }
                    }
                },
                "replicas": {
                    "description": "How many Airflow webserver replicas should run.",
                    "type": "integer",
                    "default": 1
                },
                "revisionHistoryLimit": {
                    "description": "Number of old replicasets to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                },
                "command": {
                    "description": "Command to use when running the Airflow webserver (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running the Airflow webserver (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "-c",
                        "exec airflow webserver"
                    ]
                },
                "strategy": {
                    "description": "Specifies the strategy used to replace old Pods by new ones.",
                    "type": [
                        "null",
                        "object"
                    ],
                    "default": null
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the webserver Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "podDisruptionBudget": {
                    "description": "Webserver pod disruption budget.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable pod disruption budget.",
                            "type": "boolean",
                            "default": false
                        },
                        "config": {
                            "description": "Disruption budget configuration.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "maxUnavailable": {
                                    "description": "Max unavailable pods for webserver.",
                                    "type": [
                                        "integer",
                                        "string"
                                    ],
                                    "default": 1
                                }
                            }
                        }
                    }
                },
                "extraNetworkPolicies": {
                    "description": "Additional NetworkPolicies as needed (Deprecated - renamed to `webserver.networkPolicy.ingress.from`).",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
                    },
                    "default": []
                },
                "networkPolicy": {
                    "description": "Webserver NetworkPolicy configuration",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "ingress": {
                            "description": "Webserver NetworkPolicy ingress configuration",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "from": {
                                    "description": "Peers for webserver NetworkPolicy ingress.",
                                    "type": "array",
                                    "default": [],
                                    "items": {
                                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
                                    }
                                },
                                "ports": {
                                    "description": "Ports for webserver NetworkPolicy ingress (if `from` is set).",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
                                    },
                                    "default": [
                                        {
                                            "port": "{{ .Values.ports.airflowUI }}"
                                        }
                                    ],
                                    "examples": [
                                        {
                                            "port": 8070
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "securityContext": {
                    "description": "Security context for the webserver job pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "resources": {
                    "description": "Resources for webserver pods.",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "defaultUser": {
                    "description": "Optional default Airflow user information",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable default user creation.",
                            "type": "boolean",
                            "x-docsSection": "Common",
                            "default": true
                        },
                        "role": {
                            "description": "Default user role.",
                            "type": "string",
                            "default": "Admin"
                        },
                        "username": {
                            "description": "Default user username.",
                            "type": "string",
                            "default": "admin"
                        },
                        "email": {
                            "description": "Default user email address.",
                            "type": "string",
                            "default": "admin@example.com"
                        },
                        "firstName": {
                            "description": "Default user firstname.",
                            "type": "string",
                            "default": "admin"
                        },
                        "lastName": {
                            "description": "Default user lastname.",
                            "type": "string",
                            "default": "user"
                        },
                        "password": {
                            "description": "Default user password.",
                            "type": "string",
                            "default": "admin"
                        }
                    }
                },
                "extraContainers": {
                    "description": "Launch additional containers into webserver.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraInitContainers": {
                    "description": "Add additional init containers into webserver.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraVolumes": {
                    "description": "Mount additional volumes into webserver.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "extraVolumeMounts": {
                    "description": "Mount additional volumes into webserver.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                },
                "webserverConfig": {
                    "description": "This string (can be templated) will be mounted into the Airflow webserver as a custom `webserver_config.py`. You can bake a `webserver_config.py` in to your image instead or specify a configmap containing the webserver_config.py.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "x-docsSection": "Common",
                    "default": null,
                    "examples": [
                        "from airflow import configuration as conf\n\n# The SQLAlchemy connection string.\nSQLALCHEMY_DATABASE_URI = conf.get('database', 'SQL_ALCHEMY_CONN')\n\n# Flask-WTF flag for CSRF\nCSRF_ENABLED = True"
                    ]
                },
                "webserverConfigConfigMapName": {
                    "description": "The configmap name containing the webserver_config.py.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "x-docsSection": "Common",
                    "default": null,
                    "examples": [
                        "my-webserver-configmap"
                    ]
                },
                "service": {
                    "description": "Webserver Service configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "type": {
                            "description": "Webserver Service type.",
                            "type": "string",
                            "default": "ClusterIP"
                        },
                        "annotations": {
                            "description": "Annotations for the webserver Service.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "ports": {
                            "description": "Ports for the webserver Service.",
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "port": {
                                        "type": [
                                            "string",
                                            "integer"
                                        ]
                                    },
                                    "targetPort": {
                                        "type": [
                                            "string",
                                            "integer"
                                        ]
                                    },
                                    "nodePort": {
                                        "type": [
                                            "string",
                                            "integer"
                                        ]
                                    },
                                    "protocol": {
                                        "type": "string"
                                    }
                                }
                            },
                            "default": [
                                {
                                    "name": "airflow-ui",
                                    "port": "{{ .Values.ports.airflowUI }}"
                                }
                            ],
                            "examples": [
                                {
                                    "name": "airflow-ui",
                                    "port": 80,
                                    "targetPort": "airflow-ui"
                                },
                                {
                                    "name": "only_sidecar",
                                    "port": 80,
                                    "targetPort": 8888
                                }
                            ]
                        },
                        "loadBalancerIP": {
                            "description": "Webserver Service loadBalancerIP.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "loadBalancerSourceRanges": {
                            "description": "Webserver Service ``loadBalancerSourceRanges``.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": [],
                            "examples": [
                                "10.123.0.0/16"
                            ]
                        }
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for webserver pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Specify priority for webserver pods.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "affinity": {
                    "description": "Specify scheduling constraints for webserver pods.",
                    "type": "object",
                    "default": "See values.yaml",
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for webserver pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for webserver pods.",
                    "type": "array",
                    "default": [],
                    "x-docsSection": "Kubernetes",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "annotations": {
                    "description": "Annotations to add to the webserver deployment",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "podAnnotations": {
                    "description": "Annotations to add to the webserver pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "Labels to add to the webserver objects and pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "waitForMigrations": {
                    "description": "wait-for-airflow-migrations init container.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable wait-for-airflow-migrations init container.",
                            "type": "boolean",
                            "default": true
                        },
                        "env": {
                            "description": "Add additional env vars to wait-for-airflow-migrations init container.",
                            "type": "array",
                            "default": [],
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "env": {
                    "description": "Add additional env vars to webserver.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "additionalProperties": false
                    }
                }
            }
        },
        "flower": {
            "description": "Flower settings.",
            "type": "object",
            "x-docsSection": "Flower",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enable Flower.",
                    "type": "boolean",
                    "default": false
                },
                "revisionHistoryLimit": {
                    "description": "Number of old replicasets to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                },
                "command": {
                    "description": "Command to use when running flower (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running flower (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "-c",
                        "exec \\\nairflow {{ semverCompare \">=2.0.0\" .Values.airflowVersion | ternary \"celery flower\" \"flower\" }}"
                    ]
                },
                "extraNetworkPolicies": {
                    "description": "Additional NetworkPolicies as needed (Deprecated - renamed to `flower.networkPolicy.ingress.from`).",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
                    },
                    "default": []
                },
                "networkPolicy": {
                    "description": "Flower NetworkPolicy configuration",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "ingress": {
                            "description": "Flower NetworkPolicy ingress configuration",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "from": {
                                    "description": "Peers for flower NetworkPolicy ingress.",
                                    "type": "array",
                                    "default": [],
                                    "items": {
                                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
                                    }
                                },
                                "ports": {
                                    "description": "Ports for flower NetworkPolicy ingress (if `from` is set).",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
                                    },
                                    "default": [
                                        {
                                            "port": "{{ .Values.ports.flowerUI }}"
                                        }
                                    ],
                                    "examples": [
                                        {
                                            "port": 5565
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "resources": {
                    "description": "Resources for Flower pods.",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "secretName": {
                    "description": "A secret containing the user and password pair.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "username": {
                    "description": "Username use to access Flower.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "password": {
                    "description": "Password use to access Flower.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "service": {
                    "description": "Flower Service configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "type": {
                            "description": "Flower Service type.",
                            "type": "string",
                            "default": "ClusterIP"
                        },
                        "annotations": {
                            "description": "Annotations for the flower Service.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "ports": {
                            "description": "Ports for the flower Service.",
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "port": {
                                        "type": [
                                            "string",
                                            "integer"
                                        ]
                                    },
                                    "targetPort": {
                                        "type": [
                                            "string",
                                            "integer"
                                        ]
                                    },
                                    "protocol": {
                                        "type": "string"
                                    }
                                }
                            },
                            "default": [
                                {
                                    "name": "flower-ui",
                                    "port": "{{ .Values.ports.flowerUI }}"
                                }
                            ],
                            "examples": [
                                {
                                    "name": "flower-ui",
                                    "port": 8080,
                                    "targetPort": "flower-ui"
                                }
                            ]
                        },
                        "loadBalancerIP": {
                            "description": "Flower Service loadBalancerIP.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "loadBalancerSourceRanges": {
                            "description": "Flower Service ``loadBalancerSourceRanges``.",
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "default": [],
                            "examples": [
                                "10.123.0.0/16"
                            ]
                        }
                    }
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the worker Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "extraContainers": {
                    "description": "Launch additional containers into the flower pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
                    }
                },
                "extraVolumes": {
                    "description": "Mount additional volumes into the flower pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "extraVolumeMounts": {
                    "description": "Mount additional volumes into the flower pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for Flower pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Specify priority for Flower pods.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "affinity": {
                    "description": "Specify scheduling constraints for Flower pods.",
                    "type": "object",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for Flower pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for Flower pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "annotations": {
                    "description": "Annotations to add to the flower deployment",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "podAnnotations": {
                    "description": "Annotations to add to the Flower pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "Labels to add to the flower objects and pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "securityContext": {
                    "description": "Security context for the flower pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "env": {
                    "description": "Add additional env vars to flower.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "additionalProperties": false
                    }
                }
            }
        },
        "statsd": {
            "description": "StatsD settings.",
            "type": "object",
            "x-docsSection": "StatsD",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enable StatsD.",
                    "type": "boolean",
                    "default": true
                },
                "revisionHistoryLimit": {
                    "description": "Number of old replicasets to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                },
                "extraNetworkPolicies": {
                    "description": "Additional NetworkPolicies as needed.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
                    },
                    "default": []
                },
                "resources": {
                    "description": "Resources for StatsD pods.",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "service": {
                    "description": "StatsD Service configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "extraAnnotations": {
                            "description": "Extra annotations for the StatsD Service.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the StatsD Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "uid": {
                    "description": "StatsD run as user parameter.",
                    "type": "integer",
                    "default": 65534
                },
                "nodeSelector": {
                    "description": "Select certain nodes for StatsD pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Specify priority for StatsD pods.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "affinity": {
                    "description": "Specify scheduling constraints for StatsD pods.",
                    "type": "object",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for StatsD pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for StatsD pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "extraMappings": {
                    "description": "Additional mappings for StatsD exporter.If set, will merge default mapping and extra mappings, default mapping has higher priority. So, if you want to change some default mapping, please use `overrideMappings`",
                    "type": "array",
                    "default": []
                },
                "overrideMappings": {
                    "description": "Override mappings for StatsD exporter.If set, will ignore setting item in default and `extraMappings`. So, If you use it, ensure all mapping item contains in it.",
                    "type": "array",
                    "default": []
                },
                "securityContext": {
                    "description": "Security context for the StatsD pod. If not set, `statsd.uid` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "podAnnotations": {
                    "description": "Annotations to add to the StatsD pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "annotations": {
                    "description": "Annotations to add to the StatsD deployment.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "args": {
                    "description": "Args to use when running statsd-exporter (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "--statsd.mapping-config=/etc/statsd-exporter/mappings.yml"
                    ]
                }
            }
        },
        "pgbouncer": {
            "description": "PgBouncer settings.",
            "type": "object",
            "x-docsSection": "PgBouncer",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enable PgBouncer.",
                    "type": "boolean",
                    "x-docsSection": "Common",
                    "default": false
                },
                "annotations": {
                    "description": "Annotations to add to the PgBouncer deployment",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "replicas": {
                    "description": "Number of PgBouncer replicas to run in Deployment.",
                    "type": "integer",
                    "default": 1
                },
                "revisionHistoryLimit": {
                    "description": "Number of old replicasets to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                },
                "command": {
                    "description": "Command to use for PgBouncer (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "pgbouncer",
                        "-u",
                        "nobody",
                        "/etc/pgbouncer/pgbouncer.ini"
                    ]
                },
                "args": {
                    "description": "Args to use for PgBouncer (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "extraNetworkPolicies": {
                    "description": "Additional NetworkPolicies as needed.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
                    },
                    "default": []
                },
                "metadataPoolSize": {
                    "description": "Metadata pool size.",
                    "type": "integer",
                    "default": 10
                },
                "resultBackendPoolSize": {
                    "description": "Result backend pool size.",
                    "type": "integer",
                    "default": 5
                },
                "maxClientConn": {
                    "description": "Maximum clients that can connect to PgBouncer (higher = more file descriptors).",
                    "type": "integer",
                    "default": 100
                },
                "configSecretName": {
                    "description": "The PgBouncer config Secret name.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "podAnnotations": {
                    "description": "Add annotations for the PgBouncer Pod.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "podDisruptionBudget": {
                    "description": "PgBouncer PodDisruptionBudget.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enabled PodDistributionBudget.",
                            "type": "boolean",
                            "default": false
                        },
                        "config": {
                            "description": "Pod distribution configuration.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "maxUnavailable": {
                                    "description": "Max unavailable pods for PgBouncer.",
                                    "type": [
                                        "integer",
                                        "string"
                                    ],
                                    "default": 1
                                }
                            }
                        }
                    }
                },
                "resources": {
                    "description": "Resources for the PgBouncer pods.",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "service": {
                    "description": "PgBouncer Service configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "extraAnnotations": {
                            "description": "Extra annotations for the PgBouncer Service.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "verbose": {
                    "description": "Increase PgBouncer verbosity.",
                    "type": "integer",
                    "default": 0
                },
                "auth_type": {
                    "description": "Method of authenticating users",
                    "type": "string",
                    "default": "md5"
                },
                "auth_file": {
                    "description": "The name of the file to load user names and passwords from",
                    "type": "string",
                    "default": "/etc/pgbouncer/users.txt"
                },
                "logDisconnections": {
                    "description": "Log disconnections with reasons.",
                    "type": "integer",
                    "default": 0
                },
                "logConnections": {
                    "description": "Log successful logins.",
                    "type": "integer",
                    "default": 0
                },
                "sslmode": {
                    "description": "SSL mode for PgBouncer.",
                    "type": "string",
                    "enum": [
                        "disable",
                        "allow",
                        "prefer",
                        "require",
                        "verify-ca",
                        "verify-full"
                    ],
                    "default": "prefer"
                },
                "ciphers": {
                    "description": "The allowed ciphers, might be 'fast', 'normal' or list ciphers separated with ':'.",
                    "type": "string",
                    "default": "normal"
                },
                "ssl": {
                    "description": "SSL certificates for PgBouncer connection.",
                    "type": "object",
                    "properties": {
                        "ca": {
                            "description": "Certificate Authority for server side",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "cert": {
                            "description": "Server Certificate for server side",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "key": {
                            "description": "Private key used to authenticate with the server",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        }
                    }
                },
                "extraIniMetadata": {
                    "description": "Add extra metadata database specific PgBouncer ini configuration: https://www.pgbouncer.org/config.html#section-databases",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "extraIniResultBackend": {
                    "description": "Add extra result backend database specific PgBouncer ini configuration: https://www.pgbouncer.org/config.html#section-databases",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "extraIni": {
                    "description": "Add extra general PgBouncer ini configuration: https://www.pgbouncer.org/config.html",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "extraVolumes": {
                    "description": "Mount additional volumes into PgBouncer.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
                    }
                },
                "extraVolumeMounts": {
                    "description": "Mount additional volumes into PgBouncer.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    }
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the worker Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for PgBouncer pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "priorityClassName": {
                    "description": "Specify priority for PgBouncer pods.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "affinity": {
                    "description": "Specify scheduling constraints for PgBouncer pods.",
                    "type": "object",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for PgBouncer pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for PgBouncer pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "uid": {
                    "description": "PgBouncer run as user parameter.",
                    "type": "integer",
                    "default": 65534
                },
                "metricsExporterSidecar": {
                    "description": "PgBouncer - metrics exporter settings.",
                    "type": "object",
                    "x-docsSection": "PgBouncer",
                    "additionalProperties": false,
                    "properties": {
                        "resources": {
                            "description": "Resources for the PgBouncer metric exporter.",
                            "type": "object",
                            "default": {},
                            "examples": [
                                {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "128Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "128Mi"
                                    }
                                }
                            ],
                            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                        },
                        "sslmode": {
                            "description": "SSL mode for ``metricsExporterSidecar``",
                            "type": "string",
                            "enum": [
                                "disable",
                                "require",
                                "verify-ca",
                                "verify-full"
                            ],
                            "default": "disable"
                        },
                        "livenessProbe": {
                            "description": "LivenessProbe configurations for ``metricsExporterSidecar``",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "initialDelaySeconds": {
                                    "description": "Metrics Exporter liveness probe initial delay",
                                    "type": "integer",
                                    "default": 10
                                },
                                "periodSeconds": {
                                    "description": "Metrics Exporter liveness probe frequency",
                                    "type": "integer",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "description": "Metrics Exporter liveness probe command timeout",
                                    "type": "integer",
                                    "default": 1
                                }
                            }
                        },
                        "readinessProbe": {
                            "description": "ReadinessProbe configurations for ``metricsExporterSidecar``",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "initialDelaySeconds": {
                                    "description": "Metrics Exporter readiness probe initial delay",
                                    "type": "integer",
                                    "default": 10
                                },
                                "periodSeconds": {
                                    "description": "Metrics Exporter readiness probe frequency",
                                    "type": "integer",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "description": "Metrics Exporter readiness probe command timeout",
                                    "type": "integer",
                                    "default": 1
                                }
                            }
                        }
                    }
                }
            }
        },
        "redis": {
            "description": "Configuration for the Redis provisioned by the chart.",
            "type": "object",
            "x-docsSection": "Redis",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enable the Redis provisioned by the chart (you can also use an external Redis instance with `data.brokerUrl` or `data.brokerUrlSecretName`).",
                    "type": "boolean",
                    "default": true
                },
                "terminationGracePeriodSeconds": {
                    "description": "Grace period for Redis to exit after SIGTERM is sent from Kubernetes.",
                    "type": "integer",
                    "default": 600
                },
                "persistence": {
                    "description": "Persistence configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable persistent volumes.",
                            "type": "boolean",
                            "default": true
                        },
                        "size": {
                            "description": "Volume size for Redis StatefulSet.",
                            "type": "string",
                            "default": "1Gi"
                        },
                        "storageClassName": {
                            "description": "If using a custom StorageClass, pass name ref to all StatefulSets here.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to redis volumes.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "resources": {
                    "description": "Resources for the Redis pods",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                },
                "passwordSecretName": {
                    "description": "Redis password secret.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "password": {
                    "description": "If password is set, create secret with it, else generate a new one on install (can only be set during install, not upgrade).",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "safeToEvict": {
                    "description": "This setting tells Kubernetes that its ok to evict when it wants to scale a node down.",
                    "type": "boolean",
                    "default": true
                },
                "nodeSelector": {
                    "description": "Select certain nodes for Redis pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "affinity": {
                    "description": "Specify scheduling constraints for Redis pods.",
                    "type": "object",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for Redis pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for Redis pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the worker Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "securityContext": {
                    "description": "Security context for the cleanup job pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 999,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "uid": {
                    "description": "Redis run as user parameter.",
                    "type": "integer",
                    "default": 0
                },
                "podAnnotations": {
                    "description": "Annotations to add to the redis pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "registry": {
            "description": "Auth secret for a private registry. This is used if pulling Airflow images from a private registry.",
            "type": "object",
            "x-docsSection": "Kubernetes",
            "additionalProperties": false,
            "properties": {
                "secretName": {
                    "description": "Registry connection string secret.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "connection": {
                    "description": "Registry connection configuration.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": false,
                    "properties": {
                        "user": {
                            "description": "Username",
                            "type": "string",
                            "default": ""
                        },
                        "pass": {
                            "description": "Password",
                            "type": "string",
                            "default": ""
                        },
                        "host": {
                            "description": "Host",
                            "type": "string",
                            "default": ""
                        },
                        "email": {
                            "description": "Email",
                            "type": "string",
                            "default": ""
                        }
                    },
                    "examples": [
                        {
                            "user": "...",
                            "pass": "...",
                            "host": "...",
                            "email": "..."
                        }
                    ]
                }
            }
        },
        "elasticsearch": {
            "description": "Elasticsearch logging configuration.",
            "type": "object",
            "x-docsSection": "Airflow",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enable Elasticsearch task logging.",
                    "type": "boolean",
                    "default": false
                },
                "secretName": {
                    "description": "A secret containing the connection string.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "default": null
                },
                "connection": {
                    "description": "Elasticsearch connection configuration.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": false,
                    "properties": {
                        "scheme": {
                            "description": "Scheme",
                            "type": "string",
                            "default": "http"
                        },
                        "user": {
                            "description": "Username",
                            "type": "string",
                            "default": ""
                        },
                        "pass": {
                            "description": "Password",
                            "type": "string",
                            "default": ""
                        },
                        "host": {
                            "description": "Host",
                            "type": "string",
                            "default": ""
                        },
                        "port": {
                            "description": "Port",
                            "type": "number",
                            "default": 80
                        }
                    },
                    "examples": [
                        {
                            "scheme": "https",
                            "user": "...",
                            "pass": "...",
                            "host": "...",
                            "port": "..."
                        }
                    ]
                }
            }
        },
        "ports": {
            "description": "All ports used by chart.",
            "type": "object",
            "x-docsSection": "Ports",
            "additionalProperties": false,
            "properties": {
                "flowerUI": {
                    "description": "Flower UI port.",
                    "type": "integer",
                    "default": 5555
                },
                "airflowUI": {
                    "description": "Airflow UI port.",
                    "type": "integer",
                    "default": 8080
                },
                "workerLogs": {
                    "description": "Worker logs port.",
                    "type": "integer",
                    "default": 8793
                },
                "triggererLogs": {
                    "description": "Triggerer logs port.",
                    "type": "integer",
                    "default": 8794
                },
                "redisDB": {
                    "description": "Redis port.",
                    "type": "integer",
                    "default": 6379
                },
                "statsdIngest": {
                    "description": "StatsD ingest port.",
                    "type": "integer",
                    "default": 9125
                },
                "statsdScrape": {
                    "description": "StatsD scrape port.",
                    "type": "integer",
                    "default": 9102
                },
                "pgbouncer": {
                    "description": "PgBouncer port.",
                    "type": "integer",
                    "default": 6543
                },
                "pgbouncerScrape": {
                    "description": "PgBouncer scrape port.",
                    "type": "integer",
                    "default": 9127
                }
            }
        },
        "quotas": {
            "description": "Define any ResourceQuotas for namespace.",
            "x-docsSection": "Kubernetes",
            "default": {},
            "additionalProperties": {
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "number"
                    }
                ]
            }
        },
        "limits": {
            "description": "Define default/max/min values for pods and containers in namespace.",
            "type": "array",
            "x-docsSection": "Kubernetes",
            "default": [],
            "items": {
                "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeItem"
            }
        },
        "cleanup": {
            "description": "This runs as a CronJob to cleanup old pods.",
            "type": "object",
            "x-docsSection": "Jobs",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Enable cleanup.",
                    "type": "boolean",
                    "default": false
                },
                "schedule": {
                    "description": "Cleanup schedule.",
                    "type": "string",
                    "default": "*/15 * * * *"
                },
                "command": {
                    "description": "Command to use when running the cleanup cronjob (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running the cleanup cronjob (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "-c",
                        "exec airflow kubernetes cleanup-pods --namespace={{ .Release.Namespace }}"
                    ]
                },
                "jobAnnotations": {
                    "description": "Annotations to add to the cleanup cronjob.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nodeSelector": {
                    "description": "Select certain nodes for cleanup pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "affinity": {
                    "description": "Specify scheduling constraints for cleanup pods.",
                    "type": "object",
                    "default": {},
                    "$ref": "#/definitions/io.k8s.api.core.v1.Affinity"
                },
                "tolerations": {
                    "description": "Specify Tolerations for cleanup pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
                    }
                },
                "topologySpreadConstraints": {
                    "description": "Specify topology spread constraints for cleanup pods.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
                    }
                },
                "podAnnotations": {
                    "description": "Annotations to add to cleanup pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "labels": {
                    "description": "labels to add to cleanup pods.",
                    "type": "object",
                    "default": {},
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resources": {
                    "description": "Resources for or cleanup pods",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ]
                },
                "serviceAccount": {
                    "description": "Create ServiceAccount.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "create": {
                            "description": "Specifies whether a ServiceAccount should be created.",
                            "type": "boolean",
                            "default": true
                        },
                        "name": {
                            "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the release name.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to the cleanup CronJob Kubernetes ServiceAccount.",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "securityContext": {
                    "description": "Security context for the cleanup job pod. If not set, the values from `securityContext` will be used.",
                    "type": "object",
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
                    "default": {},
                    "examples": [
                        {
                            "runAsUser": 50000,
                            "runAsGroup": 0,
                            "fsGroup": 0
                        }
                    ]
                },
                "env": {
                    "description": "Add additional env vars to cleanup.",
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "name",
                            "value"
                        ],
                        "additionalProperties": false
                    }
                },
                "failedJobsHistoryLimit": {
                    "description": "The failed jobs history limit specifies the number of failed jobs to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                },
                "successfulJobsHistoryLimit": {
                    "description": "The successful jobs history limit specifies the number of finished jobs to retain.",
                    "type": [
                        "integer",
                        "null"
                    ],
                    "default": null,
                    "x-docsSection": null
                }
            }
        },
        "postgresql": {
            "description": "Configuration for PostgreSQL subchart.",
            "type": "object",
            "x-docsSection": "Database",
            "properties": {
                "enabled": {
                    "description": "Enable PostgreSQL subchart.",
                    "type": "boolean",
                    "default": true
                },
                "images": {
                    "description": "PostgreSQL image values.",
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                        "tag": {
                            "description": "The PostgreSQL image tag.",
                            "type": "string",
                            "default": "11"
                        }
                    }
                },
                "auth": {
                    "description": "PostgreSQL authentication values.",
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {
                        "enablePostgresUser": {
                            "description": "Assign a password to the 'postgres' admin user. Otherwise, remote access will be blocked for this user",
                            "type": "boolean",
                            "default": true
                        },
                        "postgresPassword": {
                            "description": "Password for the 'postgres' admin user.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": "postgres"
                        },
                        "username": {
                            "description": "Name for a custom user to create",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": ""
                        },
                        "password": {
                            "description": "Password for the custom user to create.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": ""
                        }
                    }
                }
            }
        },
        "config": {
            "description": "Settings to go into the mounted airflow.cfg",
            "type": "object",
            "x-docsSection": "Common",
            "default": "See values.yaml",
            "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                    "type": [
                        "boolean",
                        "integer",
                        "number",
                        "string"
                    ]
                }
            }
        },
        "multiNamespaceMode": {
            "description": "Whether Airflow can launch workers and/or pods in multiple namespaces. If true, it creates ``ClusterRole``/``ClusterRolebinding`` (with access to entire cluster)",
            "x-docsSection": "Airflow",
            "type": "boolean",
            "default": false
        },
        "podTemplate": {
            "description": "The contents of ``pod_template_file.yaml`` used for KubernetesExecutor workers (templated). The default (see ``files/pod-template-file.kubernetes-helm-yaml``) already takes into account normal ``workers`` configuration parameters (e.g. ``workers.resources``), so you normally won't need to override this directly.",
            "type": [
                "string",
                "null"
            ],
            "x-docsSection": "Airflow",
            "default": null,
            "examples": [
                "apiVersion: v1\nkind: Pod\nmetadata:\n  name: placeholder-name\n  labels:\n    tier: airflow\n    component: worker\n    release: {{ .Release.Name }}\nspec:\n  priorityClassName: high-priority\n  containers:\n    - name: base\n    ..."
            ]
        },
        "dags": {
            "description": "DAGs settings.",
            "type": "object",
            "x-docsSection": "Airflow",
            "additionalProperties": false,
            "properties": {
                "persistence": {
                    "description": "Persistence configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable persistent volume for storing dags.",
                            "type": "boolean",
                            "default": false
                        },
                        "size": {
                            "description": "Volume size for dags.",
                            "type": "string",
                            "default": "1Gi"
                        },
                        "storageClassName": {
                            "description": "If using a custom StorageClass, pass name here.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "accessMode": {
                            "description": "Access mode of the persistent volume.",
                            "type": "string",
                            "enum": [
                                "ReadWriteOnce",
                                "ReadOnlyMany",
                                "ReadWriteMany"
                            ],
                            "default": "ReadWriteOnce"
                        },
                        "existingClaim": {
                            "description": "The name of an existing PVC to use.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations for the dag PVC",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "subPath": {
                            "description": "Subpath within the PVC where dags are located.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        }
                    }
                },
                "gitSync": {
                    "description": "Git sync settings.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable Git sync.",
                            "type": "boolean",
                            "default": false
                        },
                        "repo": {
                            "description": "Git repository.",
                            "type": "string",
                            "default": "https://github.com/apache/airflow.git"
                        },
                        "branch": {
                            "description": "Git branch",
                            "type": "string",
                            "default": "v2-2-stable"
                        },
                        "rev": {
                            "description": "Git revision.",
                            "type": "string",
                            "default": "HEAD"
                        },
                        "depth": {
                            "description": "Repository depth.",
                            "type": "integer",
                            "default": 1
                        },
                        "maxFailures": {
                            "description": "The number of consecutive failures allowed before aborting.",
                            "type": "integer",
                            "default": 0
                        },
                        "subPath": {
                            "description": "Subpath within the repo where dags are located.",
                            "type": "string",
                            "default": "tests/dags"
                        },
                        "wait": {
                            "description": "Interval between git sync attempts in seconds. High values are more likely to cause DAGs to become out of sync between different components. Low values cause more traffic to the remote git repository.",
                            "type": "integer",
                            "default": 5
                        },
                        "containerName": {
                            "description": "Git sync container name.",
                            "type": "string",
                            "default": "git-sync"
                        },
                        "securityContext": {
                            "description": "Security context for the gitSync container. If not set, the values from `securityContext` will be used.",
                            "type": "object",
                            "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
                            "default": {},
                            "examples": [
                                {
                                    "runAsUser": 50000,
                                    "runAsGroup": 0
                                }
                            ]
                        },
                        "uid": {
                            "description": "Git sync container run as user parameter.",
                            "type": "integer",
                            "default": 65533
                        },
                        "extraVolumeMounts": {
                            "description": "Mount additional volumes into git sync container.",
                            "type": "array",
                            "default": [],
                            "items": {
                                "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                            }
                        },
                        "credentialsSecret": {
                            "description": "Name of a Secret containing the repo `GIT_SYNC_USERNAME` and `GIT_SYNC_PASSWORD`.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "sshKeySecret": {
                            "description": "Name of a Secret containing the repo `sshKeySecret`.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "knownHosts": {
                            "description": "When using a ssh private key, the contents of your `known_hosts` file.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null,
                            "examples": [
                                "<host1>,<ip1> <key1>\n<host2>,<ip2> <key2>",
                                "<host1>,<ip1> <key1>"
                            ]
                        },
                        "env": {
                            "description": "Environment variables for git sync container.",
                            "type": "array",
                            "default": [],
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "value"
                                ],
                                "additionalProperties": false
                            },
                            "examples": [
                                {
                                    "name": "GIT_SYNC_TIMEOUT",
                                    "value": "60"
                                }
                            ]
                        },
                        "resources": {
                            "description": "Resources on workers git-sync sidecar",
                            "type": "object",
                            "default": {},
                            "examples": [
                                {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "128Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "128Mi"
                                    }
                                }
                            ],
                            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                        }
                    }
                }
            }
        },
        "logs": {
            "description": "Logs settings.",
            "type": "object",
            "x-docsSection": "Airflow",
            "additionalProperties": false,
            "properties": {
                "persistence": {
                    "description": "Persistence configuration.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "enabled": {
                            "description": "Enable persistent volume for storing logs.",
                            "type": "boolean",
                            "default": false
                        },
                        "size": {
                            "description": "Volume size for logs.",
                            "type": "string",
                            "default": "100Gi"
                        },
                        "storageClassName": {
                            "description": "If using a custom StorageClass, pass name here.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        },
                        "annotations": {
                            "description": "Annotations to add to logs PVC",
                            "type": "object",
                            "default": {},
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "existingClaim": {
                            "description": "The name of an existing PVC to use.",
                            "type": [
                                "string",
                                "null"
                            ],
                            "default": null
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "io.k8s.api.apps.v1.DeploymentStrategy": {
            "description": "DeploymentStrategy describes how to replace existing pods with new ones.",
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment",
                    "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate."
                },
                "type": {
                    "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.apps.v1.RollingUpdateDeployment": {
            "description": "Spec to control the desired behavior of rolling update.",
            "properties": {
                "maxSurge": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                    "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods."
                },
                "maxUnavailable": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                    "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods."
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy": {
            "description": "HPAScalingPolicy is a single policy which must hold true for a specified past interval.",
            "properties": {
                "periodSeconds": {
                    "description": "PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).",
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "description": "Type is used to specify the scaling policy.",
                    "type": "string"
                },
                "value": {
                    "description": "Value contains the amount of change which is permitted by the policy. It must be greater than zero",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "required": [
                "type",
                "value",
                "periodSeconds"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.autoscaling.v2beta2.HPAScalingRules": {
            "description": "HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.",
            "properties": {
                "policies": {
                    "description": "policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy"
                    },
                    "type": "array"
                },
                "selectPolicy": {
                    "description": "selectPolicy is used to specify which policy should be used. If not set, the default value MaxPolicySelect is used.",
                    "type": "string"
                },
                "stabilizationWindowSeconds": {
                    "description": "StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior": {
            "description": "HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).",
            "properties": {
                "scaleDown": {
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HPAScalingRules",
                    "description": "scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used)."
                },
                "scaleUp": {
                    "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HPAScalingRules",
                    "description": "scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:\n  * increase no more than 4 pods per 60 seconds\n  * double the number of pods per 60 seconds\nNo stabilization is used."
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
            "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "string"
                },
                "partition": {
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
                    "format": "int32",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
                    "type": "string"
                }
            },
            "required": [
                "volumeID"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.Affinity": {
            "description": "Affinity is a group of affinity scheduling rules.",
            "properties": {
                "nodeAffinity": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity",
                    "description": "Describes node affinity scheduling rules for the pod."
                },
                "podAffinity": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity",
                    "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
                },
                "podAntiAffinity": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity",
                    "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.AzureDiskVolumeSource": {
            "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
            "properties": {
                "cachingMode": {
                    "description": "Host Caching mode: None, Read Only, Read Write.",
                    "type": "string"
                },
                "diskName": {
                    "description": "The Name of the data disk in the blob storage",
                    "type": "string"
                },
                "diskURI": {
                    "description": "The URI the data disk in the blob storage",
                    "type": "string"
                },
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "kind": {
                    "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                }
            },
            "required": [
                "diskName",
                "diskURI"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.AzureFileVolumeSource": {
            "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
            "properties": {
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "the name of secret that contains Azure Storage Account Name and Key",
                    "type": "string"
                },
                "shareName": {
                    "description": "Share Name",
                    "type": "string"
                }
            },
            "required": [
                "secretName",
                "shareName"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.CSIVolumeSource": {
            "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
            "properties": {
                "driver": {
                    "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
                    "type": "string"
                },
                "fsType": {
                    "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
                    "type": "string"
                },
                "nodePublishSecretRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
                    "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed."
                },
                "readOnly": {
                    "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
                    "type": "boolean"
                },
                "volumeAttributes": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
                    "type": "object"
                }
            },
            "required": [
                "driver"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.Capabilities": {
            "description": "Adds and removes POSIX capabilities from running containers.",
            "properties": {
                "add": {
                    "description": "Added capabilities",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "drop": {
                    "description": "Removed capabilities",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.CephFSVolumeSource": {
            "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "monitors": {
                    "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "path": {
                    "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "boolean"
                },
                "secretFile": {
                    "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "string"
                },
                "secretRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
                    "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
                },
                "user": {
                    "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
                    "type": "string"
                }
            },
            "required": [
                "monitors"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.CinderVolumeSource": {
            "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
                    "description": "Optional: points to a secret object containing parameters used to connect to OpenStack."
                },
                "volumeID": {
                    "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
                    "type": "string"
                }
            },
            "required": [
                "volumeID"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ConfigMapEnvSource": {
            "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
            "properties": {
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap must be defined",
                    "type": "boolean"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ConfigMapKeySelector": {
            "description": "Selects a key from a ConfigMap.",
            "properties": {
                "key": {
                    "description": "The key to select.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined",
                    "type": "boolean"
                }
            },
            "required": [
                "key"
            ],
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ConfigMapProjection": {
            "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
            "properties": {
                "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its keys must be defined",
                    "type": "boolean"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ConfigMapVolumeSource": {
            "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
            "properties": {
                "defaultMode": {
                    "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "format": "int32",
                    "type": "integer"
                },
                "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the ConfigMap or its keys must be defined",
                    "type": "boolean"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.Container": {
            "description": "A single application container that you want to run within a pod.",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "env": {
                    "description": "List of environment variables to set in the container. Cannot be updated.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
                    },
                    "type": "array",
                    "x-kubernetes-patch-merge-key": "name",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "envFrom": {
                    "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
                    },
                    "type": "array"
                },
                "image": {
                    "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
                    "type": "string"
                },
                "imagePullPolicy": {
                    "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
                    "type": "string"
                },
                "lifecycle": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
                    "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
                },
                "livenessProbe": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
                    "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
                },
                "name": {
                    "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
                    "type": "string"
                },
                "ports": {
                    "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
                    },
                    "type": "array",
                    "x-kubernetes-list-map-keys": [
                        "containerPort",
                        "protocol"
                    ],
                    "x-kubernetes-list-type": "map",
                    "x-kubernetes-patch-merge-key": "containerPort",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "readinessProbe": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
                    "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
                },
                "resources": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
                    "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
                },
                "securityContext": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
                    "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
                },
                "startupProbe": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
                    "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
                },
                "stdin": {
                    "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
                    "type": "boolean"
                },
                "stdinOnce": {
                    "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
                    "type": "boolean"
                },
                "terminationMessagePath": {
                    "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
                    "type": "string"
                },
                "terminationMessagePolicy": {
                    "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
                    "type": "string"
                },
                "tty": {
                    "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
                    "type": "boolean"
                },
                "volumeDevices": {
                    "description": "volumeDevices is the list of block devices to be used by the container.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
                    },
                    "type": "array",
                    "x-kubernetes-patch-merge-key": "devicePath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "volumeMounts": {
                    "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
                    },
                    "type": "array",
                    "x-kubernetes-patch-merge-key": "mountPath",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "workingDir": {
                    "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ContainerPort": {
            "description": "ContainerPort represents a network port in a single container.",
            "properties": {
                "containerPort": {
                    "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
                    "format": "int32",
                    "type": "integer"
                },
                "hostIP": {
                    "description": "What host IP to bind the external port to.",
                    "type": "string"
                },
                "hostPort": {
                    "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
                    "format": "int32",
                    "type": "integer"
                },
                "name": {
                    "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
                    "type": "string"
                },
                "protocol": {
                    "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
                    "type": "string"
                }
            },
            "required": [
                "containerPort"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.DownwardAPIProjection": {
            "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
            "properties": {
                "items": {
                    "description": "Items is a list of DownwardAPIVolume file",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
            "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
            "properties": {
                "fieldRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
                    "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported."
                },
                "mode": {
                    "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "format": "int32",
                    "type": "integer"
                },
                "path": {
                    "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
                    "type": "string"
                },
                "resourceFieldRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported."
                }
            },
            "required": [
                "path"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
            "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
            "properties": {
                "defaultMode": {
                    "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "format": "int32",
                    "type": "integer"
                },
                "items": {
                    "description": "Items is a list of downward API volume file",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.EmptyDirVolumeSource": {
            "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
            "properties": {
                "medium": {
                    "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
                    "type": "string"
                },
                "sizeLimit": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
                    "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.EnvFromSource": {
            "description": "EnvFromSource represents the source of a set of ConfigMaps",
            "properties": {
                "configMapRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource",
                    "description": "The ConfigMap to select from"
                },
                "prefix": {
                    "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "secretRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource",
                    "description": "The Secret to select from"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.EnvVar": {
            "description": "EnvVar represents an environment variable present in a Container.",
            "properties": {
                "name": {
                    "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                    "type": "string"
                },
                "value": {
                    "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                    "type": "string"
                },
                "valueFrom": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource",
                    "description": "Source for the environment variable's value. Cannot be used if value is not empty."
                }
            },
            "required": [
                "name"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.EnvVarSource": {
            "description": "EnvVarSource represents a source for the value of an EnvVar.",
            "properties": {
                "configMapKeyRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
                    "description": "Selects a key of a ConfigMap."
                },
                "fieldRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
                    "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs."
                },
                "resourceFieldRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
                    "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
                },
                "secretKeyRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
                    "description": "Selects a key of a secret in the pod's namespace"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.EphemeralVolumeSource": {
            "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
            "properties": {
                "volumeClaimTemplate": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimTemplate",
                    "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil."
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ExecAction": {
            "description": "ExecAction describes a \"run in container\" action.",
            "properties": {
                "command": {
                    "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.FCVolumeSource": {
            "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "lun": {
                    "description": "Optional: FC target lun number",
                    "format": "int32",
                    "type": "integer"
                },
                "readOnly": {
                    "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "targetWWNs": {
                    "description": "Optional: FC target worldwide names (WWNs)",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "wwids": {
                    "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.FlexVolumeSource": {
            "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
            "properties": {
                "driver": {
                    "description": "Driver is the name of the driver to use for this volume.",
                    "type": "string"
                },
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
                    "type": "string"
                },
                "options": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Optional: Extra command options if any.",
                    "type": "object"
                },
                "readOnly": {
                    "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
                    "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
                }
            },
            "required": [
                "driver"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.FlockerVolumeSource": {
            "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "datasetName": {
                    "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated",
                    "type": "string"
                },
                "datasetUUID": {
                    "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
            "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "string"
                },
                "partition": {
                    "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "format": "int32",
                    "type": "integer"
                },
                "pdName": {
                    "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
                    "type": "boolean"
                }
            },
            "required": [
                "pdName"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.GitRepoVolumeSource": {
            "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
            "properties": {
                "directory": {
                    "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
                    "type": "string"
                },
                "repository": {
                    "description": "Repository URL",
                    "type": "string"
                },
                "revision": {
                    "description": "Commit hash for the specified revision.",
                    "type": "string"
                }
            },
            "required": [
                "repository"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.GlusterfsVolumeSource": {
            "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "endpoints": {
                    "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "path": {
                    "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
                    "type": "boolean"
                }
            },
            "required": [
                "endpoints",
                "path"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.HTTPGetAction": {
            "description": "HTTPGetAction describes an action based on HTTP Get requests.",
            "properties": {
                "host": {
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                    "type": "string"
                },
                "httpHeaders": {
                    "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
                    },
                    "type": "array"
                },
                "path": {
                    "description": "Path to access on the HTTP server.",
                    "type": "string"
                },
                "port": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                    "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                },
                "scheme": {
                    "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
                    "type": "string"
                }
            },
            "required": [
                "port"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.HTTPHeader": {
            "description": "HTTPHeader describes a custom header to be used in HTTP probes",
            "properties": {
                "name": {
                    "description": "The header field name",
                    "type": "string"
                },
                "value": {
                    "description": "The header field value",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "value"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.Handler": {
            "description": "Handler defines a specific action that should be taken",
            "properties": {
                "exec": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
                    "description": "One and only one of the following should be specified. Exec specifies the action to take."
                },
                "httpGet": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
                    "description": "HTTPGet specifies the http request to perform."
                },
                "tcpSocket": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.HostAlias": {
            "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
            "properties": {
                "hostnames": {
                    "description": "Hostnames for the above IP address.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "ip": {
                    "description": "IP address of the host file entry.",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.HostPathVolumeSource": {
            "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "path": {
                    "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "type": "string"
                },
                "type": {
                    "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
                    "type": "string"
                }
            },
            "required": [
                "path"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ISCSIVolumeSource": {
            "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
            "properties": {
                "chapAuthDiscovery": {
                    "description": "whether support iSCSI Discovery CHAP authentication",
                    "type": "boolean"
                },
                "chapAuthSession": {
                    "description": "whether support iSCSI Session CHAP authentication",
                    "type": "boolean"
                },
                "fsType": {
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
                    "type": "string"
                },
                "initiatorName": {
                    "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
                    "type": "string"
                },
                "iqn": {
                    "description": "Target iSCSI Qualified Name.",
                    "type": "string"
                },
                "iscsiInterface": {
                    "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
                    "type": "string"
                },
                "lun": {
                    "description": "iSCSI Target Lun number.",
                    "format": "int32",
                    "type": "integer"
                },
                "portals": {
                    "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
                    "description": "CHAP Secret for iSCSI target and initiator authentication"
                },
                "targetPortal": {
                    "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
                    "type": "string"
                }
            },
            "required": [
                "targetPortal",
                "iqn",
                "lun"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.KeyToPath": {
            "description": "Maps a string key to a path within a volume.",
            "properties": {
                "key": {
                    "description": "The key to project.",
                    "type": "string"
                },
                "mode": {
                    "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "format": "int32",
                    "type": "integer"
                },
                "path": {
                    "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
                    "type": "string"
                }
            },
            "required": [
                "key",
                "path"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.Lifecycle": {
            "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
            "properties": {
                "postStart": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
                    "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
                },
                "preStop": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
                    "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.LimitRangeItem": {
            "description": "LimitRangeItem defines a min/max usage limit for any resource that matches on kind.",
            "properties": {
                "default": {
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    },
                    "description": "Default resource requirement limit value by resource name if resource limit is omitted.",
                    "type": "object"
                },
                "defaultRequest": {
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    },
                    "description": "DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.",
                    "type": "object"
                },
                "max": {
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    },
                    "description": "Max usage constraints on this kind by resource name.",
                    "type": "object"
                },
                "maxLimitRequestRatio": {
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    },
                    "description": "MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
                    "type": "object"
                },
                "min": {
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    },
                    "description": "Min usage constraints on this kind by resource name.",
                    "type": "object"
                },
                "type": {
                    "description": "Type of resource that this limit applies to.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.LocalObjectReference": {
            "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
            "properties": {
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                }
            },
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.NFSVolumeSource": {
            "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "path": {
                    "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "boolean"
                },
                "server": {
                    "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
                    "type": "string"
                }
            },
            "required": [
                "server",
                "path"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.NodeAffinity": {
            "description": "Node affinity is a group of node affinity scheduling rules.",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
                    },
                    "type": "array"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.NodeSelector": {
            "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
            "properties": {
                "nodeSelectorTerms": {
                    "description": "Required. A list of node selector terms. The terms are ORed.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
                    },
                    "type": "array"
                }
            },
            "required": [
                "nodeSelectorTerms"
            ],
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.NodeSelectorRequirement": {
            "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
            "properties": {
                "key": {
                    "description": "The label key that the selector applies to.",
                    "type": "string"
                },
                "operator": {
                    "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                    "type": "string"
                },
                "values": {
                    "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "key",
                "operator"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.NodeSelectorTerm": {
            "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
            "properties": {
                "matchExpressions": {
                    "description": "A list of node selector requirements by node's labels.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
                    },
                    "type": "array"
                },
                "matchFields": {
                    "description": "A list of node selector requirements by node's fields.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ObjectFieldSelector": {
            "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
            "properties": {
                "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                    "type": "string"
                },
                "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                }
            },
            "required": [
                "fieldPath"
            ],
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
            "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
            "properties": {
                "accessModes": {
                    "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "dataSource": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
                    "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field."
                },
                "dataSourceRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
                    "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While DataSource ignores disallowed values (dropping them), DataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n(Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled."
                },
                "resources": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
                    "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
                },
                "selector": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                    "description": "A label query over volumes to consider for binding."
                },
                "storageClassName": {
                    "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
                    "type": "string"
                },
                "volumeMode": {
                    "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
                    "type": "string"
                },
                "volumeName": {
                    "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
            "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                    "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation."
                },
                "spec": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
                    "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here."
                }
            },
            "required": [
                "spec"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
            "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
            "properties": {
                "claimName": {
                    "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
                    "type": "boolean"
                }
            },
            "required": [
                "claimName"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
            "description": "Represents a Photon Controller persistent disk resource.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "pdID": {
                    "description": "ID that identifies Photon Controller persistent disk",
                    "type": "string"
                }
            },
            "required": [
                "pdID"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PodAffinity": {
            "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
                    },
                    "type": "array"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PodAffinityTerm": {
            "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
            "properties": {
                "labelSelector": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                    "description": "A label query over a set of resources, in this case pods."
                },
                "namespaceSelector": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                    "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled."
                },
                "namespaces": {
                    "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\"",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "topologyKey": {
                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                    "type": "string"
                }
            },
            "required": [
                "topologyKey"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PodAntiAffinity": {
            "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
            "properties": {
                "preferredDuringSchedulingIgnoredDuringExecution": {
                    "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
                    },
                    "type": "array"
                },
                "requiredDuringSchedulingIgnoredDuringExecution": {
                    "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PodSecurityContext": {
            "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
            "properties": {
                "fsGroup": {
                    "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
                    "format": "int64",
                    "type": "integer"
                },
                "fsGroupChangePolicy": {
                    "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.",
                    "type": "string"
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                    "format": "int64",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                    "format": "int64",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
                    "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
                },
                "seccompProfile": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
                    "description": "The seccomp options to use by the containers in this pod."
                },
                "supplementalGroups": {
                    "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                },
                "sysctls": {
                    "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
                    },
                    "type": "array"
                },
                "windowsOptions": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
                    "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PortworxVolumeSource": {
            "description": "PortworxVolumeSource represents a Portworx volume resource.",
            "properties": {
                "fsType": {
                    "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "volumeID": {
                    "description": "VolumeID uniquely identifies a Portworx volume",
                    "type": "string"
                }
            },
            "required": [
                "volumeID"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.PreferredSchedulingTerm": {
            "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
            "properties": {
                "preference": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm",
                    "description": "A node selector term, associated with the corresponding weight."
                },
                "weight": {
                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "required": [
                "weight",
                "preference"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.Probe": {
            "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
            "properties": {
                "exec": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
                    "description": "One and only one of the following should be specified. Exec specifies the action to take."
                },
                "failureThreshold": {
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "httpGet": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
                    "description": "HTTPGet specifies the http request to perform."
                },
                "initialDelaySeconds": {
                    "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "format": "int32",
                    "type": "integer"
                },
                "periodSeconds": {
                    "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "successThreshold": {
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                    "format": "int32",
                    "type": "integer"
                },
                "tcpSocket": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
                    "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
                },
                "terminationGracePeriodSeconds": {
                    "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                    "format": "int64",
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ProjectedVolumeSource": {
            "description": "Represents a projected volume source",
            "properties": {
                "defaultMode": {
                    "description": "Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "format": "int32",
                    "type": "integer"
                },
                "sources": {
                    "description": "list of volume projections",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
                    },
                    "type": "array"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.QuobyteVolumeSource": {
            "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
            "properties": {
                "group": {
                    "description": "Group to map volume access to Default is no group",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
                    "type": "boolean"
                },
                "registry": {
                    "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
                    "type": "string"
                },
                "user": {
                    "description": "User to map volume access to Defaults to serivceaccount user",
                    "type": "string"
                },
                "volume": {
                    "description": "Volume is a string that references an already created Quobyte volume by name.",
                    "type": "string"
                }
            },
            "required": [
                "registry",
                "volume"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.RBDVolumeSource": {
            "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
                    "type": "string"
                },
                "image": {
                    "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "keyring": {
                    "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "monitors": {
                    "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "pool": {
                    "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                },
                "readOnly": {
                    "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
                    "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
                },
                "user": {
                    "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
                    "type": "string"
                }
            },
            "required": [
                "monitors",
                "image"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ResourceFieldSelector": {
            "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
            "properties": {
                "containerName": {
                    "description": "Container name: required for volumes, optional for env vars",
                    "type": "string"
                },
                "divisor": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
                    "description": "Specifies the output format of the exposed resources, defaults to \"1\""
                },
                "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                }
            },
            "required": [
                "resource"
            ],
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ResourceRequirements": {
            "description": "ResourceRequirements describes the compute resource requirements.",
            "properties": {
                "limits": {
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    },
                    "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object"
                },
                "requests": {
                    "additionalProperties": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                    "type": "object"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.SELinuxOptions": {
            "description": "SELinuxOptions are the labels to be applied to the container",
            "properties": {
                "level": {
                    "description": "Level is SELinux level label that applies to the container.",
                    "type": "string"
                },
                "role": {
                    "description": "Role is a SELinux role label that applies to the container.",
                    "type": "string"
                },
                "type": {
                    "description": "Type is a SELinux type label that applies to the container.",
                    "type": "string"
                },
                "user": {
                    "description": "User is a SELinux user label that applies to the container.",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ScaleIOVolumeSource": {
            "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
                    "type": "string"
                },
                "gateway": {
                    "description": "The host address of the ScaleIO API Gateway.",
                    "type": "string"
                },
                "protectionDomain": {
                    "description": "The name of the ScaleIO Protection Domain for the configured storage.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
                    "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
                },
                "sslEnabled": {
                    "description": "Flag to enable/disable SSL communication with Gateway, default false",
                    "type": "boolean"
                },
                "storageMode": {
                    "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
                    "type": "string"
                },
                "storagePool": {
                    "description": "The ScaleIO Storage Pool associated with the protection domain.",
                    "type": "string"
                },
                "system": {
                    "description": "The name of the storage system as configured in ScaleIO.",
                    "type": "string"
                },
                "volumeName": {
                    "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
                    "type": "string"
                }
            },
            "required": [
                "gateway",
                "system",
                "secretRef"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.SeccompProfile": {
            "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
            "properties": {
                "localhostProfile": {
                    "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".",
                    "type": "string"
                },
                "type": {
                    "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object",
            "x-kubernetes-unions": [
                {
                    "discriminator": "type",
                    "fields-to-discriminateBy": {
                        "localhostProfile": "LocalhostProfile"
                    }
                }
            ],
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.SecretEnvSource": {
            "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
            "properties": {
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret must be defined",
                    "type": "boolean"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.SecretKeySelector": {
            "description": "SecretKeySelector selects a key of a Secret.",
            "properties": {
                "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined",
                    "type": "boolean"
                }
            },
            "required": [
                "key"
            ],
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.SecretProjection": {
            "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
            "properties": {
                "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "optional": {
                    "description": "Specify whether the Secret or its key must be defined",
                    "type": "boolean"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.SecretVolumeSource": {
            "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
            "properties": {
                "defaultMode": {
                    "description": "Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
                    "format": "int32",
                    "type": "integer"
                },
                "items": {
                    "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
                    },
                    "type": "array"
                },
                "optional": {
                    "description": "Specify whether the Secret or its keys must be defined",
                    "type": "boolean"
                },
                "secretName": {
                    "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.SecurityContext": {
            "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
            "properties": {
                "allowPrivilegeEscalation": {
                    "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
                    "type": "boolean"
                },
                "capabilities": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities",
                    "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime."
                },
                "privileged": {
                    "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
                    "type": "boolean"
                },
                "procMount": {
                    "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
                    "type": "string"
                },
                "readOnlyRootFilesystem": {
                    "description": "Whether this container has a read-only root filesystem. Default is false.",
                    "type": "boolean"
                },
                "runAsGroup": {
                    "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                    "format": "int64",
                    "type": "integer"
                },
                "runAsNonRoot": {
                    "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                    "type": "boolean"
                },
                "runAsUser": {
                    "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                    "format": "int64",
                    "type": "integer"
                },
                "seLinuxOptions": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
                    "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
                },
                "seccompProfile": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
                    "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options."
                },
                "windowsOptions": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
                    "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
            "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
            "properties": {
                "audience": {
                    "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
                    "type": "string"
                },
                "expirationSeconds": {
                    "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
                    "format": "int64",
                    "type": "integer"
                },
                "path": {
                    "description": "Path is the path relative to the mount point of the file to project the token into.",
                    "type": "string"
                }
            },
            "required": [
                "path"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.StorageOSVolumeSource": {
            "description": "Represents a StorageOS persistent volume resource.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
                    "type": "boolean"
                },
                "secretRef": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
                    "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
                },
                "volumeName": {
                    "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
                    "type": "string"
                },
                "volumeNamespace": {
                    "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.Sysctl": {
            "description": "Sysctl defines a kernel parameter to be set",
            "properties": {
                "name": {
                    "description": "Name of a property to set",
                    "type": "string"
                },
                "value": {
                    "description": "Value of a property to set",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "value"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.TCPSocketAction": {
            "description": "TCPSocketAction describes an action based on opening a socket",
            "properties": {
                "host": {
                    "description": "Optional: Host name to connect to, defaults to the pod IP.",
                    "type": "string"
                },
                "port": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                    "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
                }
            },
            "required": [
                "port"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.Toleration": {
            "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
            "properties": {
                "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                },
                "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                },
                "operator": {
                    "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                    "type": "string"
                },
                "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                    "format": "int64",
                    "type": "integer"
                },
                "value": {
                    "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.TopologySpreadConstraint": {
            "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
            "properties": {
                "labelSelector": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                    "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain."
                },
                "maxSkew": {
                    "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
                    "format": "int32",
                    "type": "integer"
                },
                "topologyKey": {
                    "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
                    "type": "string"
                },
                "whenUnsatisfiable": {
                    "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assigment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                    "type": "string"
                }
            },
            "required": [
                "maxSkew",
                "topologyKey",
                "whenUnsatisfiable"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.TypedLocalObjectReference": {
            "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                }
            },
            "required": [
                "kind",
                "name"
            ],
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.Volume": {
            "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
            "properties": {
                "awsElasticBlockStore": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
                    "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
                },
                "azureDisk": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
                    "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
                },
                "azureFile": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource",
                    "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod."
                },
                "cephfs": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource",
                    "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
                },
                "cinder": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource",
                    "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
                },
                "configMap": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource",
                    "description": "ConfigMap represents a configMap that should populate this volume"
                },
                "csi": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource",
                    "description": "CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature)."
                },
                "downwardAPI": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource",
                    "description": "DownwardAPI represents downward API about the pod that should populate this volume"
                },
                "emptyDir": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource",
                    "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
                },
                "ephemeral": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource",
                    "description": "Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time.\n\nThis is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled."
                },
                "fc": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
                    "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
                },
                "flexVolume": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource",
                    "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
                },
                "flocker": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
                    "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
                },
                "gcePersistentDisk": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
                    "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
                },
                "gitRepo": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource",
                    "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
                },
                "glusterfs": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource",
                    "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
                },
                "hostPath": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
                    "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
                },
                "iscsi": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource",
                    "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md"
                },
                "name": {
                    "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                },
                "nfs": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
                    "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
                },
                "persistentVolumeClaim": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource",
                    "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
                },
                "photonPersistentDisk": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
                    "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
                },
                "portworxVolume": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
                    "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine"
                },
                "projected": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource",
                    "description": "Items for all in one resources secrets, configmaps, and downward API"
                },
                "quobyte": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
                    "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
                },
                "rbd": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource",
                    "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
                },
                "scaleIO": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource",
                    "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
                },
                "secret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource",
                    "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
                },
                "storageos": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource",
                    "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
                },
                "vsphereVolume": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
                    "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
                }
            },
            "required": [
                "name"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.VolumeDevice": {
            "description": "volumeDevice describes a mapping of a raw block device within a container.",
            "properties": {
                "devicePath": {
                    "description": "devicePath is the path inside of the container that the device will be mapped to.",
                    "type": "string"
                },
                "name": {
                    "description": "name must match the name of a persistentVolumeClaim in the pod",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "devicePath"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.VolumeMount": {
            "description": "VolumeMount describes a mounting of a Volume within a container.",
            "properties": {
                "mountPath": {
                    "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
                    "type": "string"
                },
                "mountPropagation": {
                    "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
                    "type": "string"
                },
                "name": {
                    "description": "This must match the Name of a Volume.",
                    "type": "string"
                },
                "readOnly": {
                    "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
                    "type": "boolean"
                },
                "subPath": {
                    "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
                    "type": "string"
                },
                "subPathExpr": {
                    "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "mountPath"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.VolumeProjection": {
            "description": "Projection that may be projected along with other supported volume types",
            "properties": {
                "configMap": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection",
                    "description": "information about the configMap data to project"
                },
                "downwardAPI": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection",
                    "description": "information about the downwardAPI data to project"
                },
                "secret": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection",
                    "description": "information about the secret data to project"
                },
                "serviceAccountToken": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection",
                    "description": "information about the serviceAccountToken data to project"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
            "description": "Represents a vSphere volume resource.",
            "properties": {
                "fsType": {
                    "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
                    "type": "string"
                },
                "storagePolicyID": {
                    "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
                    "type": "string"
                },
                "storagePolicyName": {
                    "description": "Storage Policy Based Management (SPBM) profile name.",
                    "type": "string"
                },
                "volumePath": {
                    "description": "Path that identifies vSphere volume vmdk",
                    "type": "string"
                }
            },
            "required": [
                "volumePath"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
            "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
            "properties": {
                "podAffinityTerm": {
                    "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm",
                    "description": "Required. A pod affinity term, associated with the corresponding weight."
                },
                "weight": {
                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                    "format": "int32",
                    "type": "integer"
                }
            },
            "required": [
                "weight",
                "podAffinityTerm"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
            "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
            "properties": {
                "gmsaCredentialSpec": {
                    "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                    "type": "string"
                },
                "gmsaCredentialSpecName": {
                    "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                    "type": "string"
                },
                "hostProcess": {
                    "description": "HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
                    "type": "boolean"
                },
                "runAsUserName": {
                    "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.networking.v1.IPBlock": {
            "description": "IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\",\"2001:db9::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.",
            "properties": {
                "cidr": {
                    "description": "CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\"",
                    "type": "string"
                },
                "except": {
                    "description": "Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" Except values will be rejected if they are outside the CIDR range",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "cidr"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.networking.v1.NetworkPolicyPeer": {
            "description": "NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed",
            "properties": {
                "ipBlock": {
                    "$ref": "#/definitions/io.k8s.api.networking.v1.IPBlock",
                    "description": "IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be."
                },
                "namespaceSelector": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                    "description": "Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.\n\nIf PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector."
                },
                "podSelector": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                    "description": "This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.\n\nIf NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace."
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.api.networking.v1.NetworkPolicyPort": {
            "description": "NetworkPolicyPort describes a port to allow traffic on",
            "properties": {
                "endPort": {
                    "description": "If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port. This feature is in Beta state and is enabled by default. It can be disabled using the Feature Gate \"NetworkPolicyEndPort\".",
                    "format": "int32",
                    "type": "integer"
                },
                "port": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                    "description": "The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched."
                },
                "protocol": {
                    "description": "The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.apimachinery.pkg.api.resource.Quantity": {
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "number"
                }
            ]
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
            "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
            "type": "object"
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
            "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
            "properties": {
                "matchExpressions": {
                    "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
                    },
                    "type": "array"
                },
                "matchLabels": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                    "type": "object"
                }
            },
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
            "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
            "properties": {
                "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string",
                    "x-kubernetes-patch-merge-key": "key",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                },
                "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "key",
                "operator"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "properties": {
                "apiVersion": {
                    "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                    "type": "string"
                },
                "fieldsType": {
                    "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                    "type": "string"
                },
                "fieldsV1": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1",
                    "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
                },
                "manager": {
                    "description": "Manager is an identifier of the workflow managing these fields.",
                    "type": "string"
                },
                "operation": {
                    "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                    "type": "string"
                },
                "subresource": {
                    "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                    "type": "string"
                },
                "time": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                    "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "properties": {
                "annotations": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
                    "type": "object"
                },
                "clusterName": {
                    "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
                    "type": "string"
                },
                "creationTimestamp": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                    "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "deletionGracePeriodSeconds": {
                    "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                    "format": "int64",
                    "type": "integer"
                },
                "deletionTimestamp": {
                    "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                    "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
                },
                "finalizers": {
                    "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "generateName": {
                    "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                    "type": "string"
                },
                "generation": {
                    "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                    "format": "int64",
                    "type": "integer"
                },
                "labels": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
                    "type": "object"
                },
                "managedFields": {
                    "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
                    "type": "string"
                },
                "ownerReferences": {
                    "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                    "items": {
                        "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
                    },
                    "type": "array",
                    "x-kubernetes-patch-merge-key": "uid",
                    "x-kubernetes-patch-strategy": "merge"
                },
                "resourceVersion": {
                    "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                },
                "selfLink": {
                    "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
                    "type": "string"
                },
                "uid": {
                    "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                    "type": "string"
                }
            },
            "type": "object",
            "additionalProperties": false
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "properties": {
                "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                },
                "blockOwnerDeletion": {
                    "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                    "type": "boolean"
                },
                "controller": {
                    "description": "If true, this reference points to the managing controller.",
                    "type": "boolean"
                },
                "kind": {
                    "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                    "type": "string"
                },
                "uid": {
                    "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
                    "type": "string"
                }
            },
            "required": [
                "apiVersion",
                "kind",
                "name",
                "uid"
            ],
            "type": "object",
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
        },
        "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "type": "string"
        },
        "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "integer"
                }
            ]
        },
        "logGroomerConfigType": {
            "description": "Configuration for log groomer sidecar",
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "description": "Whether to deploy the Airflow log groomer sidecar.",
                    "type": "boolean",
                    "default": true
                },
                "command": {
                    "description": "Command to use when running the Airflow log groomer sidecar (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": null
                },
                "args": {
                    "description": "Args to use when running the Airflow log groomer sidecar (templated).",
                    "type": [
                        "array",
                        "null"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        "bash",
                        "/clean-logs"
                    ]
                },
                "retentionDays": {
                    "description": "Number of days to retain the logs when running the Airflow log groomer sidecar.",
                    "type": "integer",
                    "default": 15
                },
                "resources": {
                    "description": "Resources for Airflow log groomer sidecar.",
                    "type": "object",
                    "default": {},
                    "examples": [
                        {
                            "limits": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "128Mi"
                            }
                        }
                    ],
                    "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements"
                }
            }
        }
    }
}
