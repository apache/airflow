#!/usr/bin/env bash
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This is hook build used by DockerHub. We are also using it
# on Travis CI to potentially rebuild (and refresh layers that
# are not cached) Docker images that are used to run CI jobs

set -euo pipefail

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
echo "My dir: ${MY_DIR}"

AIRFLOW_SOURCES="$(cd "${MY_DIR}/.." && pwd)"
export AIRFLOW_SOURCES

# The builds in DockerHub are executed within container so we should skip the check
export SKIP_DOCKER_CONTAINER_CHECK="true"
export FORCE_ANSWER_TO_QUESTIONS="yes"

# shellcheck source=scripts/ci/utils/_include_all.sh
. "${MY_DIR}/../scripts/ci/utils/_include_all.sh"

if [[ -z ${DOCKER_TAG:=} ]]; then
   echo
   echo "Error! Missing DOCKER_TAG environment variable"
   echo "Please specify DOCKER_TAG variable following the patter ${DEFAULT_BRANCH}-pythonX.Y[-ci]"
   echo
   exit 1
fi


[[ ${DOCKER_TAG:=} =~ ${DEFAULT_BRANCH}-python([0-9.]*) ]] && export PYTHON_VERSION=${BASH_REMATCH[1]}

if [[ -z ${PYTHON_VERSION:=} ]]; then
    echo
    echo "Error! Wrong DOCKER_TAG"
    echo "The tag '${DOCKER_TAG}' should follow the pattern ${DEFAULT_BRANCH}-pythonX.Y[-ci]"
    echo
    exit 1
else
    echo
    echo "Detected PYTHON_VERSION=${PYTHON_VERSION}"
    echo
fi

script_start

initialize_environment

prepare_build

set_image_variables

rm -rf "${BUILD_CACHE_DIR}"

pull_base_python_image

if [[ ${DOCKER_TAG} == *-ci ]]; then
    rebuild_checklicence_image_if_needed
    rebuild_ci_image_if_needed
    push_ci_image
    push_checklicence_image
else
    rebuild_ci_image_if_needed
    rebuild_prod_image_if_needed
    push_prod_image
fi
