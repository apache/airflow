#!/usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

_BREEZE_ALLOWED_PYTHON_MAJOR_MINOR_VERSIONS="2.7 3.5 3.6 3.7 3.8"
_BREEZE_ALLOWED_BACKENDS="sqlite mysql postgres"
_BREEZE_ALLOWED_INTEGRATIONS="cassandra kerberos mongo openldap presto rabbitmq redis all"
_BREEZE_ALLOWED_KUBERNETES_MODES="image git"
_BREEZE_ALLOWED_KUBERNETES_VERSIONS="v1.18.6 v1.17.5 v1.16.9"
_BREEZE_ALLOWED_HELM_VERSIONS="v3.2.4"
_BREEZE_ALLOWED_KIND_VERSIONS="v0.8.0"
_BREEZE_ALLOWED_MYSQL_VERSIONS="5.7 8"
_BREEZE_ALLOWED_POSTGRES_VERSIONS="9.6 10"
_BREEZE_ALLOWED_KIND_OPERATIONS="start stop restart status deploy test shell"

# Default values for the flags used

# shellcheck disable=SC2034
_BREEZE_DEFAULT_BACKEND="sqlite"
# shellcheck disable=SC2034
_BREEZE_DEFAULT_KUBERNETES_MODE="image"
# shellcheck disable=SC2034
_BREEZE_DEFAULT_KUBERNETES_VERSION="v1.18.6"
# shellcheck disable=SC2034
_BREEZE_DEFAULT_KIND_VERSION="v0.8.0"
# shellcheck disable=SC2034
_BREEZE_DEFAULT_HELM_VERSION="v3.2.4"
# shellcheck disable=SC2034
_BREEZE_DEFAULT_POSTGRES_VERSION="9.6"
# shellcheck disable=SC2034
_BREEZE_DEFAULT_MYSQL_VERSION="5.7"

_BREEZE_ALLOWED_INSTALL_AIRFLOW_VERSIONS=$(cat <<-EOF
1.10.12
1.10.11
1.10.10
1.10.9
1.10.8
1.10.7
1.10.6
1.10.5
1.10.4
1.10.3
1.10.2
master
v1-10-test
EOF
)

_BREEZE_ALLOWED_STATIC_CHECKS=$(cat <<-EOF
all
all-but-pylint
airflow-config-yaml
base-operator
bat-tests
black
build
build-providers-dependencies
check-apache-license
check-builtin-literals
check-executables-have-shebangs
check-hooks-apply
check-integrations
check-merge-conflict
check-xml
consistent-pylint
daysago-import-check
debug-statements
detect-private-key
doctoc
dont-use-safe-filter
end-of-file-fixer
fix-encoding-pragma
flake8
forbid-tabs
incorrect-use-of-LoggingMixin
insert-license
isort
language-matters
lint-dockerfile
lint-openapi
mixed-line-ending
mypy
provide-create-sessions
pydevd
pydocstyle
pylint
pylint-tests
python-no-log-warn
rst-backticks
setup-order
shellcheck
stylelint
trailing-whitespace
update-breeze-file
update-extras
update-local-yml-file
update-setup-cfg-file
yamllint
EOF
)

_BREEZE_DEFAULT_DOCKERHUB_USER="apache"
_BREEZE_DEFAULT_DOCKERHUB_REPO="airflow"
_BREEZE_DEFAULT_GITHUB_REPOSITORY="apache/airflow"
_BREEZE_DEFAULT_GITHUB_IMAGE_ID="latest"

_BREEZE_SHORT_OPTIONS="
h p: b: i:
K: V:
l a: t: d:
v y n q f
F P I E: C r
L U X
D: R: c g: s:
S: N:
"

_BREEZE_LONG_OPTIONS="
help python: backend: integration:
kubernetes-mode: kubernetes-version: helm-version: kind-version:
skip-mounting-local-sources install-airflow-version: install-airflow-reference: db-reset
verbose assume-yes assume-no assume-quit forward-credentials
force-build-images force-pull-images production-image extras: force-clean-images skip-rebuild-check
build-cache-local build-cache-pulled build-cache-disabled
dockerhub-user: dockerhub-repo: github-registry github-repository: github-image-id:
postgres-version: mysql-version:
version-suffix-for-pypi: version-suffix-for-svn:
additional-extras: additional-python-deps: additional-dev-deps: additional-runtime-deps:
"

export BREEZE_COMMANDS="
shell
build-docs
build-image
cleanup-image
exec
generate-constraints
push-image
initialize-local-virtualenv
setup-autocomplete
stop
restart
toggle-suppress-cheatsheet
toggle-suppress-asciiart"

export BREEZE_EXTRA_ARG_COMMANDS="
docker-compose
kind-cluster
prepare-backport-readme
prepare-backport-packages
static-check
tests"

export BREEZE_HELP_COMMANDS="
flags
help
help-all"

export ALL_BREEZE_COMMANDS="${BREEZE_COMMANDS} ${BREEZE_EXTRA_ARG_COMMANDS} ${BREEZE_HELP_COMMANDS}"

# Note on OSX bash has no associative arrays (Bash 3.2) so we have to fake it

_BREEZE_KNOWN_VALUES=""

function _get_known_values_breeze() {
    case "$1" in
    -p | --python)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_PYTHON_MAJOR_MINOR_VERSIONS}
        ;;
    -b | --backend)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_BACKENDS}
        ;;
    -i | --integration)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_INTEGRATIONS}
        ;;
    -K | --kubernetes-mode)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_KUBERNETES_MODES}
        ;;
    -V | --kubernetes-version)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_KUBERNETES_VERSIONS}
        ;;
    --kind-version)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_KIND_VERSIONS}
        ;;
    --helm-version)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_HELM_VERSIONS}
        ;;
    static-check)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_STATIC_CHECKS}
        ;;
    -A | --install-airflow-version)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_INSTALL_AIRFLOW_VERSIONS}
        ;;
    docker-compose)
        # shellcheck disable=SC2034
        if typeset -f "_docker_compose" >/dev/null; then
            _docker_compose
        fi
        _BREEZE_KNOWN_VALUES=""
        ;;
    --postgres-version)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_POSTGRES_VERSIONS}
        ;;
    --mysql-version)
        _BREEZE_KNOWN_VALUES=${_BREEZE_ALLOWED_MYSQL_VERSIONS}
        ;;
    -D | --dockerhub-user)
        _BREEZE_KNOWN_VALUES="${_BREEZE_DEFAULT_DOCKERHUB_USER}"
        ;;
    -R | --dockerhub-repo)
        _BREEZE_KNOWN_VALUES="${_BREEZE_DEFAULT_DOCKERHUB_REPO}"
        ;;
    -g | --github-repository)
        _BREEZE_KNOWN_VALUES="${_BREEZE_DEFAULT_GITHUB_REPOSITORY}"
        ;;
    -s | --github-image-id)
        _BREEZE_KNOWN_VALUES="${_BREEZE_DEFAULT_GITHUB_IMAGE_ID}"
        ;;
    kind-cluster)
        _BREEZE_KNOWN_VALUES="${_BREEZE_ALLOWED_KIND_OPERATIONS}"
        ;;
    *)
        _BREEZE_KNOWN_VALUES=""
        ;;
    esac
}

_BREEZE_GETOPT_SHORT_OPTIONS=""
_BREEZE_GETOPT_LONG_OPTIONS=""

function _build_options_breeze {
    local SEPARATOR=""
    local OPTION

    for OPTION in ${_BREEZE_SHORT_OPTIONS}
    do
        _BREEZE_GETOPT_SHORT_OPTIONS="${_BREEZE_GETOPT_SHORT_OPTIONS}${SEPARATOR}${OPTION}"
        SEPARATOR=","
    done

    SEPARATOR=""
    for OPTION in ${_BREEZE_LONG_OPTIONS}
    do
        _BREEZE_GETOPT_LONG_OPTIONS="${_BREEZE_GETOPT_LONG_OPTIONS}${SEPARATOR}${OPTION}"
        SEPARATOR=","
    done
}

function _listcontains_breeze {
    local WORD
    for WORD in $1; do
    [[ ${WORD} = "$2" ]] && return 0
    done
    return 1
}

# A completion function for breeze
function _comp_breeze {
    local ALL_OPTIONS=""
    local EXTRA_ARG_OPTIONS=""
    local OPTION
    local GETOPT_OPTION
    local LAST_COMMAND_PREFIX
    local PREVIOUS_COMMAND

    for OPTION in ${_BREEZE_SHORT_OPTIONS}
    do
        LAST_CHAR="${OPTION:$((${#OPTION} - 1)):1}"
        GETOPT_OPTION='-'${OPTION//:/}
        if [[ "${LAST_CHAR}" == ":" ]]; then
            EXTRA_ARG_OPTIONS="${EXTRA_ARG_OPTIONS} ${GETOPT_OPTION}"
        fi
        ALL_OPTIONS="${ALL_OPTIONS} ${GETOPT_OPTION}"
    done
    for OPTION in ${_BREEZE_LONG_OPTIONS}
    do
        LAST_CHAR="${OPTION:$((${#OPTION} - 1)):1}"
        GETOPT_OPTION='--'${OPTION//:/}
        ALL_OPTIONS="${ALL_OPTIONS} ${GETOPT_OPTION}"
        if [[ "${LAST_CHAR}" == ":" ]]; then
            EXTRA_ARG_OPTIONS="${EXTRA_ARG_OPTIONS} ${GETOPT_OPTION}"
        fi
    done

    ALL_OPTIONS="${ALL_OPTIONS} ${ALL_BREEZE_COMMANDS}"
    EXTRA_ARG_OPTIONS="${EXTRA_ARG_OPTIONS} ${BREEZE_EXTRA_ARG_COMMANDS}"

    LAST_COMMAND_PREFIX="${COMP_WORDS[${COMP_CWORD}]}"

    if [[ ${#COMP_WORDS[@]} -gt 1 ]]; then
        PREVIOUS_COMMAND="${COMP_WORDS[${COMP_CWORD} - 1]}"
    else
        PREVIOUS_COMMAND=""
    fi

    if _listcontains_breeze "${EXTRA_ARG_OPTIONS}" "${PREVIOUS_COMMAND}"; then
        COMPREPLY=()
        _get_known_values_breeze "${PREVIOUS_COMMAND}"
        while IFS='' read -r LINE; do COMPREPLY+=("$LINE"); done \
            < <(compgen -W "${_BREEZE_KNOWN_VALUES}" -- "${LAST_COMMAND_PREFIX}")
    else
        COMPREPLY=()
        while IFS='' read -r LINE; do COMPREPLY+=("$LINE"); done \
            < <(compgen -W "${ALL_OPTIONS}" -- "${LAST_COMMAND_PREFIX}")
    fi
}

_build_options_breeze

complete -F _comp_breeze breeze
complete -F _comp_breeze ./breeze
