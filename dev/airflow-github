#!/usr/bin/env python3

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This tool is based on the Spark merge_spark_pr script:
# https://github.com/apache/spark/blob/master/dev/merge_spark_pr.py

from collections import Counter

import sys
from github import Github

PROJECT = "AIRFLOW"


try:
    import click
except ImportError:
    print("Could not find the click library. Run 'sudo pip install click' to install.")
    sys.exit(-1)

try:
    import git
except ImportError:
    print("Could not import git. Run 'sudo pip install gitpython' to install")
    sys.exit(-1)

STATUS_COLOR_MAP = {
    'Resolved': 'green',
    'Open': 'red',
}

MERGED_COLOR_MAP = {
    'Yes': 'green',
    'No': 'red',
}


def get_commits_to_current_branch(repo, previous_version=None):
    log_args = ['--format="%H"']
    if previous_version:
        log_args.append(previous_version + "..")

    log = repo.git.log(*log_args)
    return set(log.strip('"').split('"\n"'))


def get_commits_between_tags(repo, earlier_tag, later_tag):
    log_args = ['--format="%H"', earlier_tag + ".." + later_tag]
    log = repo.git.log(*log_args)
    return list(log.strip('"').split('"\n"'))


def get_issue_status(issue):
    status = issue.state.capitalize()
    if status == 'Closed':
        return 'Resolved'
    return status


def style_issue_status(status):
    if status in STATUS_COLOR_MAP:
        return click.style(status[:10].ljust(10), STATUS_COLOR_MAP[status])
    return status[:10].ljust(10)


def get_issue_type(issue):
    label_prefix = "type:"
    issue_type = "Uncategorized"
    if issue.labels:
        for label in issue.labels:
            if label.name.startswith(label_prefix):
                return label.name.replace(label_prefix, "")
    return issue_type


@click.group()
def cli():
    r"""
    This tool should be used by Airflow Release Manager to verify what Jira's
     were merged in the current working branch.

        airflow-jira compare <target_version>
    """


@cli.command(short_help='Compare a jira target version against git merges')
@click.argument('target_version', default=None)
@click.option('--previous-version',
              'previous_version',
              help="Specify the previous tag on the working branch to limit"
                   " searching for few commits to find the cherry-picked commits")
@click.option('--unmerged', 'show_uncherrypicked_only', help="Show unmerged issues only", is_flag=True)
def compare(target_version, previous_version=None, show_uncherrypicked_only=False):
    repo = git.Repo(".", search_parent_directories=True)
    commits_to_current_branch = get_commits_to_current_branch(repo, previous_version)

    github_handler = Github("jhtimmins", "5IEs42b>1<cj0v3eF(y[")
    milestone_issues = list(github_handler.search_issues(
        f"repo:apache/airflow milestone:\"Airflow {target_version}\""))

    num_cherrypicked = 0
    num_uncherrypicked = Counter()

    # :<18 says left align, pad to 18
    # :<50.50 truncates after 50 chars
    # !s forces as string - some of the Jira objects have a string method, but
    #    Py3 doesn't call by default
    formatstr = "{id:<8}|{typ!s:<15}|{status!s}|{description:<83.83}|{merged:<6}|{commit:>9.7}"

    print(formatstr.format(
        id="ISSUE",
        typ="TYPE",
        status="STATUS".ljust(10),
        description="DESCRIPTION",
        merged="MERGED",
        commit="COMMIT"))

    for issue in milestone_issues:
        commit = None
        for event in issue.get_events():
            # Checks if event is a commit getting merged into master.
            if event.event == 'merged':
                commit = event.commit_id
        if not commit:
            continue

        status = get_issue_status(issue)

        # Checks if commit was cherrypicked into branch.
        if commit in commits_to_current_branch:
            num_cherrypicked += 1
            if show_uncherrypicked_only:
                continue
            cherrypicked = click.style("Yes".ljust(6), "green")
        else:
            num_uncherrypicked[status] += 1
            cherrypicked = click.style("No".ljust(6), "red")

        fields = dict(
            id=issue.number,
            typ=get_issue_type(issue),
            status=style_issue_status(status),
            description=issue.title,
        )

        print(formatstr.format(
            **fields,
            merged=cherrypicked,
            commit=commit))

    print("Commits on branch: {0:d}, {1:d} ({2}) yet to be cherry-picked".format(
        num_cherrypicked, sum(num_uncherrypicked.values()), dict(num_uncherrypicked)))


if __name__ == "__main__":
    import doctest
    (failure_count, test_count) = doctest.testmod()
    if failure_count:
        sys.exit(-1)
    cli()
