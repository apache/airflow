:mod:`airflow.www.utils`
========================

.. py:module:: airflow.www.utils


Module Contents
---------------

.. data:: DEFAULT_SENSITIVE_VARIABLE_FIELDS
   :annotation: = ['password', 'secret', 'passwd', 'authorization', 'api_key', 'apikey', 'access_token']

   

.. function:: get_sensitive_variables_fields()
   Get comma-separated sensitive Variable Fields from airflow.cfg.


.. function:: should_hide_value_for_key(key_name)
   Returns True if hide_sensitive_variable_fields is True, else False


.. function:: get_params(**kwargs)
   Return URL-encoded params


.. function:: generate_pages(current_page, num_of_pages, search=None, status=None, window=7)
   Generates the HTML for a paging component using a similar logic to the paging
   auto-generated by Flask managed views. The paging component defines a number of
   pages visible in the pager (window) and once the user goes to a page beyond the
   largest visible, it would scroll to the right the page numbers and keeps the
   current one in the middle of the pager component. When in the last pages,
   the pages won't scroll and just keep moving until the last page. Pager also contains
   <first, previous, ..., next, last> pages.
   This component takes into account custom parameters such as search and status,
   which could be added to the pages link in order to maintain the state between
   client and server. It also allows to make a bookmark on a specific paging state.

   :param current_page: the current page number, 0-indexed
   :param num_of_pages: the total number of pages
   :param search: the search query string, if any
   :param status: 'all', 'active', or 'paused'
   :param window: the number of pages to be shown in the paging component (7 default)
   :return: the HTML string of the paging component


.. function:: epoch(dttm)
   Returns an epoch-type date (tuple with no timezone)


.. function:: json_response(obj)
   Returns a json response from a json serializable python object


.. function:: make_cache_key(*args, **kwargs)
   Used by cache to get a unique key per URL


.. function:: task_instance_link(attr)
   Generates a URL to the Graph View for a TaskInstance.


.. function:: state_token(state)
   Returns a formatted string with HTML for a given State


.. function:: state_f(attr)
   Gets 'state' & returns a formatted string with HTML for a given State


.. function:: nobr_f(attr_name)
   Returns a formatted string with HTML with a Non-breaking Text element


.. function:: datetime_f(attr_name)
   Returns a formatted string with HTML for given DataTime


.. function:: json_f(attr_name)
   Returns a formatted string with HTML for given JSON serializable


.. function:: dag_link(attr)
   Generates a URL to the Graph View for a Dag.


.. function:: dag_run_link(attr)
   Generates a URL to the Graph View for a DagRun.


.. function:: pygment_html_render(s, lexer=lexers.TextLexer)
   Highlight text using a given Lexer


.. function:: render(obj, lexer)
   Render a given Python object with a given Pygments lexer


.. function:: wrapped_markdown(s, css_class=None)
   Convert a Markdown string to HTML.


.. function:: get_attr_renderer()
   Return Dictionary containing different Pygments Lexers for Rendering & Highlighting


.. function:: get_chart_height(dag)
   We use the number of tasks in the DAG as a heuristic to
   approximate the size of generated chart (otherwise the charts are tiny and unreadable
   when DAGs have a large number of tasks). Ideally nvd3 should allow for dynamic-height
   charts, that is charts that take up space based on the size of the components within.
   TODO(aoen): See [AIRFLOW-1263]


.. py:class:: UtcAwareFilterMixin

   Mixin for filter for UTC time.

   
   .. method:: apply(self, query, value)

      Apply the filter.




.. py:class:: UtcAwareFilterEqual

   Bases: :class:`airflow.www.utils.UtcAwareFilterMixin`, :class:`flask_appbuilder.models.sqla.filters.FilterEqual`

   Equality filter for UTC time.


.. py:class:: UtcAwareFilterGreater

   Bases: :class:`airflow.www.utils.UtcAwareFilterMixin`, :class:`flask_appbuilder.models.sqla.filters.FilterGreater`

   Greater Than filter for UTC time.


.. py:class:: UtcAwareFilterSmaller

   Bases: :class:`airflow.www.utils.UtcAwareFilterMixin`, :class:`flask_appbuilder.models.sqla.filters.FilterSmaller`

   Smaller Than filter for UTC time.


.. py:class:: UtcAwareFilterNotEqual

   Bases: :class:`airflow.www.utils.UtcAwareFilterMixin`, :class:`flask_appbuilder.models.sqla.filters.FilterNotEqual`

   Not Equal To filter for UTC time.


.. py:class:: UtcAwareFilterConverter

   Bases: :class:`flask_appbuilder.models.sqla.filters.SQLAFilterConverter`

   Retrieve conversion tables for UTC-Aware filters.

   .. attribute:: conversion_table
      

      


.. py:class:: CustomSQLAInterface(obj, session=None)

   Bases: :class:`flask_appbuilder.models.sqla.interface.SQLAInterface`

   FAB does not know how to handle columns with leading underscores because
   they are not supported by WTForm. This hack will remove the leading
   '_' from the key to lookup the column names.

   .. attribute:: filter_converter_class
      

      

   
   .. method:: is_utcdatetime(self, col_name)

      Check if the datetime is a UTC one.




.. data:: conversion_table
   

   

