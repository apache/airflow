#!/usr/bin/env bash
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Bash sanity settings (error on exit, complain for undefined vars, error when pipe fails)
set -euo pipefail

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function save_to_file {
    # shellcheck disable=SC2005
    echo "$(eval echo "\$$1")" > "${BUILD_CACHE_DIR}/.$1"
}

function read_from_file {
    cat "${BUILD_CACHE_DIR}/.$1" 2>/dev/null || true
}

function initialize_breeze_environment {
    CMDNAME="$(basename -- "$0")"
    export CMDNAME

    # Sets width of the screen
    SEPARATOR_WIDTH="${SEPARATOR_WIDTH:=$(tput cols)}"
    export SEPARATOR_WIDTH

    # Update short and long options in the breeze-complete script
    # This way autocomplete will work automagically with all options
    # shellcheck source=breeze-complete
    . "${MY_DIR}/breeze-complete"

    export AIRFLOW_SOURCES="${MY_DIR}"

    # Directory where all CI scripts are located
    export SCRIPTS_CI_DIR="${MY_DIR}/scripts/ci"

    export BUILD_CACHE_DIR="${MY_DIR}/.build"
    export FILES_DIR="${MY_DIR}/files"
    export TMP_DIR="${MY_DIR}/tmp"

    mkdir -pv "${BUILD_CACHE_DIR}" >/dev/null 2>&1
    mkdir -pv "${TMP_DIR}" >/dev/null 2>&1
    mkdir -pv "${FILES_DIR}" >/dev/null 2>&1

    export PYTHON_VERSION="${PYTHON_VERSION:=$(read_from_file PYTHON_VERSION)}"
}

function setup_default_breeze_variables {
    # Whether to actually run docker compose with the command set given
    export COMMAND_TO_RUN="enter_breeze"

    # Whether to push images after build
    export PUSH_IMAGES="false"

    # Skips mounting local Airflow sources
    export SKIP_MOUNTING_LOCAL_SOURCES="false"

    # Holds chosen command if the -x flag is used.
    export RUN_COMMAND=""

    # Holds the test target if the -t flag is used.
    export TEST_TARGET=""

    # Holds docker compose command if the -d flag is used.
    export DOCKER_COMPOSE_COMMAND=""

    # If true, the docker images are rebuilt locally.
    export DOCKER_BUILD_NEEDED="false"

    # By default we only pull images if we do not have them locally.
    # This can be overridden by -p flag
    export FORCE_PULL_IMAGES="false"

    # We use docker image caches by default to speed up the builds
    export USE_DOCKER_CACHE=${USE_DOCKER_CACHE:="true"}

    # By default we do not push images. This can be overridden by -u flag.
    export PUSH_IMAGES=${PUSH_IMAGES:="false"}

    # Branch name of the base image used (usually master or v1-10-test or v1-10-stable)
    export BRANCH_NAME=${BRANCH_NAME:=${DEFAULT_BRANCH}}

    # Determine version of the Airflow from version.py
    AIRFLOW_VERSION=$(cat airflow/version.py - << EOF | python
print(version.replace("+",""))
EOF
)
    export AIRFLOW_VERSION

    # Verbosity in running ci scripts
    export VERBOSE="false"

    # Whether to force the build
    export FORCE_DOCKER_BUILD=${FORCE_DOCKER_BUILD:="false"}

    # Start airflow-testing image with all the dependencies
    export DEPS="true"

    # Files determining whether asciiart/cheatsheet are suppressed
    export SUPPRESS_CHEATSHEET_FILE="${MY_DIR}/.suppress_cheatsheet"
    export SUPPRESS_ASCIIART_FILE="${MY_DIR}/.suppress_asciiart"
}

function print_badge {
    if [[ ! -f "${SUPPRESS_ASCIIART_FILE}" ]]; then
        cat <<EOF




                                  @&&&&&&@
                                 @&&&&&&&&&&&@
                                &&&&&&&&&&&&&&&&
                                        &&&&&&&&&&
                                            &&&&&&&
                                             &&&&&&&
                           @@@@@@@@@@@@@@@@   &&&&&&
                          @&&&&&&&&&&&&&&&&&&&&&&&&&&
                         &&&&&&&&&&&&&&&&&&&&&&&&&&&&
                                         &&&&&&&&&&&&
                                             &&&&&&&&&
                                           &&&&&&&&&&&&
                                      @@&&&&&&&&&&&&&&&@
                   @&&&&&&&&&&&&&&&&&&&&&&&&&&&&  &&&&&&
                  &&&&&&&&&&&&&&&&&&&&&&&&&&&&    &&&&&&
                 &&&&&&&&&&&&&&&&&&&&&&&&         &&&&&&
                                                 &&&&&&
                                               &&&&&&&
                                            @&&&&&&&&
            @&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
           &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
          &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&



     @&&&@       &&  @&&&&&&&&&&&   &&&&&&&&&&&&  &&            &&&&&&&&&&  &&&     &&&     &&&
    &&& &&&      &&  @&&       &&&  &&            &&          &&&       &&&@ &&&   &&&&&   &&&
   &&&   &&&     &&  @&&&&&&&&&&&&  &&&&&&&&&&&   &&          &&         &&&  &&& &&& &&@ &&&
  &&&&&&&&&&&    &&  @&&&&&&&&&     &&            &&          &&@        &&&   &&@&&   &&@&&
 &&&       &&&   &&  @&&     &&&@   &&            &&&&&&&&&&&  &&&&&&&&&&&&     &&&&   &&&&

&&&&&&&&&&&&   &&&&&&&&&&&&   &&&&&&&&&&&@  &&&&&&&&&&&&   &&&&&&&&&&&   &&&&&&&&&&&
&&&       &&&  &&        &&&  &&            &&&                  &&&&    &&
&&&&&&&&&&&&@  &&&&&&&&&&&&   &&&&&&&&&&&   &&&&&&&&&&&       &&&&       &&&&&&&&&&
&&&        &&  &&   &&&&      &&            &&&             &&&&         &&
&&&&&&&&&&&&&  &&     &&&&@   &&&&&&&&&&&@  &&&&&&&&&&&&  @&&&&&&&&&&&   &&&&&&&&&&&


                               Branch name:        ${BRANCH_NAME}
                               Docker image:       ${AIRFLOW_CI_IMAGE}
                               Airflow version:    ${AIRFLOW_VERSION}
                               Python version:     ${PYTHON_VERSION}
                               DockerHub user:     ${DOCKERHUB_USER}
                               DockerHub repo:     ${DOCKERHUB_REPO}
                               Backend:            ${BACKEND}
                               Kubernetes mode:    ${KUBERNETES_MODE}

EOF
    else
        cat <<EOF

   Branch name:        ${BRANCH_NAME}
   Docker image:       ${AIRFLOW_CI_IMAGE}
   Airflow version:    ${AIRFLOW_VERSION}
   Python version:     ${PYTHON_VERSION}
   DockerHub user:     ${DOCKERHUB_USER}
   DockerHub repo:     ${DOCKERHUB_REPO}
   Backend:            ${BACKEND}
   Kubernetes mode:    ${KUBERNETES_MODE}

EOF
    fi
}

# Default values

_BREEZE_DEFAULT_BACKEND="sqlite"
_BREEZE_DEFAULT_KUBERNETES_MODE="git_mode"

usage() {
    WIDTH=$((SEPARATOR_WIDTH>100 ? 100: SEPARATOR_WIDTH))
    ALLOWED_STATIC_CHECKS=$(echo "${_BREEZE_ALLOWED_STATIC_CHECKS=""}" | tr '\n' ' ' | \
    fold -w "${WIDTH}" -s)

    echo """
Usage: ${CMDNAME} [FLAGS] \\
  [-k]|[-S <STATIC_CHECK>]|[-F <STATIC_CHECK>]|[-O]|[-e]|[-a]|[-b]|[-t <TARGET>]|[-x <COMMAND>]|[-d <COMMAND>] \\
  -- <EXTRA_ARGS>

The swiss-knife-army tool for Airflow testings. It allows to perform various test tasks:

  * Enter interactive environment when no command flags are specified (default behaviour)
  * Stop the interactive environment with -k, --stop-environment command
  * Run static checks - either for currently staged change or for all files with
    -S, --static-check or -F, --static-check-all-files commanbd
  * Build documentation with -O, --build-docs command
  * Setup local virtualenv with -e, --setup-virtualenv command
  * Setup autocomplete for itself with -a, --setup-autocomplete command
  * Build CI/CHECKLICENCE docker images with -b, --build-only command
  * Build PROD image with -z, --build-prod-image-only
  * Run test target specified with -t, --test-target connad
  * Execute arbitrary command in the test environment with -x, --execute-command command
  * Execute arbitrary docker-compose command with -d, --docker-compose command

** Commands

  By default the script enters IT environment and drops you to bash shell,
  but you can also choose one of the commands to run specific actions instead:

-k, --stop-environment
        Bring down running docker compose environment. When you start the environment, the docker
        containers will continue running so that startup time is shorter. But they take quite a lot of
        memory and CPU. This command stops all running containers from the environment.

-O, --build-docs
       Build documentation.

-S, --static-check <STATIC_CHECK>
        Run selected static checks for currently changed files. You should specify static check that
        you would like to run or 'all' to run all checks. One of:

${ALLOWED_STATIC_CHECKS}

        You can pass extra arguments including options to to the pre-commit framework as
        <EXTRA_ARGS> passed after --. For example:

        '${0}  --static-check mypy' or
        '${0}  --static-check mypy -- --files tests/core.py'

        You can see all the options by adding --help EXTRA_ARG:

        '${0}  --static-check mypy -- --help'

-F, --static-check-all-files <STATIC_CHECK>
        Run selected static checks for all applicable files. You should specify static check that
        you would like to run or 'all' to run all checks. One of:

${ALLOWED_STATIC_CHECKS}

        You can pass extra arguments including options to the pre-commit framework as
        <EXTRA_ARGS> passed after --. For example:

        '${0} --static-check-all-files mypy' or
        '${0} --static-check-all-files mypy -- --verbose'

        You can see all the options by adding --help EXTRA_ARG:

        '${0} --static-check-all-files mypy -- --help'

-e, --initialize-local-virtualenv
        Initializes locally created virtualenv installing all dependencies of Airflow.
        This local virtualenv can be used to aid autocompletion and IDE support as
        well as run unit tests directly from the IDE. You need to have virtualenv
        activated before running this command.

-a, --setup-autocomplete
        Sets up autocomplete for breeze commands. Once you do it you need to re-enter the bash
        shell and when typing breeze command <TAB> will provide autocomplete for parameters and values.

-b, --build-only
        Only build CI/CHECKLICENCE docker images but do not enter the airflow-testing docker container.

-z, --build-prod-image-only
        Only build PROD docker image but do not enter the airflow-testing docker container.

-t, --test-target <TARGET>
        Run the specified unit test target. There might be multiple
        targets specified separated with comas. The <EXTRA_ARGS> passed after -- are treated
        as additional options passed to nosetest. For example:

        '${0} --test-target tests.core -- --logging-level=DEBUG'

-x, --execute-command <COMMAND>
        Run chosen command instead of entering the environment. The command is run using
        'bash -c \"<command with args>\" if you need to pass arguments to your command, you need
        to pass them together with command surrounded with \" or '. Alternatively you can pass arguments as
         <EXTRA_ARGS> passed after --. For example:

        '${0} --execute-command \"ls -la\"' or
        '${0} --execute-command ls -- --la'

-d, --docker-compose <COMMAND>
        Run docker-compose command instead of entering the environment. Use 'help' command
        to see available commands. The <EXTRA_ARGS> passed after -- are treated
        as additional options passed to docker-compose. For example

        '${0} --docker-compose pull -- --ignore-pull-failures'

** General flags

-h, --help
        Shows this help message.

-P, --python <PYTHON_VERSION>
        Python version used for the image. This is always major/minor version.
        One of [${_BREEZE_ALLOWED_PYTHON_VERSIONS:=}]. Default is the python3 or python on the path.

-B, --backend <BACKEND>
        Backend to use for tests - it determines which database is used.
        One of [${_BREEZE_ALLOWED_BACKENDS:=}]. Default: ${_BREEZE_DEFAULT_BACKEND:=}

-M, --kubernetes-mode <KUBERNETES_MODE>
        Kubernetes mode - only used in case of 'kubernetes' environment.
        One of [${_BREEZE_ALLOWED_KUBERNETES_MODES:=}]. Default: ${_BREEZE_DEFAULT_KUBERNETES_MODE:=}

-s, --skip-mounting-source-volume
        Skips mounting local volume with sources - you get exactly what is in the
        docker image rather than your current local sources of airflow.

-v, --verbose
        Show verbose information about executed commands (enabled by default for running test)

-y, --assume-yes
        Assume 'yes' answer to all questions.

-n, --assume-no
        Assume 'no' answer to all questions.

-q, --assume-quit
        Assume 'quit' answer to all questions.

-C, --toggle-suppress-cheatsheet
        Toggles on/off cheatsheet displayed before starting bash shell

-A, --toggle-suppress-asciiart
        Toggles on/off asciiart displayed before starting bash shell

** Dockerfile management flags

-D, --dockerhub-user
        DockerHub user used to pull, push and build images. Default: ${_BREEZE_DEFAULT_DOCKERHUB_USER:=}.

-H, --dockerhub-repo
        DockerHub repository used to pull, push, build images. Default: ${_BREEZE_DEFAULT_DOCKERHUB_REPO:=}.

-r, --force-build-images
        Forces building of the local docker images. The images are rebuilt
        automatically for the first time or when changes are detected in
        package-related files, but you can force it using this flag.

-p, --force-pull-images
        Forces pulling of images from DockerHub before building to populate cache. The
        images are pulled by default only for the first time you run the
        environment, later the locally build images are used as cache.

-u, --push-images
        After building - uploads the images to DockerHub
        It is useful in case you use your own DockerHub user to store images and you want
        to build them locally. Note that you need to use 'docker login' before you upload images.

-c, --cleanup-images
        Cleanup your local docker cache of the airflow docker images. This will not reclaim space in
        docker cache. You need to 'docker system prune' (optionally with --all) to reclaim that space.

"""
}

function initialize_virtualenv() {
   # Check if we are in virtualenv
   set +e
   echo -e "import sys\nif not hasattr(sys,'real_prefix'):\n  sys.exit(1)" | python
   RES=$?
   set -e
   if [[ ${RES} != "0" ]]; then
        echo >&2
        echo >&2 "ERROR:  Initializing local virtualenv only works when you have virtualenv activated"
        echo >&2
        echo >&2 "Please enter your local virtualenv before (for example using 'workon') "
        echo >&2
        exit 1
   else
        # If no Airflow Home defined - fallback to ${HOME}/airflow
        AIRFLOW_HOME_DIR=${AIRFLOW_HOME:=${HOME}/airflow}
        echo
        echo "Initializing the virtualenv: $(command -v python)!"
        echo
        echo "This will wipe out ${AIRFLOW_HOME_DIR} and reset all the databases!"
        echo
        "${MY_DIR}/confirm" "proceed with the initialization"
        echo
        pushd "${MY_DIR}"
        SYSTEM=$(uname -s)
        echo "#######################################################################"
        echo "  If you have trouble installing all dependencies you might need to run:"
        echo
        if [[ ${SYSTEM} == "Darwin" ]]; then
            echo "  brew install sqlite mysql postgresql"
        else
            echo "  sudo apt-get install openssl sqlite libmysqlclient-dev libmysqld-dev postgresql --confirm"
        fi
        echo
        echo "#######################################################################"
        pip install -e ".[devel]"
        popd
        echo
        echo "Wiping and recreating ${AIRFLOW_HOME_DIR}"
        echo
        rm -rvf "${AIRFLOW_HOME_DIR}"
        mkdir -p "${AIRFLOW_HOME_DIR}"
        echo
        echo "Resetting AIRFLOW sqlite database"
        echo
        unset AIRFLOW__CORE__UNIT_TEST_MODE
        airflow db reset -y
        echo
        echo "Resetting AIRFLOW sqlite unit test database"
        echo
        export AIRFLOW__CORE__UNIT_TEST_MODE=True
        airflow db reset -y
        exit 0
   fi
}

function setup_autocomplete() {
    echo
    echo "Installing bash/zsh completion for local user"
    echo "Note that completion for zsh is just limited to flags - without their values"
    echo
    set +e
    grep ".bash_completion.d" "${HOME}/.bashrc" >/dev/null 2>&1
    RES=$?
    set -e
    if [[ "${RES}" == "0" ]]; then
        echo >&2
        echo >&2 "ERROR:  Bash completion already setup before."
        echo >&2
        exit 1
    fi
    "${MY_DIR}/confirm" "This will create ~/.bash_completion.d/ directory and modify ~/.bashrc and ~/.zshrc file"
    echo
    echo
    mkdir -pv ~/.bash_completion.d
    ln -sf "${MY_DIR}/breeze-complete" "${HOME}/.bash_completion.d/"
    touch ~/.bashrc
    cat >>~/.bashrc <<"EOF"
for BCFILE in ~/.bash_completion.d/* ; do
    . ${BCFILE}
done
EOF
    cat >>~/.zshrc <<"EOF"
autoload compinit && compinit
autoload bashcompinit && bashcompinit
source ~/.bash_completion.d/breeze-complete
EOF
    if [[ "${OSTYPE}" == "darwin"* ]]; then
        #  For MacOS we have to handle the special case where terminal app DOES NOT run .bashrc by default
        #  But re-runs .bash_profile :(
        #  See https://scriptingosx.com/2017/04/about-bash_profile-and-bashrc-on-macos/
        set +e
        grep ".bashrc" "${HOME}/.bash_profile"
        RES=$?
        set -e
        if [[ "${RES}" == "0" ]]; then
            echo "  Seems you already source .bashrc in your .bash_profile so not adding it."
        else
            "${MY_DIR}/confirm" "This will modify  ~/.bash_profile and source .bashrc from it"
            echo
            echo
            cat >>~/.bash_profile <<"EOF"
if [ -r ~/.bashrc ]; then
    source ~/.bashrc
fi
EOF
        fi
    fi
    echo
    echo
    echo "Breeze bash completion installed to ~/.bash_completion.d/breeze-complete"
    echo
    echo
    echo "Please re-enter bash or run '. ~/.bash_completion.d/breeze-complete'"
    echo
    exit 0
}

function parse_arguments() {
    if ! PARAMS=$(getopt \
        -o "${_BREEZE_GETOPT_SHORT_OPTIONS:=}" \
        -l "${_BREEZE_GETOPT_LONG_OPTIONS:=}" \
        --name "$CMDNAME" -- "$@")
    then
        usage
        exit 1
    fi

    eval set -- "${PARAMS}"
    unset PARAMS

    # Parse Flags.
    # Please update short and long options in the breeze-complete script
    # This way autocomplete will work out-of-the-box
    while true
    do
      case "${1}" in
        -h|--help)
          usage;
          exit 0 ;;
        -P|--python)
          export PYTHON_VERSION="${2}";
          echo
          echo "Python version: ${PYTHON_VERSION}"
          echo
          shift 2 ;;
        -B|--backend)
          export BACKEND="${2}";
          echo
          echo "Backend: ${BACKEND}"
          echo
          shift 2 ;;
        -M|--kubernetes-mode)
          export KUBERNETES_MODE="${2}";
          echo
          echo "Kubernetes mode: ${KUBERNETES_MODE}"
          echo
          shift 2 ;;
        -D|--dockerhub-user)
          export DOCKERHUB_USER="${2}"
          echo
          echo "Dockerhub user ${DOCKERHUB_USER}"
          echo
          shift 2 ;;
        -H|--dockerhub-repo)
          export DOCKERHUB_REPO="${2}"
          echo
          echo "Dockerhub repo ${DOCKERHUB_REPO}"
          echo
          shift 2 ;;
        -s|--skip-mounting-local-sources)
          export SKIP_MOUNTING_LOCAL_SOURCES="true"
          echo "Skip mounting local sources: ${SKIP_MOUNTING_LOCAL_SOURCES}"
          echo
          shift ;;
        -N|--no-deps)
          export DEPS="false"
          echo "Only run airflow-testing image without dependent images"
          echo
          shift ;;
        -b|--build-only)
          export COMMAND_TO_RUN="build_ci_images_only"
          export FORCE_DOCKER_BUILD="true"
          export FORCE_ANSWER_TO_QUESTIONS="yes"
          echo "Only build CI/CHECKLICENCE images without asking. Do not enter airflow-testing container."
          echo
          shift ;;
        -z|--build-prod-image-only)
          export COMMAND_TO_RUN="build_prod_image_only"
          export FORCE_DOCKER_BUILD="true"
          export FORCE_ANSWER_TO_QUESTIONS="yes"
          echo "Only build PROD image without asking. Do not enter airflow-testing container."
          echo
          shift ;;
        -v|--verbose)
          export VERBOSE="true"
          echo "Verbose output"
          echo
          shift ;;
        -y|--assume-yes)
          export FORCE_ANSWER_TO_QUESTIONS="yes"
          echo "Assuming 'yes' answer to all questions."
          echo
          shift ;;
        -n|--assume-no)
          export FORCE_ANSWER_TO_QUESTIONS="no"
          echo "Assuming 'no' answer to all questions."
          echo
          shift ;;
        -q|--assume-quit)
          export FORCE_ANSWER_TO_QUESTIONS="quit"
          echo "Assuming 'quit' answer to all questions."
          echo
          shift ;;
        -C|--toggle-suppress-cheatsheet)
          if [[ -f "${SUPPRESS_CHEATSHEET_FILE}" ]]; then
            rm -f "${SUPPRESS_CHEATSHEET_FILE}"
          else
            touch "${SUPPRESS_CHEATSHEET_FILE}"
          fi
          echo "Toggle suppress cheatsheet"
          echo
          shift ;;
        -A|--toggle-suppress-asciiart)
          if [[ -f "${SUPPRESS_ASCIIART_FILE}" ]]; then
            rm -f "${SUPPRESS_ASCIIART_FILE}"
          else
            touch "${SUPPRESS_ASCIIART_FILE}"
          fi
          echo "Toggle suppress asciiart"
          echo
          shift ;;
        -r|--force-build-images)
          echo
          echo "Force build images"
          echo
          export FORCE_DOCKER_BUILD="true"
          shift ;;
        -p|--force-pull-images)
          echo
          echo "Force pulling images before build. Uses pulled images as cache."
          echo
          export FORCE_PULL_IMAGES="true"
          export FORCE_DOCKER_BUILD="true"
          shift ;;
        -u|--push-images)
          echo
          echo "Pushing images to DockerHub"
          echo
          export PUSH_IMAGES="true"
          export BUILD_IMAGES="true"
          shift ;;
        -c|--cleanup-images)
          echo
          echo "Cleanup the images"
          echo
          export COMMAND_TO_RUN="cleanup_images"
          shift ;;
        -e|--initialize-local-virtualenv)
          echo
          echo Initializing local virtualenv
          echo
          export COMMAND_TO_RUN="perform_initialize_local_virtualenv"
          shift ;;
        -a|--setup-autocomplete)
          echo
          echo Setting up autocomplete
          echo
          export COMMAND_TO_RUN="perform_setup_autocomplete"
          shift ;;
        -t|--test-target)
          export TEST_TARGET="${2}"
          if [[ "${TEST_TARGET}" == "." ]]; then
              export TEST_TARGET=""
          fi
          export COMMAND_TO_RUN="run_tests"
          shift 2 ;;
        -d|--docker-compose)
          export DOCKER_COMPOSE_COMMAND="${2}"
          export COMMAND_TO_RUN="run_docker_compose"
          shift 2 ;;
        -k|--stop-environment)
          export COMMAND_TO_RUN="run_docker_compose"
          export DOCKER_COMPOSE_COMMAND="down"
          shift ;;
        -x|--execute-command)
          export RUN_COMMAND="${2}"
          export COMMAND_TO_RUN="run_in_bash"
          shift 2 ;;
        -S|--static-check )
          export COMMAND_TO_RUN="perform_static_checks"
          export PYTHON_VERSION=3.5
          export STATIC_CHECK="${2}"
          export STATIC_CHECK_ALL_FILES="false"
          export EXTRA_STATIC_CHECK_OPTIONS=("--show-diff-on-failure")
          shift 2 ;;
        -F|--static-check-all-files)
          export COMMAND_TO_RUN="perform_static_checks"
          export PYTHON_VERSION=3.5
          export STATIC_CHECK="${2}"
          export STATIC_CHECK_ALL_FILES="true"
          export EXTRA_STATIC_CHECK_OPTIONS=("--all-files" "--show-diff-on-failure")
          shift 2 ;;
        -O|--build-docs)
          export COMMAND_TO_RUN="build_docs"
          shift ;;
        --)
          shift ;
          break ;;
        *)
          usage
          echo >&2
          echo >&2 "ERROR: Unknown argument ${1}"
          echo >&2
          exit 1
          ;;
      esac
    done
    export REMAINING_ARGS=("$@")
}

function print_header_line {
    echo
    printf '=%.0s' $(seq "${SEPARATOR_WIDTH}")
    echo
}

function print_line {
    printf '#%.0s' $(seq "${SEPARATOR_WIDTH}")
}

function read_saved_environment_variables {
    # Here you read DockerHub user/account that you use
    # You can populate your own images in DockerHub this way and work with the,
    # You can override it with "-d" option and it will be stored in .build directory
    export DOCKERHUB_USER="${DOCKERHUB_USER:=$(read_from_file DOCKERHUB_USER)}"
    export DOCKERHUB_USER="${DOCKERHUB_USER:=${_BREEZE_DEFAULT_DOCKERHUB_USER}}"

    # Here you read DockerHub repo that you use
    # You can populate your own images in DockerHub this way and work with them
    # You can override it with "-d" option and it will be stored in .build directory
    export DOCKERHUB_REPO="${DOCKERHUB_REPO:=$(read_from_file DOCKERHUB_REPO)}"
    export DOCKERHUB_REPO="${DOCKERHUB_REPO:=${_BREEZE_DEFAULT_DOCKERHUB_REPO}}"

    # Default backend for tests
    export BACKEND="${BACKEND:=$(read_from_file BACKEND)}"
    export BACKEND=${BACKEND:-${_BREEZE_DEFAULT_BACKEND}}

    # Default mode of Kubernetes to use
    export KUBERNETES_MODE="${KUBERNETES_MODE:=$(read_from_file KUBERNETES_MODE)}"
    export KUBERNETES_MODE=${KUBERNETES_MODE:=${_BREEZE_DEFAULT_KUBERNETES_MODE}}
}

function validate_parameters {
    #################### Check python version ##########################################
    if [[ ${_BREEZE_ALLOWED_PYTHON_VERSIONS:=} != *" ${PYTHON_VERSION} "* ]]; then
        echo >&2
        echo >&2 "ERROR:  Allowed Python versions: [${_BREEZE_ALLOWED_PYTHON_VERSIONS}]. Is: '${PYTHON_VERSION}'."
        echo >&2
        echo >&2 "Switch to virtualenv with the supported python version or specify python with --python flag."
        echo >&2
        exit 1
    fi

    #################### Check backends ##########################################
    if [[ ${_BREEZE_ALLOWED_BACKENDS:=} != *" ${BACKEND} "* ]]; then
        echo >&2
        echo >&2 "ERROR:  Allowed backends are [${_BREEZE_ALLOWED_BACKENDS}]. Used: '${BACKEND}'"
        echo >&2
        exit 1
    fi

    #################### Check environments ##########################################
    if [[ ${_BREEZE_ALLOWED_KUBERNETES_MODES} != *" ${KUBERNETES_MODE} "* ]]; then
        echo >&2
        echo >&2 "ERROR:  Allowed kubernetes modes" \
             "are [${_BREEZE_ALLOWED_KUBERNETES_MODES}]. Used: '${KUBERNETES_MODE}'"
        echo >&2
        exit 1
    fi
}

function save_breeze_environment_variables {
    save_to_file BACKEND
    save_to_file KUBERNETES_MODE
    save_to_file PYTHON_VERSION
    save_to_file DOCKERHUB_USER
    save_to_file DOCKERHUB_REPO
}

function touch_local_files {
    # Those files are mounted into container when run locally
    # .bash_history is preserved and you can modify .bash_aliases and .inputrc
    # according to your liking
    touch "${MY_DIR}/.bash_history"
    touch "${MY_DIR}/.bash_aliases"
    touch "${MY_DIR}/.inputrc"
}

function prepare_command_file() {
    local FILE="${1}"
    local CMD="${2}"
    local TESTS="${3}"
    local EXPANSION="${4-@}"
    cat <<EOF > "${FILE}"
#!/usr/bin/env bash
cd "\$(pwd)" || exit
export DOCKERHUB_USER=${DOCKERHUB_USER}
export DOCKERHUB_REPO=${DOCKERHUB_REPO}
export COMPOSE_FILE="${COMPOSE_FILE}"
export PYTHON_VERSION="${PYTHON_VERSION}"
export BACKEND="${BACKEND}"
export KUBERNETES_MODE="${KUBERNETES_MODE}"
export AIRFLOW_VERSION="${AIRFLOW_VERSION}"
export RUN_TESTS="${TESTS}"
export WEBSERVER_HOST_PORT="${WEBSERVER_HOST_PORT}"
export POSTGRES_HOST_PORT="${POSTGRES_HOST_PORT}"
export MYSQL_HOST_PORT="${MYSQL_HOST_PORT}"
docker-compose --log-level INFO ${CMD}\$${EXPANSION}"
EOF
    chmod u+x "${FILE}"
}

function prepare_command_files {
    MAIN_DOCKER_COMPOSE_FILE=${SCRIPTS_CI_DIR}/docker-compose.yml
    BACKEND_DOCKER_COMPOSE_FILE=${SCRIPTS_CI_DIR}/docker-compose-${BACKEND}.yml
    LOCAL_DOCKER_COMPOSE_FILE=${SCRIPTS_CI_DIR}/docker-compose-local.yml

    COMPOSE_FILE=${MAIN_DOCKER_COMPOSE_FILE}:${BACKEND_DOCKER_COMPOSE_FILE}

    if [[ "${SKIP_MOUNTING_LOCAL_SOURCES}" != "true" ]]; then
        COMPOSE_FILE=${COMPOSE_FILE}:${LOCAL_DOCKER_COMPOSE_FILE}
    fi

    export COMPOSE_FILE

    CI_ENTRYPOINT_FILE="/opt/airflow/scripts/ci/in_container/entrypoint_ci.sh"

    DC_RUN_COMMAND="run --service-ports --rm airflow-testing \"${CI_ENTRYPOINT_FILE} "
    DC_RUN_COMMAND_NO_DEPS="run --no-deps --service-ports --rm airflow-testing \"${CI_ENTRYPOINT_FILE} "

    export LAST_DC_RUN_FILE="cmd_run"
    export LAST_DC_RUN_NO_DEPS_FILE="cmd_only_no_deps"
    export LAST_DC_TEST_FILE="test_run"
    export LAST_DC_FILE="docker_compose"

    # Prepare script for "run command"
    prepare_command_file "${BUILD_CACHE_DIR}/${LAST_DC_RUN_FILE}" "${DC_RUN_COMMAND}" "false" '*'

    # Prepare script for "run command without dependencies"
    prepare_command_file "${BUILD_CACHE_DIR}/${LAST_DC_RUN_NO_DEPS_FILE}" \
        "${DC_RUN_COMMAND_NO_DEPS}" "false" '*'

    # Prepare script for "run test"
    prepare_command_file "${BUILD_CACHE_DIR}/${LAST_DC_TEST_FILE}" "${DC_RUN_COMMAND}" "true" '*'

    # Prepare script for "run docker compose command"
    prepare_command_file "${BUILD_CACHE_DIR}/${LAST_DC_FILE}" '"' "false"
}

function print_cheatsheet {
    if [[ ! -f ${SUPPRESS_CHEATSHEET_FILE} ]]; then
        echo
        echo
        print_line
        echo
        echo "                                  Airflow Breeze CHEATSHEET"
        echo
        print_line
        echo
        echo
        print_line
        echo
        echo " Quick scripts:"
        echo "    * Enter the full environment            : ${BUILD_CACHE_DIR}/${LAST_DC_RUN_FILE}"
        echo "    * Run command in full environment       : ${BUILD_CACHE_DIR}/${LAST_DC_RUN_FILE} "\
                                                              "[command with args] [bash options]"
        echo "    * Run command without dependent images  : ${BUILD_CACHE_DIR}/${LAST_DC_RUN_NO_DEPS_FILE} "\
                                                              "[command with args] [bash options]"
        echo "    * Run tests in the full environment     : ${BUILD_CACHE_DIR}/${LAST_DC_TEST_FILE} "\
                                                              "[test target] [nosetest options]"
        echo "    * Run Docker compose command            : ${BUILD_CACHE_DIR}/${LAST_DC_FILE} "\
                                                              "[docker-compose cmd] [docker-compose options]"
        echo

        set +e
        if ! command -v breeze; then
            print_line
            echo
            echo " Adding breeze to your path:"
            echo "    When you exit the environment, you can add sources of airflow to the path - you can"
            echo "    run breeze or the scripts above from any directory by calling 'breeze' commands directly"
            echo
            echo "     export PATH=\${PATH}:\"${MY_DIR}\""
            echo
        fi
        set -e
        print_line

        echo
        echo " Port forwarding:"
        echo
        echo "   Ports are forwarded to the running docker containers for webserver and database"
        echo "     * ${WEBSERVER_HOST_PORT} -> forwarded to airflow webserver -> airflow-testing:8080"
        echo "     * ${POSTGRES_HOST_PORT} -> forwarded to postgres database -> postgres:5432"
        echo "     * ${MYSQL_HOST_PORT} -> forwarded to mysql database  -> mysql:3306"
        echo
        echo "   Here are links to those services that you can use on host:"
        echo "     * Webserver: http://127.0.0.1:28080"
        echo "     * Postgres:  jdbc:postgresql://127.0.0.1:25433/airflow?user=postgres&password=airflow"
        echo "     * Mysql:     jdbc:mysql://localhost:23306/airflow?user=root"
        echo
    else
        echo
    fi
}

function print_setup_instructions {
    # shellcheck disable=SC2034  # Unused variables left for comp_breeze usage
    if ! typeset -f "_comp_breeze" > /dev/null; then
        print_line
        echo
        echo "  You can setup autocomplete by running '$0 --setup-autocomplete'"
        echo
        echo
    fi
    print_line
    echo
    echo "  You can toggle ascii/cheatsheet by adding this flag:"
    echo "      * --toggle-suppress-cheatsheet"
    echo "      * --toggle-suppress-asciiart"
    echo
    print_line
    echo
    echo
    echo
    echo
}

function make_sure_precommit_is_installed {
    echo
    echo "Making sure pre-commit is installed"
    echo
    if command -v pip3 >/dev/null; then
      PIP_BIN=pip3
    elif command -v pip >/dev/null; then
      PIP_BIN=pip
    else
      echo >&2
      echo >&2 "ERROR: You need to have pip or pip3 in your PATH"
      echo >&2
      S
      exit 1
    fi
    "${PIP_BIN}" install --user --upgrade pre-commit >/dev/null 2>&1
    # Add ~/.local/bin to the path in case pip is run outside of virtualenv
    export PATH="${PATH}":~/.local/bin
}


function run_static_checks {
    if [[ ${STATIC_CHECK} == "all" ]]; then
        echo
        echo "Running: pre-commit run" "${EXTRA_STATIC_CHECK_OPTIONS[@]}" "$@"
        echo

    elif [[ ${STATIC_CHECK} == "all-but-pylint" ]]; then
        echo
        echo "Setting SKIP=pylint. Running: pre-commit run" "${EXTRA_STATIC_CHECK_OPTIONS[@]}" "$@"
        echo
        echo
        SKIP=pylint pre-commit run "${EXTRA_STATIC_CHECK_OPTIONS[@]}" "$@"
    else
        echo
        echo "Running: pre-commit run" "${STATIC_CHECK}" "${EXTRA_STATIC_CHECK_OPTIONS[@]}" "$@"
        echo
        pre-commit run "${STATIC_CHECK}" "${EXTRA_STATIC_CHECK_OPTIONS[@]}" "$@"
    fi
}

function run_build_command {
    case "${COMMAND_TO_RUN}" in
        enter_breeze|build_docs|run_tests|run_docker_compose|run_in_bash)
            rebuild_ci_image_if_needed
            ;;
        perform_static_checks|build_ci_images_only)
            rebuild_ci_image_if_needed
            rebuild_checklicence_image_if_needed
            ;;
        build_prod_image_only)
            rebuild_prod_image_if_needed
            ;;
        cleanup_images)
            remove_all_images
            ;;
        perform_initialize_local_virtualenv|perform_setup_autocomplete)
            # skip building images
            ;;
        *)
          echo >&2
          echo >&2 "ERROR: Unknown command to run ${COMMAND_TO_RUN}"
          echo >&2
          ;;
    esac
}

function run_breeze_command {
    set -u
    case "${COMMAND_TO_RUN}" in
        enter_breeze)
            if [[ ${DEPS} == "true" ]]; then
                 "${BUILD_CACHE_DIR}/${LAST_DC_RUN_FILE}"
            else
                 "${BUILD_CACHE_DIR}/${LAST_DC_RUN_NO_DEPS_FILE}"
            fi
            ;;
        run_tests)
            "${BUILD_CACHE_DIR}/${LAST_DC_TEST_FILE}" "\"${TEST_TARGET}\"" "$@"
            ;;
        run_docker_compose)
            "${BUILD_CACHE_DIR}/${LAST_DC_FILE}" "${DOCKER_COMPOSE_COMMAND}" "$@"
            ;;
        run_in_bash)
            if [[ ${DEPS} == "true" ]]; then
                 "${BUILD_CACHE_DIR}/${LAST_DC_RUN_FILE}" "${RUN_COMMAND}" "$@"
            else
                 "${BUILD_CACHE_DIR}/${LAST_DC_RUN_NO_DEPS_FILE}" "${RUN_COMMAND}" "$@"
            fi
            ;;
        perform_static_checks)
            make_sure_precommit_is_installed
            run_static_checks "$@"
            ;;
        build_ci_images_only)
            if [[ ${PUSH_IMAGES} == "true" ]]; then
                push_ci_image
                push_checklicence_image
            fi
            ;;
        build_prod_image_only)
            if [[ ${PUSH_IMAGES} == "true" ]]; then
                push_prod_image
            fi
            ;;
        cleanup_images)
            ;;
        perform_initialize_local_virtualenv)
            initialize_virtualenv
            ;;
        perform_setup_autocomplete)
            setup_autocomplete
            ;;
        build_docs)
            run_docs
            ;;
        *)
          echo >&2
          echo >&2 "ERROR: Unknown command to run ${COMMAND_TO_RUN}"
          echo >&2
          ;;
    esac
}

initialize_breeze_environment

# shellcheck source=scripts/ci/utils/_include_all.sh
. "${MY_DIR}/scripts/ci/utils/_include_all.sh"

setup_default_breeze_variables

parse_arguments "$@"

read_saved_environment_variables

script_start

initialize_environment

prepare_build

set_image_variables

prepare_run

prepare_command_files

print_header_line

validate_parameters

save_breeze_environment_variables

touch_local_files

run_build_command

print_header_line

print_badge

print_setup_instructions

set +u  # Account for an empty array
run_breeze_command "${REMAINING_ARGS[@]}"

script_end
