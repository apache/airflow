# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---

# Details: https://github.com/kaxil/boring-cyborg

labelPRBasedOnFilePath:
  provider:Google:
    - airflow/providers/google/**/*
    - docs/apache-airflow-providers-google/**/*
    - tests/providers/google/**/*
    - tests/system/providers/google/**/*

  provider:AWS:
    - airflow/providers/amazon/aws/**/*
    - tests/providers/amazon/aws/**/*
    - docs/apache-airflow-providers-amazon/**/*
    - tests/system/providers/amazon/aws/**/*

  provider:Azure:
    - airflow/providers/microsoft/azure/**/*
    - tests/providers/microsoft/azure/**/*
    - docs/apache-airflow-providers-microsoft-azure/**/*
    - tests/system/providers/microsoft/azure/**/*

  provider:Apache:
    - airflow/providers/apache/**/*
    - docs/apache-airflow-providers-apache-*/**/*
    - tests/providers/apache/**/*
    - tests/system/providers/apache/**/*

  provider:Common-sql:
    - airflow/providers/common/sql/**/*
    - docs/apache-airflow-providers-common-sql/**/*
    - tests/providers/common/sql/**/*
    - tests/system/providers/common/sql/**/*

  provider:Databricks:
    - airflow/providers/databricks/**/*
    - docs/apache-airflow-providers-databricks/**/*
    - tests/providers/databricks/**/*
    - tests/system/providers/databricks/**/*

  provider:Snowflake:
    - airflow/providers/snowflake/**/*
    - docs/apache-airflow-providers-snowflake/**/*
    - tests/providers/snowflake/**/*
    - tests/system/providers/snowflake/**/*

  provider:DBs:
    - airflow/providers/mysql/**/*
    - docs/apache-airflow-providers-mysql/**/*
    - tests/providers/mysql/**/*
    - tests/system/providers/mysql/**/*
    - airflow/providers/postgres/**/*
    - docs/apache-airflow-providers-postgres/**/*
    - tests/providers/postgres/**/*
    - tests/system/providers/postgres/**/*
    - airflow/providers/sqlite/**/*
    - docs/apache-airflow-providers-sqlite/**/*
    - tests/providers/sqlite/**/*
    - tests/system/providers/sqlite/**/*
    - airflow/providers/oracle/**/*
    - docs/apache-airflow-providers-oracle/**/*
    - tests/providers/oracle/**/*
    - airflow/providers/influxdb/**/*
    - docs/apache-airflow-providers-influxdb/**/*
    - tests/providers/influxdb/**/*
    - tests/system/providers/influxdb/**/*
    - airflow/providers/microsoft/mssql/**/*
    - docs/apache-airflow-providers-microsoft-mssql/**/*
    - tests/providers/microsoft/mssql/**/*
    - tests/system/providers/microsoft/mssql/**/*

  provider:Protocols:
    - airflow/providers/http/**/*
    - docs/apache-airflow-providers-http/**/*
    - tests/providers/http/**/*
    - tests/system/providers/http/**/*
    - airflow/providers/ftp/**/*
    - docs/apache-airflow-providers-ftp/**/*
    - tests/providers/ftp/**/*
    - tests/system/providers/ftp/**/*
    - airflow/providers/ssh/**/*
    - docs/apache-airflow-providers-ssh/**/*
    - tests/providers/ssh/**/*
    - airflow/providers/jdbc/**/*
    - docs/apache-airflow-providers-jdbc/**/*
    - tests/providers/jdbc/**/*
    - tests/system/providers/jdbc/**/*

  provider:Celery:
    - airflow/providers/celery/**/*
    - docs/apache-airflow-providers-celery/**/*
    - tests/providers/celery/**/*

  provider:Redis:
    - airflow/providers/redis/**/*
    - docs/apache-airflow-providers-redis/**/*
    - tests/providers/redis/**/*

  provider:Docker:
    - airflow/providers/docker/**/*
    - docs/apache-airflow-providers-docker/**/*
    - tests/providers/docker/**/*
    - tests/system/providers/docker/**/*

  provider:message-apps:
    - airflow/providers/slack/**/*
    - docs/apache-airflow-providers-slack/**/*
    - tests/providers/slack/**/*
    - tests/system/providers/slack/**/*
    - airflow/providers/opsgenie/**/*
    - docs/apache-airflow-providers-opsgenie/**/*
    - tests/providers/opsgenie/**/*
    - tests/system/providers/opsgenie/**/*
    - airflow/providers/telegram/**/*
    - docs/apache-airflow-providers-telegram/**/*
    - tests/providers/telegram/**/*
    - tests/system/providers/telegram/**/*

  provider:trino/presto:
    - airflow/providers/trino/**/*
    - docs/apache-airflow-providers-trino/**/*
    - tests/providers/trino/**/*
    - tests/system/providers/trino/**/*
    - airflow/providers/presto/**/*
    - docs/apache-airflow-providers-presto/**/*
    - tests/providers/presto/**/*
    - tests/system/providers/presto/**/*

  provider:OpenLineage:
    - airflow/providers/openlineage/**/*
    - docs/apache-airflow-providers-openlineage/**/*
    - tests/providers/openlineage/**/*

  area:providers:
    - airflow/providers/**/*
    - docs/apache-airflow-providers-*/**/*
    - tests/providers/**/*
    - tests/system/providers/**/*

  area:kubernetes:
    - airflow/**/kubernetes_*.py
    - airflow/example_dags/example_kubernetes_executor.py
    - airflow/providers/cncf/kubernetes/**/*
    - airflow/kubernetes/**/*
    - airflow/kubernetes_executor_templates/**/*
    - airflow/executors/kubernetes_executor.py
    - airflow/executors/celery_kubernetes_executor.py
    - docs/apache-airflow/core-concepts/executor/kubernetes.rst
    - docs/apache-airflow/core-concepts/executor/celery_kubernetes.rst
    - docs/apache-airflow-providers-cncf-kubernetes/**/*
    - kubernetes_tests/**/*
    - tests/providers/cncf/kubernetes/**/*
    - tests/system/providers/cncf/kubernetes/**/*
    - tests/kubernetes/**/*
    - tests/executors/kubernetes_executor_template_files/**/*
    - tests/executors/*kubernetes*.py

  area:API:
    - airflow/api/**/*
    - airflow/api_connexion/**/*
    - airflow/www/api/**/*
    - clients/**/*
    - docs/apache-airflow/deprecated-rest-api-ref.rst
    - docs/apache-airflow/stable-rest-api-ref.rst
    - tests/api_connexion/**/*
    - tests/www/api/**/*

  area:dev-tools:
    - scripts/**/*
    - dev/**/*
    - .github/**/*
    - Dockerfile.ci
    - BREEZE.rst
    - CONTRIBUTING.*
    - LOCAL_VIRTUALENV.rst
    - STATIC_CODE_CHECKS.rst
    - TESTING.rst
    - yamllint-config.yml
    - .asf.yaml
    - .bash_completion
    - .dockerignore
    - .hadolint.yaml
    - .pre-commit-config.yaml
    - .rat-excludes
    - .readthedocs.yml
    - airflow/www/.eslintignore
    - airflow/www/.eslintrc
    - airflow/www/.stylelintignore
    - airflow/www/.stylelintrc

  kind:documentation:
    - docs/**/*

  area:helm-chart:
    - chart/**/*
    - docs/helm-chart/**

  area:Webserver:
    - airflow/cli/commands/webserver_command.py
    - airflow/www/**/*
    - tests/cli/commands/test_webserver_command.py
    - tests/www/**/*

  area:UI:
    - airflow/www/static/**/*
    - airflow/www/templates/**/*
    - airflow/www/.eslintignore
    - airflow/www/.eslintrc
    - airflow/www/.stylelintignore
    - airflow/www/.stylelintrc
    - airflow/www/package.json
    - airflow/www/webpack.config.js
    - airflow/www/yarn.lock
    - docs/apache-airflow/ui.rst

  area:CLI:
    - airflow/cli/**/*.py
    - tests/cli/**/*.py
    - docs/apache-airflow/cli-and-env-variables-ref.rst
    - docs/apache-airflow/howto/usage-cli.rst

  area:Lineage:
    - airflow/lineage/**/*
    - tests/lineage/**/*
    - docs/apache-airflow/administration-and-deployment/lineage.rst

  area:Logging:
    - airflow/providers/**/log/*
    - airflow/utils/log/**/*
    - docs/apache-airflow/administration-and-deployment/logging-monitoring/logging-*.rst
    - tests/providers/**/log/*
    - tests/utils/log/**/*

  area:Plugins:
    - airflow/cli/commands/plugins_command.py
    - airflow/plugins_manager.py
    - tests/cli/commands/test_plugins_command.py
    - tests/plugins/**/*
    - docs/apache-airflow/authoring-and-scheduling/plugins.rst

  area:Scheduler/Executor:
    - airflow/executors/**/*
    - airflow/jobs/**/*
    - airflow/task/task_runner/**/*
    - airflow/dag_processing/**/*
    - docs/apache-airflow/core-concepts/executor/**/*
    - docs/apache-airflow/administration-and-deployment/scheduler.rst
    - tests/executors/**/*
    - tests/jobs/**/*

  area:Secrets:
    - airflow/secrets/**/*
    - airflow/providers/**/secrets/*
    - tests/secrets/**/*
    - tests/providers/**/secrets/*
    - docs/apache-airflow/administration-and-deployment/security/secrets/**/*

  area:Serialization:
    - airflow/serialization/**/*
    - airflow/models/serialized_dag.py
    - tests/serialization/**/*
    - tests/models/test_serialized_dag.py
    - docs/apache-airflow/administration-and-deployment/dag-serialization.rst

  area:core-operators:
    - airflow/operators/**/*
    - airflow/hooks/**/*
    - airflow/sensors/**/*
    - tests/operators/**/*
    - tests/hooks/**/*
    - tests/sensors/**/*
    - docs/apache-airflow/operators-and-hooks-ref.rst
    - docs/apache-airflow/howto/operator/*

  area:production-image:
    - Dockerfile
    - docs/docker-stack/**/*
    - docker_tests/**/*

  area:system-tests:
    - tests/system/**/*

# Various Flags to control behaviour of the "Labeler"
labelerFlags:
  # If this flag is changed to 'false', labels would only be added when the PR is first created
  # and not when existing PR is updated.
  # The default is 'true' which means the labels would be added when PR is updated even if they
  # were removed by the user
  labelOnPRUpdates: false

# Comment to be posted to welcome users when they open their first PR
firstPRWelcomeComment: >
  Congratulations on your first Pull Request and welcome to the Apache Airflow community!
  If you have any issues or are unsure about any anything please check our
  Contribution Guide (https://github.com/apache/airflow/blob/main/CONTRIBUTING.rst)

  Here are some useful points:

  - Pay attention to the quality of your code (ruff, mypy and type annotations). Our [pre-commits](
  https://github.com/apache/airflow/blob/main/STATIC_CODE_CHECKS.rst#prerequisites-for-pre-commit-hooks)
  will help you with that.

  - In case of a new feature add useful documentation (in docstrings or in `docs/` directory).
  Adding a new operator? Check this short
  [guide](https://github.com/apache/airflow/blob/main/docs/apache-airflow/howto/custom-operator.rst)
  Consider adding an example DAG that shows how users should use it.

  - Consider using [Breeze environment](https://github.com/apache/airflow/blob/main/BREEZE.rst) for testing
  locally, it's a heavy docker but it ships with a working Airflow and a lot of integrations.

  - Be patient and persistent. It might take some time to get a review or get the final approval from
  Committers.

  - Please follow [ASF Code of Conduct](https://www.apache.org/foundation/policies/conduct) for all
  communication including (but not limited to) comments on Pull Requests, Mailing list and Slack.

  - Be sure to read the [Airflow Coding style](
  https://github.com/apache/airflow/blob/main/CONTRIBUTING.rst#coding-style-and-best-practices).

  Apache Airflow is a community-driven project and together we are making it better 🚀.

  In case of doubts contact the developers at:

  Mailing List: dev@airflow.apache.org

  Slack: https://s.apache.org/airflow-slack

# Comment to be posted to congratulate user on their first merged PR
firstPRMergeComment: >
  Awesome work, congrats on your first merged pull request! You are invited to check our
  [Issue Tracker](https://github.com/apache/airflow/issues) for additional contributions.

# Comment to be posted to on first time issues
firstIssueWelcomeComment: >
  Thanks for opening your first issue here! Be sure to follow the issue template!
  If you are willing to raise PR to address this issue please do so, no need to wait for approval.

checkUpToDate:
  targetBranch: main
  files: []
