# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: CI Build
on:
  schedule:
    - cron: '28 0 * * *'
  push:
    branches: ['master', 'v1-10-test', 'v1-10-stable']
  pull_request:
    branches: ['master', 'v1-10-test', 'v1-10-stable']

env:

  MOUNT_LOCAL_SOURCES: "false"
  MOUNT_FILES: "true"
  FORCE_ANSWER_TO_QUESTIONS: "yes"
  FORCE_PULL_IMAGES: "true"
  CHECK_IMAGE_FOR_REBUILD: "true"
  SKIP_CHECK_REMOTE_IMAGE: "true"
  DB_RESET: "true"
  VERBOSE: "true"
  UPGRADE_TO_LATEST_CONSTRAINTS: ${{ github.event_name == 'push' || github.event_name == 'scheduled' }}
  DOCKER_CACHE: "pulled"
  USE_GITHUB_REGISTRY: "true"
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_USERNAME: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REGISTRY_PULL_IMAGE_TAG: "${{ github.run_id }}"
  GITHUB_REGISTRY_PUSH_IMAGE_TAG: "latest"
  TEST_TYPES: '["Core", "Integration", "Heisentests"]'

  # You can switch between building the image in "Build Images" workflow or building them in CI workflow
  # Separately for each job.
  #
  # a) Using images build in the separate "Build Image" workflow:
  #
  #  GITHUB_REGISTRY_WAIT_FOR_IMAGE: "true"
  #
  # b) Building images in CI workflow - separately for each job:
  #
  #  GITHUB_REGISTRY_WAIT_FOR_IMAGE: "false"
  #
  # You can also switch back to building images locally and disabling the "Build Images" workflow
  # by defining AIRFLOW_GITHUB_REGISTRY_WAIT_FOR_IMAGE secret with value set to "false"

  GITHUB_REGISTRY_WAIT_FOR_IMAGE: ${{ secrets.AIRFLOW_GITHUB_REGISTRY_WAIT_FOR_IMAGE != 'false' }}

jobs:

  build-info:
    name: "Build info"
    runs-on: ubuntu-latest
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    outputs:
      waitForImage: ${{ steps.wait-for-image.outputs.wait-for-image }}
      pythonVersions: ${{ steps.versions.outputs.python-versions }}
      defaultPythonVersion: ${{ steps.versions.outputs.default-python-version }}
      kubernetesVersions: ${{ steps.versions.outputs.kubernetes-versions }}
      defaultKubernetesVersion: ${{ steps.versions.outputs.default-kubernetes-version }}
      kubernetesModes: ${{ steps.versions.outputs.kubernetes-modes }}
      defaultKubernetesMode: ${{ steps.versions.outputs.default-kubernetes-mode }}
      postgresVersions: ${{ steps.versions.outputs.postgres-versions }}
      defaultPostgresVersion: ${{ steps.versions.outputs.default-postgres-version }}
      mysqlVersions: ${{ steps.versions.outputs.mysql-versions }}
      defaultMysqlVersion: ${{ steps.versions.outputs.default-mysql-version }}
      helmVersions: ${{ steps.versions.outputs.helm-versions }}
      defaultHelmVersion: ${{ steps.versions.outputs.default-helm-version }}
      kindVersions: ${{ steps.versions.outputs.kind-versions }}
      defaultKindVersion: ${{ steps.versions.outputs.default-kind-version }}
      testTypes: ${{ steps.versions.outputs.test-types }}
      postgresExclude: ${{ steps.versions.outputs.postgres-exclude }}
      mysqlExclude: ${{ steps.versions.outputs.mysql-exclude }}
      sqliteExclude: ${{ steps.versions.outputs.sqlite-exclude }}
      kubernetesExclude: ${{ steps.versions.outputs.kubernetes-exclude }}
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: >
          Event: ${{ github.event_name }}
          Repo: ${{ github.repository }}
          Branch: ${{ github.head_ref }}
          Run id: ${{ github.run_id }}
          Sha: ${{ github.sha }}
          Ref: ${{ github.ref }}
        run: printenv
      - name: Set wait for image
        id: wait-for-image
        run: |
          if [[ ${GITHUB_REGISTRY_WAIT_FOR_IMAGE} == "true" ]]; then
              echo "::set-output name=wait-for-image::true"
          else
              echo "::set-output name=wait-for-image::false"
          fi
      - name: Set versions
        id: versions
        run: |
          . ./scripts/ci/libraries/_script_init.sh

          initialization::ga_output python-versions \
              "$(initialization::parameters_to_json "${CURRENT_PYTHON_MAJOR_MINOR_VERSIONS[@]}")"
          initialization::ga_output default-python-version "${DEFAULT_PYTHON_MAJOR_MINOR_VERSION}"

          initialization::ga_output kubernetes-versions \
              "$(initialization::parameters_to_json "${CURRENT_KUBERNETES_VERSIONS[@]}")"
          initialization::ga_output default-kubernetes-version "${KUBERNETES_VERSION}"

          initialization::ga_output kubernetes-modes \
              "$(initialization::parameters_to_json "${CURRENT_KUBERNETES_MODES[@]}")"
          initialization::ga_output default-kubernetes-mode "${KUBERNETES_MODE}"

          initialization::ga_output postgres-versions \
              "$(initialization::parameters_to_json "${CURRENT_POSTGRES_VERSIONS[@]}")"
          initialization::ga_output default-postgres-version "${POSTGRES_VERSION}"

          initialization::ga_output mysql-versions \
              "$(initialization::parameters_to_json "${CURRENT_MYSQL_VERSIONS[@]}")"
          initialization::ga_output default-mysql-version "${MYSQL_VERSION}"

          initialization::ga_output kind-versions \
              "$(initialization::parameters_to_json "${CURRENT_KIND_VERSIONS[@]}")"
          initialization::ga_output default-kind-version "${KIND_VERSION}"

          initialization::ga_output helm-versions \
              "$(initialization::parameters_to_json "${CURRENT_HELM_VERSIONS[@]}")"
          initialization::ga_output default-helm-version "${HELM_VERSION}"

          initialization::ga_output test-types "${TEST_TYPES}"

          initialization::ga_output postgres-exclude '[{ "python-version": "3.6" }]'

          initialization::ga_output mysql-exclude '[{ "python-version": "3.7" }]'

          initialization::ga_output sqlite-exclude '[{ "python-version": "3.8" }]'

          initialization::ga_output kubernetes-exclude '[]'

  trigger-tests:
    timeout-minutes: 5
    name: "Trigger tests"
    runs-on: ubuntu-latest
    outputs:
      run-tests: ${{ steps.trigger-tests.outputs.run-tests }}
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Check if tests should be run"
        run: ./scripts/ci/tools/ci_check_if_tests_should_be_run.sh
        id: trigger-tests

  helm-tests:
    timeout-minutes: 5
    name: "Checks: Helm tests"
    runs-on: ubuntu-latest
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Helm Tests"
        run: ./scripts/ci/kubernetes/ci_run_helm_testing.sh

  test-openapi-client-generation:
    name: "Test OpenAPI client generation"
    runs-on: ubuntu-latest
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Generate client codegen diff"
        run: ./scripts/ci/openapi/client_codegen_diff.sh

  ci-images:
    timeout-minutes: 50
    name: "Wait for CI images"
    runs-on: ubuntu-latest
    needs: [build-info]
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    env:
      BACKEND: sqlite
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
        if: needs.build-info.outputs.waitForImage == 'true'
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{needs.build-info.outputs.defaultPythonVersion}}
        if: needs.build-info.outputs.waitForImage == 'true'
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
        if: needs.build-info.outputs.waitForImage == 'true'
      - name: >
          Wait for CI images
          ${{ needs.build-info.outputs.pythonVersions }}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        # We wait for the images to be available either from the build-ci-image step or from
        # "build-images-workflow-run.yml' run as pull_request_target (it has the write
        # permissions in case pull_request from fork is run.
        # We are utilising single job to wait for all images because this job merely waits
        # For the images to be available. The test jobs wait for it to complete!
        run: ./scripts/ci/images/ci_wait_for_all_ci_images.sh
        if: needs.build-info.outputs.waitForImage == 'true'

  static-checks:
    timeout-minutes: 30
    name: "Static checks"
    runs-on: ubuntu-latest
    needs: [build-info, ci-images]
    env:
      SKIP: "pylint"
      MOUNT_LOCAL_SOURCES: "true"
      PYTHON_MAJOR_MINOR_VERSION: ${{needs.build-info.outputs.defaultPythonVersion}}
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
      # We want to make sure we have latest sources as only in_container scripts are added
    # to the image but we want to static-check all of them
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{needs.build-info.outputs.defaultPythonVersion}}
      - name: Cache pre-commit env
        uses: actions/cache@v2
        env:
          cache-name: cache-pre-commit-master-no-pylint-v1
        with:
          path: ~/.cache/pre-commit
          key: ${{ env.cache-name }}-${{ github.job }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Static checks: except pylint"
        run: ./scripts/ci/static_checks/run_static_checks.sh
        env:
          VERBOSE: false

  static-checks-pylint:
    timeout-minutes: 30
    name: "Pylint"
    runs-on: ubuntu-latest
    needs: [build-info, ci-images]
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    env:
      # We want to make sure we have latest sources as only in_container scripts are added
      # to the image but we want to static-check all of them
      MOUNT_LOCAL_SOURCES: "true"
      PYTHON_MAJOR_MINOR_VERSION: ${{needs.build-info.outputs.defaultPythonVersion}}
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{needs.build-info.outputs.defaultPythonVersion}}
      - name: "Cache pre-commit env"
        uses: actions/cache@v2
        env:
          cache-name: cache-pre-commit-master-pylint-v1
        with:
          path: ~/.cache/pre-commit
          key: ${{ env.cache-name }}-${{ github.job }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Static checks: pylint"
        run: ./scripts/ci/static_checks/run_static_checks.sh pylint
        env:
          VERBOSE: false

  docs:
    timeout-minutes: 30
    name: "Build docs"
    runs-on: ubuntu-latest
    needs: [ci-images]
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Build docs"
        run: ./scripts/ci/docs/ci_docs.sh --docs-only
      - name: "Upload documentation"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: airflow-documentation
          path: "./files/documentation"

  docs-spell-check:
    timeout-minutes: 30
    name: "Spell check docs"
    runs-on: ubuntu-latest
    needs: [build-info, ci-images]
    env:
      PYTHON_MAJOR_MINOR_VERSION: ${{needs.build-info.outputs.defaultPythonVersion}}
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Spell check docs"
        run: ./scripts/ci/docs/ci_docs.sh --spellcheck-only

  prepare-backport-packages:
    timeout-minutes: 30
    name: "Backport packages"
    runs-on: ubuntu-latest
    needs: [build-info, ci-images]
    env:
      INSTALL_AIRFLOW_VERSION: "1.10.12"
      PYTHON_MAJOR_MINOR_VERSION: ${{needs.build-info.outputs.defaultPythonVersion}}
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Prepare & test backport packages"
        run: ./scripts/ci/backport_packages/ci_prepare_and_test_backport_packages.sh
      - name: "Upload backport package artifacts"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: airflow-backport-packages
          path: "./files/airflow-packages-*"
      - name: "Upload readme artifacts"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: airflow-backport-readmes
          path: "./files/airflow-backport-readme*"

  tests-postgres:
    timeout-minutes: 60
    name: "${{matrix.test-type}}:Pg${{matrix.postgres-version}},Py${{matrix.python-version}}"
    runs-on: ubuntu-latest
    needs: [build-info, trigger-tests, ci-images]
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.build-info.outputs.pythonVersions) }}
        postgres-version: ${{ fromJson(needs.build-info.outputs.postgresVersions) }}
        test-type: ${{ fromJson(needs.build-info.outputs.testTypes) }}
        exclude: ${{ fromJson(needs.build-info.outputs.postgresExclude) }}
      fail-fast: false
    env:
      BACKEND: postgres
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      POSTGRES_VERSION: ${{ matrix.postgres-version }}
      RUN_TESTS: true
      TEST_TYPE: ${{ matrix.test-type }}
    if: >
        (needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request') &&
        (github.repository == 'apache/airflow' || github.event_name != 'schedule')
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Tests"
        run: ./scripts/ci/testing/ci_run_airflow_testing.sh
      - name: "Upload airflow logs"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: airflow-logs-${{matrix.test-type}}-${{matrix.python-version}}-${{matrix.postgres-version}}
          path: "./files/airflow_logs*"
      - name: "Upload artifact for coverage"
        uses: actions/upload-artifact@v2
        with:
          name: >
            coverage-postgres-${{matrix.test-type}}-${{matrix.python-version}}-${{matrix.postgres-version}}
          path: "./files/coverage.xml"

  tests-mysql:
    timeout-minutes: 60
    name: "${{matrix.test-type}}:MySQL${{matrix.mysql-version}}, Py${{matrix.python-version}}"
    runs-on: ubuntu-latest
    needs: [build-info, trigger-tests, ci-images]
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.build-info.outputs.pythonVersions) }}
        mysql-version: ${{ fromJson(needs.build-info.outputs.mysqlVersions) }}
        test-type: ${{ fromJson(needs.build-info.outputs.testTypes) }}
        exclude: ${{ fromJson(needs.build-info.outputs.mysqlExclude) }}
      fail-fast: false
    env:
      BACKEND: mysql
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      MYSQL_VERSION: ${{ matrix.mysql-version }}
      RUN_TESTS: true
      TEST_TYPE: ${{ matrix.test-type }}
    if: >
        (needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request') &&
        (github.repository == 'apache/airflow' || github.event_name != 'schedule')
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Tests"
        run: ./scripts/ci/testing/ci_run_airflow_testing.sh
      - name: "Upload airflow logs"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: airflow-logs-${{matrix.test-type}}-${{matrix.python-version}}-${{matrix.mysql-version}}
          path: "./files/airflow_logs*"
      - name: "Upload artifact for coverage"
        uses: actions/upload-artifact@v2
        with:
          name: coverage-mysql-${{matrix.test-type}}-${{matrix.python-version}}-${{matrix.mysql-version}}
          path: "./files/coverage.xml"

  tests-sqlite:
    timeout-minutes: 60
    name: "${{matrix.test-type}}:Sqlite Py${{matrix.python-version}}"
    runs-on: ubuntu-latest
    needs: [build-info, trigger-tests, ci-images]
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.build-info.outputs.pythonVersions) }}
        test-type: ${{ fromJson(needs.build-info.outputs.testTypes) }}
        exclude: ${{ fromJson(needs.build-info.outputs.sqliteExclude) }}
      fail-fast: false
    env:
      BACKEND: sqlite
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      RUN_TESTS: true
      TEST_TYPE: ${{ matrix.test-type }}
    if: (needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request') &&
        (github.repository == 'apache/airflow' || github.event_name != 'schedule')
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Tests"
        run: ./scripts/ci/testing/ci_run_airflow_testing.sh
      - name: "Upload airflow logs"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: airflow-logs-${{matrix.test-type}}-${{matrix.python-version}}
          path: './files/airflow_logs*'
      - name: "Upload artifact for coverage"
        uses: actions/upload-artifact@v2
        with:
          name: coverage-sqlite-${{matrix.test-type}}-${{matrix.python-version}}
          path: ./files/coverage.xml

  tests-quarantined:
    timeout-minutes: 60
    name: "Quarantined tests"
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [build-info, trigger-tests, ci-images]
    env:
      PYTHON_MAJOR_MINOR_VERSION: ${{needs.build-info.outputs.defaultPythonVersion}}
      BACKEND: postgres
      POSTGRES_VERSION: ${{needs.build-info.outputs.defaultPostgresVersion}}
      RUN_TESTS: true
      TEST_TYPE: Quarantined
      NUM_RUNS: 10
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: >
      (needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request') &&
      (github.repository == 'apache/airflow' || github.event_name != 'schedule')
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Set issue id for master"
        if: github.ref == 'refs/heads/master'
        run: |
          echo "::set-env name=ISSUE_ID::10118"
      - name: "Set issue id for v1-10-stable"
        if: github.ref == 'refs/heads/v1-10-stable'
        run: |
          echo "::set-env name=ISSUE_ID::10127"
      - name: "Set issue id for v1-10-test"
        if: github.ref == 'refs/heads/v1-10-test'
        run: |
          echo "::set-env name=ISSUE_ID::10128"
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Tests"
        run: ./scripts/ci/testing/ci_run_airflow_testing.sh
      - name: "Upload Quarantine test results"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: quarantined_tests
          path: "files/test_result.xml"
      - name: "Upload airflow logs"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: airflow-logs-quarantined-${{matrix.python-version}}-${{ matrix.postgres-version }}
          path: "./files/airflow_logs*"
      - name: "Upload artifact for coverage"
        uses: actions/upload-artifact@v2
        with:
          name: coverage-quarantined-${{matrix.test-type}}-${{matrix.python-version}}
          path: "./files/coverage.xml"

  upload-coverage:
    timeout-minutes: 5
    name: "Upload coverage"
    runs-on: ubuntu-latest
    continue-on-error: true
    needs:
      - tests-kubernetes
      - tests-postgres
      - tests-sqlite
      - tests-mysql
      - tests-quarantined
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    steps:
      - name: "Download all artifacts from the current build"
        uses: actions/download-artifact@v2
        with:
          path: ./coverage-files
      - name: "Removes unnecessary artifacts"
        run: ls ./coverage-files | grep -v coverage | xargs rm -rf
      - name: "Upload all coverage reports to codecov"
        uses: codecov/codecov-action@v1
        with:
          directory: "./coverage-files"

  prod-images:
    timeout-minutes: 50
    name: "Wait for PROD images"
    runs-on: ubuntu-latest
    needs: [build-info]
    env:
      BACKEND: sqlite
      PYTHON_MAJOR_MINOR_VERSION: ${{needs.build-info.outputs.defaultPythonVersion}}
    if: github.repository == 'apache/airflow' || github.event_name != 'schedule'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
        if: needs.build-info.outputs.waitForImage == 'true'
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
        if: needs.build-info.outputs.waitForImage == 'true'
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
        if: needs.build-info.outputs.waitForImage == 'true'
      - name: >
          Wait for PROD images
          ${{ needs.build-info.outputs.pythonVersions }}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_wait_for_all_prod_images.sh
        if: needs.build-info.outputs.waitForImage == 'true'

  tests-kubernetes:
    timeout-minutes: 50
    name: "K8s: ${{matrix.python-version}} ${{matrix.kubernetes-version}} ${{matrix.kubernetes-mode}}"
    runs-on: ubuntu-latest
    needs: [build-info, trigger-tests, prod-images]
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.build-info.outputs.pythonVersions) }}
        kubernetes-version: ${{ fromJson(needs.build-info.outputs.kubernetesVersions) }}
        kubernetes-mode: ${{ fromJson(needs.build-info.outputs.kubernetesModes) }}
        exclude: ${{ fromJson(needs.build-info.outputs.kubernetesExclude) }}
      fail-fast: false
    env:
      BACKEND: postgres
      TEST_TYPE: ${{ matrix.test-type }}
      RUN_TESTS: "true"
      RUNTIME: "kubernetes"
      ENABLE_KIND_CLUSTER: "true"
      PYTHON_MAJOR_MINOR_VERSION: "${{ matrix.python-version }}"
      KUBERNETES_MODE: "${{ matrix.kubernetes-mode }}"
      KUBERNETES_VERSION: "${{ matrix.kubernetes-version }}"
      KIND_VERSION: "${{ needs.build-info.outputs.defaultKindVersion }}"
      HELM_VERSION: "${{ needs.build-info.outputs.defaultHelmVersion }}"
    if: >
      (needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request') &&
      (github.repository == 'apache/airflow' || github.event_name != 'schedule')
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Setup Kind Cluster ${{ env.KIND_VERSION }}"
        uses: engineerd/setup-kind@v0.4.0
        with:
          version: "${{ env.KIND_VERSION }}"
          name: airflow-python-${{matrix.python-version}}-${{matrix.kubernetes-version}}
          config: "scripts/ci/kubernetes/kind-cluster-conf.yaml"
      - name: "Prepare PROD Image"
        run: ./scripts/ci/images/ci_prepare_prod_image_on_ci.sh
      - name: "Deploy airflow to cluster"
        run: ./scripts/ci/kubernetes/ci_deploy_app_to_kubernetes.sh
        env:
          # We have the right image pulled already by the previous step
          SKIP_BUILDING_PROD_IMAGE: "true"
      - name: "Cache virtualenv for kubernetes testing"
        uses: actions/cache@v2
        env:
          cache-name: cache-kubernetes-tests-virtualenv-v3
        with:
          path: .build/.kubernetes_venv
          key: "${{ env.cache-name }}-${{ github.job }}-${{ hashFiles('setup.py') }}-v1"
      - name: "Kubernetes Tests"
        run: ./scripts/ci/kubernetes/ci_run_kubernetes_tests.sh
      - name: "Upload KinD logs"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: >
            kind-logs-${{matrix.kubernetes-mode}}-${{matrix.python-version}}-${{matrix.kubernetes-version}}
          path: /tmp/kind_logs_*
      - name: "Upload artifact for coverage"
        uses: actions/upload-artifact@v2
        with:
          name: >
            coverage-k8s-${{matrix.kubernetes-mode}}-${{matrix.python-version}}-${{matrix.kubernetes-version}}
          path: "./files/coverage.xml"

  push-prod-images-to-github-registry:
    timeout-minutes: 10
    name: "Push PROD images"
    runs-on: ubuntu-latest
    needs:
      - build-info
      - static-checks
      - static-checks-pylint
      - tests-sqlite
      - tests-postgres
      - tests-mysql
      - tests-kubernetes
      - prepare-backport-packages
      - prod-images
      - docs
      - docs-spell-check
    if: >
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/v1-10-test') &&
      github.event_name != 'schedule'
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.build-info.outputs.pythonVersions) }}
    env:
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      GITHUB_REGISTRY_PUSH_IMAGE_TAG: "latest"
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_prod_image_on_ci.sh
      - name: "Push PROD images ${{ matrix.python-version }}:${{ env.GITHUB_REGISTRY_PUSH_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_push_production_images.sh

  push-ci-images-to-github-registry:
    timeout-minutes: 10
    name: "Push CI images"
    runs-on: ubuntu-latest
    needs:
      - build-info
      - static-checks
      - static-checks-pylint
      - tests-sqlite
      - tests-postgres
      - tests-mysql
      - tests-kubernetes
      - prepare-backport-packages
      - ci-images
      - docs
      - docs-spell-check
    if: >
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/v1-10-test' ) &&
      github.event_name != 'schedule'
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.build-info.outputs.pythonVersions) }}
    env:
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      GITHUB_REGISTRY_PUSH_IMAGE_TAG: "latest"
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Push CI image ${{ matrix.python-version }}:${{ env.GITHUB_REGISTRY_PUSH_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_push_ci_images.sh

  constraints:
    timeout-minutes: 10
    name: "Constraints"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.build-info.outputs.pythonVersions) }}
      fail-fast: false
    needs:
      - build-info
      - static-checks
      - static-checks-pylint
      - tests-sqlite
      - tests-mysql
      - tests-postgres
      - tests-kubernetes
    env:
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
    if: >
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/v1-10-test' ) &&
      github.event_name != 'pull' &&
      (github.repository == 'apache/airflow' || github.event_name != 'schedule')
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ github.sha }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Generate constraints"
        run: ./scripts/ci/constraints/ci_generate_constraints.sh
      - name: "Upload constraint artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: 'constraints-${{matrix.python-version}}'
          path: './files/constraints-${{matrix.python-version}}/constraints-${{matrix.python-version}}.txt'

  constraints-push:
    timeout-minutes: 10
    name: "Constraints push"
    runs-on: ubuntu-latest
    needs: [build-info, constraints]
    if: >
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/v1-10-test' ) &&
      github.event_name != 'pull' &&
      (github.repository == 'apache/airflow' || github.event_name != 'schedule')
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Set constraints branch name"
        id: constraints-branch
        run: ./scripts/ci/constraints/ci_branch_constraints.sh
      - name: Checkout ${{ steps.constraints-branch.outputs.branch }}
        uses: actions/checkout@v2
        with:
          path: "repo"
          ref: ${{ steps.constraints-branch.outputs.branch }}
      - name: "Get all artifacts (constraints)"
        uses: actions/download-artifact@v2
        with:
          path: 'artifacts'
      - name: "Commit changed constraint files for ${{needs.build-info.outputs.pythonVersions}}"
        run: ./scripts/ci/constraints/ci_commit_constraints.sh
      - name: "Push changes"
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.constraints-branch.outputs.branch }}
          directory: "repo"

  tag-repo-nightly:
    timeout-minutes: 10
    name: "Tag repo nightly"
    runs-on: ubuntu-latest
    needs:
      - docs
      - docs-spell-check
      - helm-tests
      - static-checks
      - static-checks-pylint
      - tests-sqlite
      - tests-postgres
      - tests-mysql
      - tests-kubernetes
      - constraints-push
      - prepare-backport-packages
    if: github.event_name == 'schedule' &&  github.repository == 'apache/airflow'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Tag commit"
        run: |
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          echo "Tagging ${BRANCH_NAME}"
          git tag -f nightly-${BRANCH_NAME} HEAD
      - name: "Push tags"
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true
          force: true
          branch: master
