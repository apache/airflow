# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: Tests
on:  # yamllint disable-line rule:truthy
  schedule:
    - cron: '28 0 * * *'
  push:
    branches: ['main', 'v[0-9]+-[0-9]+-test']
  pull_request:
    branches: ['main', 'v[0-9]+-[0-9]+-test', 'v[0-9]+-[0-9]+-stable']
permissions:
  # All other permissions are set to none
  contents: read
env:
  MOUNT_SELECTED_LOCAL_SOURCES: "false"
  FORCE_ANSWER_TO_QUESTIONS: "yes"
  FORCE_PULL_IMAGES: "false"
  CHECK_IMAGE_FOR_REBUILD: "true"
  SKIP_CHECK_REMOTE_IMAGE: "true"
  DB_RESET: "true"
  VERBOSE: "true"
  DOCKER_CACHE: "pulled"
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_USERNAME: ${{ github.actor }}
  # You can override CONSTRAINTS_GITHUB_REPOSITORY by setting secret in your repo but by default the
  # Airflow one is going to be used
  CONSTRAINTS_GITHUB_REPOSITORY: >-
    ${{ secrets.CONSTRAINTS_GITHUB_REPOSITORY != '' &&
        secrets.CONSTRAINTS_GITHUB_REPOSITORY || 'apache/airflow' }}
  # In builds from forks, this token is read-only. For scheduler/direct push it is WRITE one
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # In builds from forks, this token is empty, and this is good because such builds do not even try
  # to push images to the registry.
  GITHUB_REGISTRY_PULL_IMAGE_TAG: "${{ github.event.pull_request.head.sha || github.sha }}"
  GITHUB_REGISTRY_PUSH_IMAGE_TAG: "latest"
  INSTALL_PROVIDERS_FROM_SOURCES: "true"
  AIRFLOW_LOGIN_TO_GITHUB_REGISTRY: "true"
  ENABLE_TEST_COVERAGE: "${{ github.event_name == 'push' }}"

  # You can switch between building the image in "Build Images" workflow or building them in CI workflow
  # Separately for each job.
  #
  # a) Using images build in the separate "Build Images" workflow:
  #
  #  GITHUB_REGISTRY_WAIT_FOR_IMAGE: "true"
  #
  # b) Building images in CI workflow - separately for each job:
  #
  #  GITHUB_REGISTRY_WAIT_FOR_IMAGE: "false"
  #
  # You can also switch back to building images locally and disabling the "Build Images" workflow
  # by defining AIRFLOW_GITHUB_REGISTRY_WAIT_FOR_IMAGE secret with value set to "false"
  GITHUB_REGISTRY_WAIT_FOR_IMAGE: ${{ secrets.AIRFLOW_GITHUB_REGISTRY_WAIT_FOR_IMAGE != 'false' }}
  FORCE_TEST_TYPE: "Other"

concurrency:
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  build-info:
    name: "Build info"
    # The runs-on cannot refer to env. or secrets. context, so we have no
    # option but to specify a hard-coded list here. This is "safe", as the list
    # is checked again by the runner using it's own list, so a PR author cannot
    # change this and get access to our self-hosted runners
    #
    # When changing this list, ensure that it is kept in sync with the
    # /runners/apache/airflow/configOverlay
    # parameter in AWS SSM ParameterStore (which is what the runner uses)
    runs-on: >-
      ${{ (
        (
          github.event_name == 'push' ||
          github.event_name == 'schedule' ||
          contains(fromJSON('[
            "BasPH",
            "Fokko",
            "KevinYang21",
            "XD-DENG",
            "aijamalnk",
            "alexvanboxel",
            "aoen",
            "artwr",
            "ashb",
            "bolkedebruin",
            "criccomini",
            "dimberman",
            "feng-tao",
            "houqp",
            "jghoman",
            "jmcarp",
            "kaxil",
            "leahecole",
            "mik-laj",
            "milton0825",
            "mistercrunch",
            "msumit",
            "potiuk",
            "r39132",
            "ryanahamilton",
            "ryw",
            "saguziel",
            "sekikn",
            "turbaszek",
            "zhongjiajie",
            "ephraimbuddy",
            "jhtimmins",
            "dstandish",
            "xinbinhuang",
            "yuqian",
            "eladkal"
          ]'), github.event.pull_request.user.login)
        ) && github.repository == 'apache/airflow'
      ) && 'self-hosted' || 'ubuntu-20.04' }}
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    outputs:
      waitForImage: ${{ steps.wait-for-image.outputs.wait-for-image }}
      upgradeToNewerDependencies: ${{ steps.selective-checks.outputs.upgrade-to-newer-dependencies }}
      pythonVersions: ${{ steps.selective-checks.outputs.python-versions }}
      pythonVersionsListAsString: ${{ steps.selective-checks.outputs.python-versions-list-as-string }}
      defaultPythonVersion: ${{ steps.selective-checks.outputs.default-python-version }}
      kubernetesVersions: ${{ steps.selective-checks.outputs.kubernetes-versions }}
      kubernetesVersionsListAsString: ${{ steps.selective-checks.outputs.kubernetes-versions-list-as-string }}
      defaultKubernetesVersion: ${{ steps.selective-checks.outputs.default-kubernetes-version }}
      kubernetesModes: ${{ steps.selective-checks.outputs.kubernetes-modes }}
      defaultKubernetesMode: ${{ steps.selective-checks.outputs.default-kubernetes-mode }}
      postgresVersions: ${{ steps.selective-checks.outputs.postgres-versions }}
      defaultPostgresVersion: ${{ steps.selective-checks.outputs.default-postgres-version }}
      mysqlVersions: ${{ steps.selective-checks.outputs.mysql-versions }}
      mssqlVersions: ${{ steps.selective-checks.outputs.mssql-versions }}
      defaultMySQLVersion: ${{ steps.selective-checks.outputs.default-mysql-version }}
      helmVersions: ${{ steps.selective-checks.outputs.helm-versions }}
      defaultHelmVersion: ${{ steps.selective-checks.outputs.default-helm-version }}
      kindVersions: ${{ steps.selective-checks.outputs.kind-versions }}
      defaultKindVersion: ${{ steps.selective-checks.outputs.default-kind-version }}
      testTypes: ${{ steps.selective-checks.outputs.test-types }}
      postgresExclude: ${{ steps.selective-checks.outputs.postgres-exclude }}
      mysqlExclude: ${{ steps.selective-checks.outputs.mysql-exclude }}
      mssqlExclude: ${{ steps.selective-checks.outputs.mssql-exclude }}
      sqliteExclude: ${{ steps.selective-checks.outputs.sqlite-exclude }}
      run-tests: ${{ steps.selective-checks.outputs.run-tests }}
      run-ui-tests: ${{ steps.selective-checks.outputs.run-ui-tests }}
      run-www-tests: ${{ steps.selective-checks.outputs.run-www-tests }}
      run-kubernetes-tests: ${{ steps.selective-checks.outputs.run-kubernetes-tests }}
      basic-checks-only: ${{ steps.selective-checks.outputs.basic-checks-only }}
      image-build: ${{ steps.selective-checks.outputs.image-build }}
      docs-build: ${{ steps.selective-checks.outputs.docs-build }}
      needs-helm-tests: ${{ steps.selective-checks.outputs.needs-helm-tests }}
      needs-api-tests: ${{ steps.selective-checks.outputs.needs-api-tests }}
      needs-api-codegen: ${{ steps.selective-checks.outputs.needs-api-codegen }}
      default-branch: ${{ steps.selective-checks.outputs.default-branch }}
      pullRequestNumber: ${{ steps.source-run-info.outputs.pullRequestNumber }}
      pullRequestLabels: ${{ steps.source-run-info.outputs.pullRequestLabels }}
      runsOn: ${{ steps.set-runs-on.outputs.runsOn }}
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          submodules: recursive
      - name: "Get information about the PR"
        uses: ./.github/actions/get-workflow-origin
        id: source-run-info
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set wait for image
        id: wait-for-image
        run: |
          if [[ ${GITHUB_REGISTRY_WAIT_FOR_IMAGE} == 'true' ]]; then
              echo "::set-output name=wait-for-image::true"
          else
              echo "::set-output name=wait-for-image::false"
          fi
      - name: Fetch incoming commit ${{ github.sha }} with its parent
        uses: actions/checkout@v2
        with:
          ref: ${{ github.sha }}
          fetch-depth: 2
          persist-credentials: false
        if: github.event_name  == 'pull_request'
      - name: Selective checks
        id: selective-checks
        env:
          PR_LABELS: "${{ steps.source-run-info.outputs.pullRequestLabels }}"
        run: |
          if [[ ${GITHUB_EVENT_NAME} == "pull_request" ]]; then
            # Run selective checks
            ./scripts/ci/selective_ci_checks.sh "${GITHUB_SHA}"
          else
            # Run all checks
            ./scripts/ci/selective_ci_checks.sh
          fi
      # Avoid having to specify the runs-on logic every time. We use the custom
      # env var AIRFLOW_SELF_HOSTED_RUNNER set only on our runners, but never
      # on the public runners
      - name: Set runs-on
        id: set-runs-on
        env:
          PR_LABELS: "${{ steps.source-run-info.outputs.pullRequestLabels }}"
        run: |
          if [[ ${PR_LABELS=} == *"use public runners"* ]]; then
            echo "Forcing running on Public Runners via `use public runners` label"
            echo "::set-output name=runsOn::\"ubuntu-20.04\""
          elif [[ ${AIRFLOW_SELF_HOSTED_RUNNER} == "" ]]; then
            echo "Regular PR running with Public Runner"
            echo "::set-output name=runsOn::\"ubuntu-20.04\""
          else
            echo "Maintainer or main run running with self-hosted runner"
            echo "::set-output name=runsOn::\"self-hosted\""
          fi

  ci-images:
    timeout-minutes: 120
    name: "Wait for CI images"
    runs-on: ${{ fromJson(needs.build-info.outputs.runsOn) }}
    needs: [build-info]
    if: needs.build-info.outputs.image-build == 'true'
    env:
      RUNS_ON: ${{ fromJson(needs.build-info.outputs.runsOn) }}
      BACKEND: sqlite
      UPGRADE_TO_NEWER_DEPENDENCIES: ${{ needs.build-info.outputs.upgradeToNewerDependencies }}
      WAIT_FOR_IMAGE: ${{ needs.build-info.outputs.waitForImage }}
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
        if: needs.build-info.outputs.waitForImage == 'true'
        with:
          persist-credentials: false
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{needs.build-info.outputs.defaultPythonVersion}}
        if: needs.build-info.outputs.waitForImage == 'true'
      - name: "Free space"
        run: ./scripts/ci/tools/free_space.sh
        if: |
          needs.build-info.outputs.waitForImage == 'true'
      - name: >
          Wait for CI images
          ${{ needs.build-info.outputs.pythonVersions }}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}
        id: wait-for-images
        # We wait for the images to be available either from the build-ci-image step or from
        # "build-images-workflow-run.yml' run as pull_request_target.
        # We are utilising single job to wait for all images because this job merely waits
        # for the images to be available.
        # The test jobs wait for it to complete if WAIT_FOR_IMAGE is 'true'!
        run: ./scripts/ci/images/ci_wait_for_and_verify_all_ci_images.sh
        env:
          CURRENT_PYTHON_MAJOR_MINOR_VERSIONS_AS_STRING: >
            ${{needs.build-info.outputs.pythonVersionsListAsString}}
          VERIFY_IMAGE: "true"
          PR_LABELS: "${{ needs.build-info.outputs.pullRequestLabels }}"

  tests-postgres:
    timeout-minutes: 130
    name: >
      Postgres${{matrix.postgres-version}},Py${{matrix.python-version}}:
      ${{needs.build-info.outputs.testTypes}}
    runs-on: ${{ fromJson(needs.build-info.outputs.runsOn) }}
    needs: [build-info, ci-images]
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.build-info.outputs.pythonVersions) }}
        postgres-version: ${{ fromJson(needs.build-info.outputs.postgresVersions) }}
        exclude: ${{ fromJson(needs.build-info.outputs.postgresExclude) }}
      fail-fast: false
    env:
      RUNS_ON: ${{ fromJson(needs.build-info.outputs.runsOn) }}
      BACKEND: postgres
      UPGRADE_TO_NEWER_DEPENDENCIES: ${{ needs.build-info.outputs.upgradeToNewerDependencies }}
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      POSTGRES_VERSION: ${{ matrix.postgres-version }}
      TEST_TYPES: "${{needs.build-info.outputs.testTypes}}"
    if: needs.build-info.outputs.run-tests == 'true'
    steps:
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: "Setup python"
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_MAJOR_MINOR_VERSION }}
      - name: "Free space"
        run: ./scripts/ci/tools/free_space.sh
      - name: "Prepare CI image ${{env.PYTHON_MAJOR_MINOR_VERSION}}:${{ env.GITHUB_REGISTRY_PULL_IMAGE_TAG }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Tests: ${{needs.build-info.outputs.testTypes}}"
        run: ./scripts/ci/testing/ci_run_airflow_testing.sh
        env:
          PR_LABELS: "${{ needs.build-info.outputs.pullRequestLabels }}"
      - name: "Upload airflow logs"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: airflow-logs-${{matrix.python-version}}-${{matrix.postgres-version}}
          path: "./files/airflow_logs*"
          retention-days: 7
      - name: "Upload container logs"
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: container-logs-postgres-${{matrix.python-version}}-${{matrix.postgres-version}}
          path: "./files/container_logs*"
          retention-days: 7
      - name: "Upload artifact for coverage"
        uses: actions/upload-artifact@v2
        with:
          name: >
            coverage-postgres-${{matrix.python-version}}-${{matrix.postgres-version}}
          path: "./files/coverage*.xml"
          retention-days: 7
