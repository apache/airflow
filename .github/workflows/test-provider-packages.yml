# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: Provider tests
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      runs-on-as-json-default:
        description: "The array of labels (in json form) determining default runner used for the build."
        required: true
        type: string
      image-tag:
        description: "Tag to set for the image"
        required: true
        type: string
      canary-run:
        description: "Whether this is a canary run"
        required: true
        type: string
      default-python-version:
        description: "Which version of python should be used by default"
        required: true
        type: string
      upgrade-to-newer-dependencies:
        description: "Whether to upgrade to newer dependencies"
        required: true
        type: string
      selected-providers-list-as-string:
        description: "List of affected providers as string"
        required: false
        type: string
      providers-compatibility-tests-matrix:
        description: >
          JSON-formatted array of providers compatibility tests in the form of array of dicts
          (airflow-version, python-versions, remove-providers, run-tests)
        required: true
        type: string
      providers-test-types-list-as-string:
        description: "List of parallel provider test types as string"
        required: true
        type: string
      skip-providers-tests:
        description: "Whether to skip provider tests (true/false)"
        required: true
        type: string
      python-versions:
        description: "JSON-formatted array of Python versions to build images from"
        required: true
        type: string
jobs:
  prepare-install-verify-provider-packages:
    timeout-minutes: 80
    name: "Providers ${{ matrix.package-format }} tests"
    runs-on: ${{ fromJSON(inputs.runs-on-as-json-default) }}
    strategy:
      fail-fast: false
      matrix:
        package-format: ["wheel", "sdist"]
    env:
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      IMAGE_TAG: "${{ inputs.image-tag }}"
      INCLUDE_NOT_READY_PROVIDERS: "true"
      PYTHON_MAJOR_MINOR_VERSION: "${{ inputs.default-python-version }}"
      VERBOSE: "true"
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: "Cleanup docker"
        run: ./scripts/ci/cleanup_docker.sh
      - name: >
          Prepare breeze & CI image: ${{ inputs.default-python-version }}:${{ inputs.image-tag }}
        uses: ./.github/actions/prepare_breeze_and_image
      - name: "Cleanup dist files"
        run: rm -fv ./dist/*
      - name: "Prepare provider documentation"
        run: >
          breeze release-management prepare-provider-documentation --include-not-ready-providers
          --non-interactive
        if: matrix.package-format == 'wheel'
      - name: "Prepare provider packages: ${{ matrix.package-format }}"
        run: >
          breeze release-management prepare-provider-packages --include-not-ready-providers
          --version-suffix-for-pypi dev0 --package-format ${{ matrix.package-format }}
      - name: "Prepare airflow package: ${{ matrix.package-format }}"
        run: >
          breeze release-management prepare-airflow-package --version-suffix-for-pypi dev0
          --package-format ${{ matrix.package-format }}
      - name: "Verify ${{ matrix.package-format }} packages with twine"
        run: |
          uv tool uninstall twine || true
          uv tool install twine && twine check dist/*
      - name: "Test providers issue generation automatically"
        run: >
          breeze release-management generate-issue-content-providers
          --only-available-in-dist --disable-progress
        if: matrix.package-format == 'wheel'
      - name: Remove Python 3.9-incompatible provider packages
        run: |
          echo "Removing Python 3.9-incompatible provider: cloudant"
          rm -vf dist/*cloudant*
      - name: "Generate source constraints from CI image"
        shell: bash
        run: >
          breeze release-management generate-constraints
          --airflow-constraints-mode constraints-source-providers --answer yes
      - name: "Install and verify wheel provider packages"
        run: >
          breeze release-management verify-provider-packages
          --use-packages-from-dist
          --package-format ${{ matrix.package-format }}
          --use-airflow-version ${{ matrix.package-format }}
          --airflow-constraints-reference default
          --providers-constraints-location
          /files/constraints-${{env.PYTHON_MAJOR_MINOR_VERSION}}/constraints-source-providers-${{env.PYTHON_MAJOR_MINOR_VERSION}}.txt
        env:
          AIRFLOW_SKIP_CONSTRAINTS: "${{ inputs.upgrade-to-newer-dependencies }}"
        if: matrix.package-format == 'wheel'
      - name: "Install all sdist provider packages and airflow"
        run: >
          breeze release-management install-provider-packages
          --use-packages-from-dist
          --package-format ${{ matrix.package-format }}
          --use-airflow-version ${{ matrix.package-format }}
          --airflow-constraints-reference default
          --providers-constraints-location
          /files/constraints-${{env.PYTHON_MAJOR_MINOR_VERSION}}/constraints-source-providers-${{env.PYTHON_MAJOR_MINOR_VERSION}}.txt
          --run-in-parallel
        if: matrix.package-format == 'sdist'

  providers-compatibility-tests-matrix:
    timeout-minutes: 80
    name: Compat ${{ matrix.airflow-version }}:P${{ matrix.python-version }} providers test
    runs-on: ${{ fromJSON(inputs.runs-on-as-json-default) }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJSON(inputs.providers-compatibility-tests-matrix)}}
    env:
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      IMAGE_TAG: "${{ inputs.image-tag }}"
      INCLUDE_NOT_READY_PROVIDERS: "true"
      PYTHON_MAJOR_MINOR_VERSION: "${{ inputs.default-python-version }}"
      VERSION_SUFFIX_FOR_PYPI: "dev0"
      VERBOSE: "true"
      CLEAN_AIRFLOW_INSTALLATION: "${{ inputs.canary-run }}"
    if: inputs.skip-providers-tests != 'true'
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: "Cleanup docker"
        run: ./scripts/ci/cleanup_docker.sh
      - name: "Prepare breeze & CI image: ${{ matrix.python-version }}:${{ inputs.image-tag }}"
        uses: ./.github/actions/prepare_breeze_and_image
      - name: "Cleanup dist files"
        run: rm -fv ./dist/*
      - name: "Prepare provider packages: wheel"
        run: >
          breeze release-management prepare-provider-packages --include-not-ready-providers
          --package-format wheel
      - name: >
          Remove incompatible Airflow
          ${{ matrix.airflow-version }}:Python ${{ matrix.python-version }} provider packages
        run: |
          for provider in ${{ matrix.remove-providers }}; do
            echo "Removing incompatible provider: ${provider}"
            rm -vf dist/apache_airflow_providers_${provider/./_}*
          done
        if: matrix.remove-providers != ''
      - name: "Download airflow package: wheel"
        run: |
          pip download "apache-airflow==${{ matrix.airflow-version }}" -d dist --no-deps
      - name: >
          Install and verify all provider packages and airflow on
          Airflow ${{ matrix.airflow-version }}:Python ${{ matrix.python-version }}
        # We do not need to run import check if we run tests, the tests should cover all the import checks
        # automatically
        if: matrix.run-tests != 'true'
        run: >
          breeze release-management verify-provider-packages
          --use-packages-from-dist
          --package-format wheel
          --use-airflow-version wheel
          --airflow-constraints-reference constraints-${{matrix.airflow-version}}
          --providers-skip-constraints
          --install-airflow-with-constraints
      - name: >
          Run provider unit tests on
          Airflow ${{ matrix.airflow-version }}:Python ${{ matrix.python-version }}
        if: matrix.run-tests == 'true'
        run: >
          breeze testing providers-tests --run-in-parallel
          --parallel-test-types "${{ inputs.providers-test-types-list-as-string }}"
          --use-packages-from-dist
          --package-format wheel
          --use-airflow-version "${{ matrix.airflow-version }}"
          --airflow-constraints-reference constraints-${{matrix.airflow-version}}
          --install-airflow-with-constraints
          --providers-skip-constraints
          --skip-providers "${{ matrix.remove-providers }}"
