# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: Build PROD images
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      build-type:
        description: >
          Name of the 'type' of the build - usually 'Regular' but other types are used to test image
          variations.
        required: true
        type: string
      do-build:
        description: >
          Whether to actually do the build (true/false). If set to false, the build is done
          already in pull-request-target workflow, so we skip it here.
        required: false
        default: "true"
        type: string
      debian-version:
        description: "Base Debian distribution to use for the build (bookworm/bullseye)"
        type: string
        default: "bookworm"
      install-mysql-client-type:
        description: "MySQL client type to use during build (mariadb/mysql)"
        type: string
        default: "mariadb"
      use-uv:
        description: "Whether to use uv to build the image (true/false)"
        required: true
        type: string
      image-tag:
        description: "Tag to set for the image"
        required: true
        type: string
      push-image:
        description: "Whether to push image to the registry (true/false)"
        required: true
        type: string
      python-versions:
        description: "JSON-formatted array of Python versions to build images from"
        required: true
        type: string
      branch:
        description: "Branch used to run the CI jobs in (main/v2_*_test)."
        required: true
        type: string
      build-provider-packages:
        description: "Whether to build provider packages (true/false). If false providers are from PyPI"
        required: true
        type: string
      upgrade-to-newer-dependencies:
        description: "Whether to attempt to upgrade image to newer dependencies (false/RANDOM_VALUE)"
        required: true
        type: string
      breeze-python-version:
        description: >
          Which version of python should be used to install Breeze (3.9 is minimum for reproducible builds)
        required: true
        type: string
      chicken-egg-providers:
        description: "Space-separated list of providers that should be installed from context files"
        required: true
        type: string
      constraints-branch:
        description: "Branch used to construct constraints URL from."
        required: true
        type: string
      docker-cache:
        description: "Docker cache specification to build the image (registry, local, disabled)."
        required: true
        type: string
jobs:
  build-prod-images:
    strategy:
      fail-fast: true
      matrix:
        # yamllint disable-line rule:line-length
        python-version: ${{ inputs.do-build == 'true' && fromJson(inputs.python-versions) || fromJson('[""]') }}
    timeout-minutes: 80
    name: "\
${{ inputs.do-build == 'true' && 'Build' || 'Skip building' }} \
PROD ${{inputs.build-type}} image\
${{matrix.python-version}}${{ inputs.do-build == 'true' && ':' || '' }}\
${{ inputs.do-build == 'true' && inputs.image-tag || '' }}"
    runs-on: ["ubuntu-22.04"]
    env:
      BACKEND: sqlite
      DEFAULT_BRANCH: ${{ inputs.branch }}
      DEFAULT_CONSTRAINTS_BRANCH: ${{ inputs.constraints-branch }}
      VERSION_SUFFIX_FOR_PYPI: "dev0"
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
        if: inputs.do-build == 'true'
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.build-info.outputs.targetCommitSha }}
          persist-credentials: false
        if: inputs.do-build == 'true'
      - name: Cleanup docker
        uses: ./.github/actions/cleanup-docker
        if: inputs.do-build == 'true'
      - name: "Install Breeze"
        uses: ./.github/actions/breeze
        with:
          python-version: ${{ inputs.breeze-python-version }}
        if: inputs.do-build == 'true'
      - name: "Regenerate dependencies in case they was modified manually so that we can build an image"
        shell: bash
        run: |
          pip install rich>=12.4.4 pyyaml
          python scripts/ci/pre_commit/pre_commit_update_providers_dependencies.py
        if: inputs.do-build == 'true' && inputs.upgrade-to-newer-dependencies != 'false'
      - name: "Cleanup dist and context file"
        shell: bash
        run: rm -fv ./dist/* ./docker-context-files/*
        if: inputs.do-build == 'true'
      - name: "Prepare providers packages"
        shell: bash
        run: >
          breeze release-management prepare-provider-packages
          --package-list-file ./prod_image_installed_providers.txt
          --package-format wheel --version-suffix-for-pypi dev0
        if: inputs.do-build == 'true' && inputs.build-provider-packages == 'true'
      - name: "Prepare chicken-eggs provider packages"
        # In case of provider packages which use latest dev0 version of providers, we should prepare them
        # from the source code, not from the PyPI because they have apache-airflow>=X.Y.Z dependency
        # And when we prepare them from sources they will have apache-airflow>=X.Y.Z.dev0
        shell: bash
        run: >
          breeze release-management prepare-provider-packages
          --package-format wheel --version-suffix-for-pypi dev0 ${{ inputs.chicken-egg-providers }}
        if: >
          inputs.do-build == 'true' && inputs.build-provider-packages != 'true' &&
          inputs.chicken-egg-providers != ''
      - name: "Prepare airflow package"
        shell: bash
        run: >
          breeze release-management prepare-airflow-package
          --package-format wheel --version-suffix-for-pypi dev0
        if: inputs.do-build == 'true'
      - name: "Copy dist packages to docker-context files"
        shell: bash
        run: cp -v --no-preserve=mode,ownership ./dist/*.whl ./docker-context-files
        if: inputs.do-build == 'true'
      - name: "Download constraints from the CI build"
        uses: actions/download-artifact@v4
        with:
          name: source-constraints-${{ matrix.python-version }}
          path: ./docker-context-files
        if: inputs.do-build == 'true' && inputs.build-provider-packages == 'true'
      - name: "Download constraints from the Generate & Verify build"
        uses: actions/download-artifact@v4
        with:
          name: constraints
          path: ./docker-context-files
        if: inputs.do-build == 'true' && inputs.build-provider-packages != 'true'
      - name: "Build PROD images w/ source providers ${{ matrix.python-version }}:${{ inputs.image-tag }}"
        shell: bash
        run: >
          breeze prod-image build --tag-as-latest --image-tag "${{ inputs.image-tag }}"
          --commit-sha "${{ github.sha }}"
          --install-packages-from-context --airflow-constraints-mode constraints-source-providers
          --use-constraints-for-context-packages --python "${{ matrix.python-version }}"
        env:
          PUSH: ${{ inputs.push-image }}
          DOCKER_CACHE: ${{ inputs.cache-directive }}
          DEBIAN_VERSION: ${{ inputs.debian-version }}
          INSTALL_MYSQL_CLIENT_TYPE: ${{ inputs.install-mysql-client-type }}
          UPGRADE_TO_NEWER_DEPENDENCIES: ${{ inputs.upgrade-to-newer-dependencies }}
          INCLUDE_NOT_READY_PROVIDERS: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USE_UV: ${{ inputs.use-uv }}
        if: inputs.do-build == 'true' && inputs.build-provider-packages == 'true'
      - name: "Build PROD images with PyPi providers ${{ matrix.python-version }}:${{ inputs.image-tag }}"
        shell: bash
        run: >
          breeze prod-image build --tag-as-latest --image-tag "${{ inputs.image-tag }}"
          --commit-sha "${{ github.sha }}"
          --install-packages-from-context --airflow-constraints-mode constraints
          --use-constraints-for-context-packages --python "${{ matrix.python-version }}"
        env:
          PUSH: ${{ inputs.push-image }}
          DOCKER_CACHE: ${{ inputs.cache-directive }}
          DEBIAN_VERSION: ${{ inputs.debian-version }}
          INSTALL_MYSQL_CLIENT_TYPE: ${{ inputs.install-mysql-client-type }}
          UPGRADE_TO_NEWER_DEPENDENCIES: ${{ inputs.upgrade-to-newer-dependencies }}
          INCLUDE_NOT_READY_PROVIDERS: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USE_UV: ${{ inputs.use-uv }}
        if: inputs.do-build == 'true' && inputs.build-provider-packages != 'true'
