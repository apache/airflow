# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: Special tests
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      runs-on-as-json-default:
        description: "The array of labels (in json form) determining default runner used for the build."
        required: true
        type: string
      test-groups:
        description: "The json representing list of test test groups to run"
        required: true
        type: string
      image-tag:
        description: "Tag to set for the image"
        required: true
        type: string
      core-test-types-list-as-string:
        description: "The list of core test types to run separated by spaces"
        required: true
        type: string
      providers-test-types-list-as-string:
        description: "The list of providers test types to run separated by spaces"
        required: true
        type: string
      run-coverage:
        description: "Whether to run coverage or not (true/false)"
        required: true
        type: string
      default-python-version:
        description: "Which version of python should be used by default"
        required: true
        type: string
      excluded-providers-as-string:
        description: "Excluded providers (per Python version) as json string"
        required: true
        type: string
      python-versions:
        description: "The list of python versions (stringified JSON array) to run the tests on."
        required: true
        type: string
      default-postgres-version:
        description: "The default version of the postgres to use"
        required: true
        type: string
      canary-run:
        description: "Whether to run canary tests or not (true/false)"
        required: true
        type: string
      upgrade-to-newer-dependencies:
        description: "Whether to upgrade to newer dependencies or not (true/false)"
        required: true
        type: string
      include-success-outputs:
        description: "Whether to include success outputs or not (true/false)"
        required: true
        type: string
      debug-resources:
        description: "Whether to debug resources or not (true/false)"
        required: true
        type: string
      special-tests-required:
        description: "Whether to run special tests or not (true/false)"
        required: true
        type: string
      needs-api-codegen:
        description: "Whether to run API codegen (true/false)"
        required: true
        type: string
jobs:
  tests-min-sqlalchemy:
    name: "Min SQLAlchemy test"
    uses: ./.github/workflows/run-unit-tests.yml
    if: inputs.special-tests-required == 'true'
    permissions:
      contents: read
      packages: read
    secrets: inherit
    with:
      runs-on-as-json-default: ${{ inputs.runs-on-as-json-default }}
      downgrade-sqlalchemy: "true"
      test-name: "MinSQLAlchemy-Postgres"
      test-scope: "DB"
      test-groups: ${{ inputs.test-groups }}
      backend: "postgres"
      image-tag: ${{ inputs.image-tag }}
      python-versions: "['${{ inputs.default-python-version }}']"
      backend-versions: "['${{ inputs.default-postgres-version }}']"
      excluded-providers-as-string: ${{ inputs.excluded-providers-as-string }}
      excludes: "[]"
      core-test-types-list-as-string: ${{ inputs.core-test-types-list-as-string }}
      providers-test-types-list-as-string: ${{ inputs.providers-test-types-list-as-string }}
      run-coverage: ${{ inputs.run-coverage }}
      debug-resources: ${{ inputs.debug-resources }}

  tests-boto:
    name: "Latest Boto test"
    uses: ./.github/workflows/run-unit-tests.yml
    if: inputs.special-tests-required == 'true'
    permissions:
      contents: read
      packages: read
    secrets: inherit
    with:
      runs-on-as-json-default: ${{ inputs.runs-on-as-json-default }}
      upgrade-boto: "true"
      test-name: "LatestBoto-Postgres"
      test-scope: "All"
      test-groups: ${{ inputs.test-groups }}
      backend: "postgres"
      image-tag: ${{ inputs.image-tag }}
      python-versions: "['${{ inputs.default-python-version }}']"
      backend-versions: "['${{ inputs.default-postgres-version }}']"
      excluded-providers-as-string: ${{ inputs.excluded-providers-as-string }}
      excludes: "[]"
      core-test-types-list-as-string: ${{ inputs.core-test-types-list-as-string }}
      providers-test-types-list-as-string: ${{ inputs.providers-test-types-list-as-string }}
      include-success-outputs: ${{ inputs.include-success-outputs }}
      run-coverage: ${{ inputs.run-coverage }}
      debug-resources: ${{ inputs.debug-resources }}

  tests-pendulum-2:
    name: "Pendulum2 test"
    uses: ./.github/workflows/run-unit-tests.yml
    if: inputs.special-tests-required == 'true'
    permissions:
      contents: read
      packages: read
    secrets: inherit
    with:
      runs-on-as-json-default: ${{ inputs.runs-on-as-json-default }}
      downgrade-pendulum: "true"
      test-name: "Pendulum2-Postgres"
      test-scope: "All"
      test-groups: ${{ inputs.test-groups }}
      backend: "postgres"
      image-tag: ${{ inputs.image-tag }}
      python-versions: "['${{ inputs.default-python-version }}']"
      backend-versions: "['${{ inputs.default-postgres-version }}']"
      excluded-providers-as-string: ${{ inputs.excluded-providers-as-string }}
      excludes: "[]"
      core-test-types-list-as-string: ${{ inputs.core-test-types-list-as-string }}
      providers-test-types-list-as-string: ${{ inputs.providers-test-types-list-as-string }}
      include-success-outputs: ${{ inputs.include-success-outputs }}
      run-coverage: ${{ inputs.run-coverage }}
      debug-resources: ${{ inputs.debug-resources }}

  tests-in-progress-disabled:
    name: "In progress disabled test"
    uses: ./.github/workflows/run-unit-tests.yml
    if: inputs.special-tests-required == 'true'
    permissions:
      contents: read
      packages: read
    secrets: inherit
    with:
      runs-on-as-json-default: ${{ inputs.runs-on-as-json-default }}
      enable-aip-44: "false"
      test-name: "InProgressDisabled-Postgres"
      test-scope: "All"
      test-groups: ${{ inputs.test-groups }}
      backend: "postgres"
      image-tag: ${{ inputs.image-tag }}
      python-versions: "['${{ inputs.default-python-version }}']"
      backend-versions: "['${{ inputs.default-postgres-version }}']"
      excluded-providers-as-string: ${{ inputs.excluded-providers-as-string }}
      excludes: "[]"
      core-test-types-list-as-string: ${{ inputs.core-test-types-list-as-string }}
      providers-test-types-list-as-string: ${{ inputs.providers-test-types-list-as-string }}
      include-success-outputs: ${{ inputs.include-success-outputs }}
      run-coverage: ${{ inputs.run-coverage }}
      debug-resources: ${{ inputs.debug-resources }}

  tests-quarantined:
    name: "Quarantined test"
    uses: ./.github/workflows/run-unit-tests.yml
    if: inputs.special-tests-required == 'true'
    permissions:
      contents: read
      packages: read
    secrets: inherit
    with:
      runs-on-as-json-default: ${{ inputs.runs-on-as-json-default }}
      test-name: "Postgres"
      test-scope: "Quarantined"
      test-groups: ${{ inputs.test-groups }}
      backend: "postgres"
      image-tag: ${{ inputs.image-tag }}
      python-versions: "['${{ inputs.default-python-version }}']"
      backend-versions: "['${{ inputs.default-postgres-version }}']"
      excluded-providers-as-string: ${{ inputs.excluded-providers-as-string }}
      excludes: "[]"
      core-test-types-list-as-string: ${{ inputs.core-test-types-list-as-string }}
      providers-test-types-list-as-string: ${{ inputs.providers-test-types-list-as-string }}
      include-success-outputs: ${{ inputs.include-success-outputs }}
      run-coverage: ${{ inputs.run-coverage }}
      debug-resources: ${{ inputs.debug-resources }}

  tests-arm-collection:
    name: "ARM Collection test"
    uses: ./.github/workflows/run-unit-tests.yml
    if: inputs.special-tests-required == 'true'
    permissions:
      contents: read
      packages: read
    secrets: inherit
    with:
      runs-on-as-json-default: ${{ inputs.runs-on-as-json-default }}
      test-name: "Postgres"
      test-scope: "ARM collection"
      test-groups: ${{ inputs.test-groups }}
      backend: "postgres"
      image-tag: ${{ inputs.image-tag }}
      python-versions: "['${{ inputs.default-python-version }}']"
      backend-versions: "['${{ inputs.default-postgres-version }}']"
      excluded-providers-as-string: ${{ inputs.excluded-providers-as-string }}
      excludes: "[]"
      core-test-types-list-as-string: ${{ inputs.core-test-types-list-as-string }}
      providers-test-types-list-as-string: ${{ inputs.providers-test-types-list-as-string }}
      include-success-outputs: ${{ inputs.include-success-outputs }}
      run-coverage: ${{ inputs.run-coverage }}
      debug-resources: ${{ inputs.debug-resources }}

  tests-system:
    name: "System test: ${{ matrix.test-group }}"
    uses: ./.github/workflows/run-unit-tests.yml
    if: inputs.special-tests-required == 'true'
    permissions:
      contents: read
      packages: read
    secrets: inherit
    with:
      runs-on-as-json-default: ${{ inputs.runs-on-as-json-default }}
      test-name: "SystemTest"
      test-scope: "System"
      test-groups: ${{ inputs.test-groups }}
      backend: "postgres"
      image-tag: ${{ inputs.image-tag }}
      python-versions: "['${{ inputs.default-python-version }}']"
      backend-versions: "['${{ inputs.default-postgres-version }}']"
      excluded-providers-as-string: ${{ inputs.excluded-providers-as-string }}
      excludes: "[]"
      core-test-types-list-as-string: ${{ inputs.core-test-types-list-as-string }}
      providers-test-types-list-as-string: ${{ inputs.providers-test-types-list-as-string }}
      include-success-outputs: ${{ inputs.include-success-outputs }}
      run-coverage: ${{ inputs.run-coverage }}
      debug-resources: ${{ inputs.debug-resources }}

  test-openapi-client:
    timeout-minutes: 60
    name: "Test OpenAPI client"
    runs-on: ${{ fromJSON(inputs.runs-on-as-json-default) }}
    if: inputs.needs-api-codegen == 'true'
    env:
      BACKEND: "postgres"
      BACKEND_VERSION: "${{ inputs.default-postgres-version }}"
      DEBUG_RESOURCES: "${{ inputs.debug-resources }}"
      ENABLE_COVERAGE: "${{ inputs.run-coverage }}"
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      IMAGE_TAG: "${{ inputs.image-tag }}"
      JOB_ID: "openapi-client-tests"
      PYTHON_MAJOR_MINOR_VERSION: "${{ inputs.default-python-version }}"
      VERBOSE: "true"
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          persist-credentials: false
      - name: "Cleanup docker"
        run: ./scripts/ci/cleanup_docker.sh
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          repository: "apache/airflow-client-python"
          fetch-depth: 1
          persist-credentials: false
          path: ./airflow-client-python
      - name: "Prepare breeze & CI image: ${{inputs.default-python-version}}:${{inputs.image-tag}}"
        uses: ./.github/actions/prepare_breeze_and_image
      - name: "Generate airflow python client"
        run: >
          breeze release-management prepare-python-client --package-format both
          --version-suffix-for-pypi dev0 --python-client-repo ./airflow-client-python
      - name: "Show diff"
        run: git diff --color HEAD
        working-directory: ./airflow-client-python
      - name: "Open API Tests with python client"
        run: breeze testing openapi-tests
