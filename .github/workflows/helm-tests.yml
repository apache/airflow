# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: Helm tests
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      runs-on:
        description: "The array of labels (in json form) determining type of the runner to use for the build."
        required: false
        default: '["ubuntu-22.04"]'
        type: string
      helm-test-packages:
        description: "Stringified JSON array of helm test packages to test"
        required: true
        type: string
      image-tag:
        description: "Tag to set for the image"
        required: true
        type: string
      default-python-version:
        description: "Which version of python should be used by default"
        required: true
        type: string
jobs:
  tests-helm:
    timeout-minutes: 80
    name: "Unit tests Helm: ${{ matrix.helm-test-package }}"
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    strategy:
      fail-fast: false
      matrix:
        helm-test-package: ${{ fromJson(inputs.helm-test-packages) }}
    env:
      # Always use default Python version of CI image for preparing packages
      PYTHON_MAJOR_MINOR_VERSION: "${{ inputs.default-python-version }}"
      PARALLEL_TEST_TYPES: "Helm"
      BACKEND: "none"
      DB_RESET: "false"
      JOB_ID: "helm-tests"
      USE_XDIST: "true"
      IMAGE_TAG: "${{ inputs.image-tag }}"
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      VERBOSE: "true"
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Cleanup docker
        uses: ./.github/actions/cleanup-docker
      - name: "Prepare breeze & CI image: ${{inputs.default-python-version}}:${{inputs.image-tag}}"
        uses: ./.github/actions/prepare_breeze_and_image
      - name: "Helm Unit Tests: ${{ matrix.helm-test-package }}"
        run: breeze testing helm-tests --helm-test-package "${{ matrix.helm-test-package }}"

  tests-helm-release:
    timeout-minutes: 80
    name: "Release Helm"
    runs-on: ["ubuntu-22.04"]
    env:
      PYTHON_MAJOR_MINOR_VERSION: "${{inputs.default-python-version}}"
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Cleanup docker
        uses: ./.github/actions/cleanup-docker
      - name: "Install Breeze"
        uses: ./.github/actions/breeze
      - name: Setup git for tagging
        run: |
          git config --global user.email "name@example.com"
          git config --global user.name "Your Name"
      - name: "Remove old artifacts"
        run: rm -rf dist/*
      - name: "Setup k8s/helm environment"
        run: breeze k8s setup-env
      - name: "Install helm gpg plugin"
        run: >
          breeze k8s shell -c "helm plugin install https://github.com/technosophos/helm-gpg
          --version 6303407eb63deaeb1b2f24de611e3468a27ec05b" || true
      - name: "Helm release tarball"
        run: >
          breeze release-management prepare-helm-chart-tarball --ignore-version-check --override-tag
          --skip-tag-signing --version 0.0.0 --version-suffix dev0
      - name: Generate GPG key for signing
        # Sometimes the key will be already added to the keyring, so we ignore the error
        run: gpg --batch --passphrase '' --quick-gen-key dev@airflow.apache.org default default || true
      - name: "Helm release package"
        run: >
          breeze release-management prepare-helm-chart-package --sign-email dev@airflow.apache.org
      - name: "Sign artifacts for ASF distribution"
        run: ./dev/sign.sh dist/airflow-*.tgz dist/airflow-*-source.tar.gz
        env:
          SIGN_WITH: dev@airflow.apache.org
      - name: "Test helm chart issue generation automatically"
        # Adding same tags for now, will address in a follow-up
        run: >
          breeze release-management generate-issue-content-helm-chart
          --previous-release helm-chart/0.0.0dev0 --current-release helm-chart/0.0.0dev0
      - name: "Upload Helm artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: Helm artifacts
          path: ./dist/airflow-*
          retention-days: 7
          if-no-files-found: error
