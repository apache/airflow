# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: Static checks, mypy, docs
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      runs-on:
        description: "The array of labels (in json form) determining type of the runner to use for the build."
        required: false
        default: '["ubuntu-22.04"]'
        type: string
      image-tag:
        description: "Tag to set for the image"
        required: true
        type: string
      python-versions-list-as-string:
        description: "The list of python versions as string separated by spaces"
        required: true
        type: string
      branch:
        description: "Branch used to run the CI jobs in (main/v2_*_test)."
        required: true
        type: string
      canary-run:
        description: "Whether this is a canary run (true/false)"
        required: true
        type: string
      default-python-version:
        description: "Which version of python should be used by default"
        required: true
        type: string
      docs-list-as-string:
        description: "Stringified list of docs to build (space separated)"
        required: true
        type: string
      upgrade-to-newer-dependencies:
        description: "Whether to upgrade to newer dependencies (true/false)"
        required: true
        type: string
      chicken-egg-providers:
        description: "List of providers that should be prepared from sources"
        required: false
        type: string
      basic-checks-only:
        description: "Whether to run only basic checks (true/false)"
        required: true
        type: string
      latest-versions-only:
        description: "Whether to run only latest versions (true/false)"
        required: true
        type: string
      ci-image-build:
        description: "Whether to build CI images (true/false)"
        required: true
        type: string
      skip-pre-commits:
        description: "Whether to skip pre-commits (true/false)"
        required: true
        type: string
      include-success-outputs:
        description: "Whether to include success outputs"
        required: true
        type: string
      debug-resources:
        description: "Whether to debug resources (true/false)"
        required: true
        type: string
jobs:
  static-checks:
    timeout-minutes: 45
    name: "Static checks"
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    env:
      PYTHON_MAJOR_MINOR_VERSION: "${{ inputs.default-python-version }}"
      UPGRADE_TO_NEWER_DEPENDENCIES: "${{ inputs.upgrade-to-newer-dependencies }}"
      IMAGE_TAG: ${{ inputs.image-tag }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: inputs.basic-checks-only == 'false' && inputs.latest-versions-only != 'true'
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: "Setup python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.default-python-version }}
          cache: 'pip'
          cache-dependency-path: ./dev/breeze/pyproject.toml
      - name: Cleanup docker
        uses: ./.github/actions/cleanup-docker
      - name: "Prepare breeze & CI image: ${{ inputs.default-python-version}}:${{ inputs.image-tag }}"
        uses: ./.github/actions/prepare_breeze_and_image
        id: breeze
      - name: Cache pre-commit envs
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          # yamllint disable-line rule:line-length
          key: "pre-commit-${{steps.breeze.outputs.host-python-version}}-${{ hashFiles('.pre-commit-config.yaml') }}"
          restore-keys: |
            pre-commit-${{steps.breeze.outputs.host-python-version}}-
      - name: "Static checks"
        run: breeze static-checks --all-files --show-diff-on-failure --color always --initialize-environment
        env:
          VERBOSE: "false"
          SKIP: ${{ inputs.skip-pre-commits }}
          COLUMNS: "250"
          SKIP_GROUP_OUTPUT: "true"
          DEFAULT_BRANCH: ${{ inputs.branch }}
          RUFF_FORMAT: "github"

  mypy:
    timeout-minutes: 45
    name: MyPy checks
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    if: inputs.needs-mypy == 'true'
    strategy:
      fail-fast: false
      matrix:
        mypy-folder: ${{ fromJson(inputs.mypy-folders) }}
    env:
      PYTHON_MAJOR_MINOR_VERSION: "${{inputs.default-python-version}}"
      IMAGE_TAG: "${{ inputs.image-tag }}"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Cleanup docker
        uses: ./.github/actions/cleanup-docker
        if: inputs.needs-mypy == 'true'
      - name: "Prepare breeze & CI image: ${{ inputs.default-python-version }}:${{ inputs.image-tag }}"
        uses: ./.github/actions/prepare_breeze_and_image
        id: breeze
      - name: "MyPy checks for ${{ matrix.mypy-folder }}"
        run: |
          pip install pre-commit
          pre-commit run --color always --verbose --hook-stage manual mypy-${{matrix.mypy-folder}} --all-files
        env:
          VERBOSE: "false"
          COLUMNS: "250"
          SKIP_GROUP_OUTPUT: "true"
          DEFAULT_BRANCH: ${{ inputs.branch }}
          RUFF_FORMAT: "github"
          INCLUDE_MYPY_VOLUME: "false"

  build-docs:
    timeout-minutes: 60
    name: "Build documentation"
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    strategy:
      fail-fast: false
      matrix:
        flag: ["--docs-only", "--spellcheck-only"]
    env:
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USERNAME: ${{ github.actor }}
      IMAGE_TAG: "${{ inputs.image-tag }}"
      INCLUDE_NOT_READY_PROVIDERS: "true"
      INCLUDE_SUCCESS_OUTPUTS: "${{ inputs.include-success-outputs }}"
      PYTHON_MAJOR_MINOR_VERSION: "${{ inputs.default-python-version }}"
      VERBOSE: "true"
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Cleanup docker
        uses: ./.github/actions/cleanup-docker
      - name: "Prepare breeze & CI image: ${{ inputs.default-python-version }}:${{ inputs.image-tag }}"
        uses: ./.github/actions/prepare_breeze_and_image
      - uses: actions/cache@v4
        id: cache-doc-inventories
        with:
          path: ./docs/_inventory_cache/
          key: docs-inventory-${{ hashFiles('pyproject.toml;') }}
          restore-keys: |
            docs-inventory-${{ hashFiles('pyproject.toml;') }}
            docs-inventory-
      - name: "Building docs with ${{ matrix.flag }} flag"
        run: >
          breeze build-docs ${{ inputs.docs-list-as-string }} ${{ matrix.flag }}
      - name: "Clone airflow-site"
        run: >
          git clone https://github.com/apache/airflow-site.git ${GITHUB_WORKSPACE}/airflow-site &&
          echo "AIRFLOW_SITE_DIRECTORY=${GITHUB_WORKSPACE}/airflow-site" >> "$GITHUB_ENV"
        if: inputs.canary-run == 'true' && matrix.flag == '--docs-only'
      - name: "Publish docs"
        run: >
          breeze release-management publish-docs --override-versioned --run-in-parallel
          ${{ inputs.docs-list-as-string }}
        if: inputs.canary-run == 'true' && matrix.flag == '--docs-only'
      - name: "Generate back references for providers"
        run: breeze release-management add-back-references all-providers
        if: inputs.canary-run == 'true' && matrix.flag == '--docs-only'
      - name: "Generate back references for apache-airflow"
        run: breeze release-management add-back-references apache-airflow
        if: inputs.canary-run == 'true' && matrix.flag == '--docs-only'
      - name: "Generate back references for docker-stack"
        run: breeze release-management add-back-references docker-stack
        if: inputs.canary-run == 'true' && matrix.flag == '--docs-only'
      - name: "Generate back references for helm-chart"
        run: breeze release-management add-back-references helm-chart
        if: inputs.canary-run == 'true' && matrix.flag == '--docs-only'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a  # v4.0.1
        if: >
          inputs.canary-run == 'true' &&
          inputs.branch == 'main' &&
          matrix.flag == '--docs-only'
        with:
          aws-access-key-id: ${{ secrets.DOCS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DOCS_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: "Upload documentation to AWS S3"
        if: >
          inputs.canary-run == 'true' &&
          inputs.branch == 'main' &&
          matrix.flag == '--docs-only'
        run: aws s3 sync --delete ./files/documentation s3://apache-airflow-docs
