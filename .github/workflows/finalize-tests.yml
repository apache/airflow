# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: Finalize tests
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      runs-on:
        description: "The array of labels (in json form) determining type of the runner to use for the build."
        required: false
        default: '["ubuntu-22.04"]'
        type: string
      image-tag:
        description: "Tag to set for the image"
        required: true
        type: string
      python-versions:
        description: "JSON-formatted array of Python versions to test"
        required: true
        type: string
      python-versions-list-as-string:
        description: "Stringified array of all Python versions to test - separated by spaces."
        required: true
        type: string
      branch:
        description: "The default branch to use for the build"
        required: true
        type: string
      constraints-branch:
        description: "The branch to use for constraints"
        required: true
        type: string
      default-python-version:
        description: Which version of python should be used get CI image
        required: true
        type: string
      in-workflow-build:
        description: "Whether the build is executed as part of the workflow (true/false)"
        required: true
        type: string
      upgrade-to-newer-dependencies:
        description: "Whether to upgrade to newer dependencies (true/false)"
        required: true
        type: string
      docker-cache:
        description: "Docker cache specification to build the image (registry, local, disabled)."
        required: true
        type: string
      canary-run:
        description: "Whether this is a canary run (true/false)"
        required: true
        type: string
jobs:
  update-constraints:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    timeout-minutes: 80
    name: "Update constraints"
    permissions:
      contents: write
      packages: read
    env:
      RUNS_ON: "${{needs.build-info.outputs.runs-on}}"
      DEBUG_RESOURCES: ${{ inputs.debug-resources}}
      PYTHON_VERSIONS: ${{ inputs.python-versions-list-as-string }}
      IMAGE_TAG: ${{ inputs.image-tag }}
    if: inputs.upgrade-to-newer-dependencies != 'false'
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          # Needed to perform push action
          persist-credentials: false
      - name: Cleanup docker
        uses: ./.github/actions/cleanup-docker
      - name: "Set constraints branch name"
        id: constraints-branch
        run: ./scripts/ci/constraints/ci_branch_constraints.sh >> ${GITHUB_OUTPUT}
      - name: Checkout ${{ steps.constraints-branch.outputs.branch }}
        uses: actions/checkout@v4
        with:
          path: "constraints"
          ref: ${{ steps.constraints-branch.outputs.branch }}
          persist-credentials: true
          fetch-depth: 0
      - name: "Download constraints from the constraints generated by build CI image"
        uses: actions/download-artifact@v4
        with:
          name: constraints
          path: ./files
      - name: "Diff in constraints for Python: ${{ inputs.python-versions-list-as-string }}"
        run: ./scripts/ci/constraints/ci_diff_constraints.sh
      # only commit and push constraints in canary runs (main)
      - name: "Commit changed constraint files for Python: ${{ inputs.python-versions-list-as-string }}"
        run: ./scripts/ci/constraints/ci_commit_constraints.sh
        if: inputs.canary-run == 'true'
      - name: "Push changes"
        if: inputs.canary-run == 'true'
        working-directory: "constraints"
        run:
          git push

  # Push BuildX cache to GitHub Registry in Apache repository, if all tests are successful and build
  # is executed as result of direct push to "main" or one of the "vX-Y-test" branches
  # It rebuilds all images using just-pushed constraints using buildx and pushes them to registry
  # It will automatically check if a new python image was released and will pull the latest one if needed
  push-buildx-cache-to-github-registry:
    name: Push Regular Image Cache
    needs: [update-constraints]
    uses: ./.github/workflows/push-image-cache.yml
    permissions:
      contents: read
      packages: write
    secrets: inherit
    with:
      cache-type: "Regular"
      include-prod-images: "true"
      push-latest-images: "true"
      use-uv: "true"
      image-tag: ${{ inputs.image-tag }}
      python-versions: ${{ inputs.python-versions }}
      branch: ${{ inputs.branch }}
      constraints-branch: ${{ inputs.constraints-branch }}
      docker-cache: ${{ inputs.docker-cache }}
    if: inputs.canary-run == 'true'

  summarize-warnings:
    timeout-minutes: 15
    name: "Summarize warnings"
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    steps:
      - name: "Cleanup repo"
        shell: bash
        run: docker run -v "${GITHUB_WORKSPACE}:/workspace" -u 0:0 bash -c "rm -rf /workspace/*"
      - name: "Checkout ${{ github.ref }} ( ${{ github.sha }} )"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Cleanup docker
        uses: ./.github/actions/cleanup-docker
      - name: "Download all artifacts from the current build"
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: "Summarize all warnings"
        run: |
          ls -R ./artifacts/
          cat ./artifacts/test-warnings*/* | sort | uniq
          echo
          echo Total number of unique warnings $(cat ./artifacts/test-warnings*/* | sort | uniq | wc -l)
