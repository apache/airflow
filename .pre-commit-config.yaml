# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
default_stages: [pre-commit, pre-push]
default_language_version:
  python: python3
  node: 22.19.0
minimum_prek_version: '0.2.0'
exclude: ^.*/.*_vendor/
repos:
  - repo: meta
    hooks:
      - id: identity
        name: Print checked files
        description: Print input to the static check hooks for troubleshooting
      - id: check-hooks-apply
        name: Check if all hooks apply to the repository
  - repo: https://github.com/thlorenz/doctoc.git
    rev: 70fdcd39ef919754011a827bd25f23a0b141c3c3  # frozen: v2.2.0
    hooks:
      - id: doctoc
        name: Add TOC for Markdown and RST files
        files:
          (?x)
          ^README\.md$|
          ^UPDATING.*\.md$|
          ^chart/UPDATING.*\.md$|
          ^dev/.*\.md$|
          ^dev/.*\.rst$|
          ^docs/README\.md$|
          ^\.github/.*\.md$|
          ^airflow-core/tests/system/README\.md$
        args:
          - "--maxlevel"
          - "2"
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    # replace hash with version once PR #103 merged comes in a release
    rev: abdd8b62891099da34162217ecb3872d22184a51
    hooks:
      - id: insert-license
        name: Add license for all SQL files
        files: \.sql$
        exclude: |
          (?x)
          ^\.github/
        args:
          - --comment-style
          - "/*||*/"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: Add license for all RST files
        exclude: ^\.github/.*$|newsfragments/.*\.rst$
        args:
          - --comment-style
          - "||"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.rst
          - --fuzzy-match-generates-todo
        files: \.rst$
      - id: insert-license
        name: Add license for CSS/JS/JSX/PUML/TS/TSX
        files: \.(css|jsx?|puml|tsx?)$
        exclude: ^\.github/.*$|ui/openapi-gen/|www/openapi-gen/|.*/dist/.*
        args:
          - --comment-style
          - "/*!| *| */"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: Add license for all Shell files
        exclude: ^\.github/.*$|^dev/breeze/autocomplete/.*$
        files: \.bash$|\.sh$
        args:
          - --comment-style
          - "|#|"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: Add license for all toml files
        exclude: ^\.github/.*$|^dev/breeze/autocomplete/.*$
        files: \.toml$
        args:
          - --comment-style
          - "|#|"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: Add license for all Python files
        exclude: ^\.github/.*$|^.*/_vendor/.*$|^airflow-ctl/.*/.*generated\.py$
        files: \.py$|\.pyi$
        args:
          - --comment-style
          - "|#|"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: Add license for all XML files
        exclude: ^\.github/.*$
        files: \.xml$
        args:
          - --comment-style
          - "<!--||-->"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: Add license for all YAML files except Helm templates
        exclude: >
          (?x)
          ^\.github/.*$|
          ^chart/templates/.*|
          .*reproducible_build\.yaml$|
          ^.*/v2.*\.yaml$|
          ^.*/openapi/_private_ui.*\.yaml$|
          ^.*/pnpm-lock\.yaml$|
          .*-generated\.yaml$
        types: [yaml]
        files: \.ya?ml$
        args:
          - --comment-style
          - "|#|"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: Add license for all Markdown files
        files: \.md$
        exclude: PROVIDER_CHANGES.*\.md$
        args:
          - --comment-style
          - "<!--|| -->"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
      - id: insert-license
        name: Add license for all other files
        exclude: ^\.github/.*$
        args:
          - --comment-style
          - "|#|"
          - --license-filepath
          - scripts/ci/license-templates/LICENSE.txt
          - --fuzzy-match-generates-todo
        files: >
          \.cfg$|\.conf$|\.ini$|\.ldif$|\.properties$|\.service$|\.tf$|Dockerfile.*$
  - repo: local
    hooks:
      - id: check-min-python-version
        name: Check minimum Python version
        entry: ./scripts/ci/prek/check_min_python_version.py
        language: python
        require_serial: true
      - id: upgrade-important-versions
        name: Upgrade important versions (manual)
        entry: ./scripts/ci/prek/upgrade_important_versions.py
        stages: ['manual']
        language: python
        files: >
          (?x)
          ^\.pre-commit-config\.yaml$|
          ^\.github/\.pre-commit-config\.yaml$|
          ^scripts/ci/prek/update_installers_and_prek\.py$
        pass_filenames: false
        require_serial: true
      - id: check-translations-completeness
        name: Check translation completeness (manual)
        entry: ./dev/i18n/check_translations_completeness.py
        stages: ['manual']
        language: python
        pass_filenames: false
        require_serial: true
      - id: check-taskinstance-tis-attrs
        name: Check that TI and TIS have the same attributes
        entry: ./scripts/ci/prek/check_ti_vs_tis_attributes.py
        language: python
        files: ^airflow-core/src/airflow/models/taskinstance\.py$|^airflow-core/src/airflow/models/taskinstancehistory\.py$
        pass_filenames: false
        require_serial: true
  - repo: https://github.com/adamchainz/blacken-docs
    rev: dda8db18cfc68df532abf33b185ecd12d5b7b326  # frozen: 1.20.0
    hooks:
      - id: blacken-docs
        name: Run black on docs
        args:
          - --line-length=110
          - --target-version=py310
          - --target-version=py311
          - --target-version=py312
          - --target-version=py313
        alias: blacken-docs
        additional_dependencies:
         - 'black==25.9.0'
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: 3e8a8703264a2f4a69428a0aa4dcb512790b2c8c  # frozen: v6.0.0
    hooks:
      - id: check-merge-conflict
        name: Check that merge conflicts are not being committed
      - id: debug-statements
        name: Detect accidentally committed debug statements
      - id: check-builtin-literals
        name: Require literal syntax when initializing builtins
      - id: detect-private-key
        name: Detect if private key is added to the repository
        exclude: ^providers/ssh/docs/connections/ssh\.rst$
      - id: end-of-file-fixer
        name: Make sure that there is an empty line at the end
        exclude: >
          (?x)
          ^airflow-core/docs/img/.*\.dot|
          ^airflow-core/docs/img/.*\.sha256|
          .*/dist/.*|
          LICENSES-ui\.txt$|
          .*/openapi-gen/.*
      - id: mixed-line-ending
        name: Detect if mixed line ending is used (\r vs. \r\n)
      - id: check-executables-have-shebangs
        name: Check that executables have shebang
      - id: check-xml
        name: Check XML files with xmllint
        exclude: >
          (?x)
          ^scripts/ci/docker-compose/gremlin/.
      - id: trailing-whitespace
        name: Remove trailing whitespace at end of line
        exclude: >
          (?x)
          ^airflow-core/docs/img/.*\.dot$|
          ^dev/breeze/doc/images/output.*$|
          ^.*/openapi-gen/.*$|
          ^airflow-ctl/docs/images/.*\.svg$
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: 3a6eb0fadf60b3cccfd80bad9dbb6fae7e47b316  # frozen: v1.10.0
    hooks:
      - id: rst-backticks
        name: Check if RST files use double backticks for code
      - id: python-no-log-warn
        name: Check if there are no deprecate log warn
  - repo: https://github.com/adrienverge/yamllint
    rev: 79a6b2b1392eaf49cdd32ac4f14be1a809bbd8f7  # frozen: v1.37.1
    hooks:
      - id: yamllint
        name: Check YAML files with yamllint
        entry: yamllint -c yamllint-config.yml --strict
        types: [yaml]
        exclude: >
          (?x)
          ^.*airflow\.template\.yaml$|
          ^.*init_git_sync\.template\.yaml$|
          ^chart/(?:templates|files)/.*\.yaml$|
          ^helm-tests/tests/chart_utils/keda.sh_scaledobjects\.yaml$|
          .*/v1.*\.yaml$|
          ^.*openapi.*\.yaml$|
          ^\.pre-commit-config\.yaml$|
          ^.*reproducible_build\.yaml$|
          ^.*pnpm-lock\.yaml$
  - repo: https://github.com/ikamensh/flynt
    rev: 97be693bf18bc2f050667dd282d243e2824b81e2  # frozen: 1.0.6
    hooks:
      - id: flynt
        name: Run flynt string format converter for Python
        args:
         # If flynt detects too long text it ignores it. So we set a very large limit to make it easy
         # to split the text by hand. Too long lines are detected by flake8 (below),
         # so the user is informed to take action.
         - --line-length
         - '99999'
  - repo: https://github.com/codespell-project/codespell
    rev: 63c8f8312b7559622c0d82815639671ae42132ac  # frozen: v2.4.1
    hooks:
      - id: codespell
        name: Run codespell
        description: Run codespell to check for common misspellings in files
        entry: bash -c 'echo "If you think that this failure is an error, consider adding the word(s)
          to the codespell dictionary at docs/spelling_wordlist.txt.
          The word(s) should be in lowercase." && exec codespell "$@"' --
        language: python
        types: [text]
        exclude: >
          (?x)
          material-icons\.css$|
          ^images/.*$|
          ^RELEASE_NOTES\.txt$|
          ^.*package-lock\.json$|
          ^.*/kinglear\.txt$|
          ^.*pnpm-lock\.yaml$|
          .*/dist/.*|
          ^airflow-core/src/airflow/ui/public/i18n/locales/(?!en/).+/
        args:
          - --ignore-words=docs/spelling_wordlist.txt
          - --skip=providers/.*/src/airflow/providers/*/*.rst,providers/*/docs/changelog.rst,docs/*/commits.rst,providers/*/docs/commits.rst,providers/*/*/docs/commits.rst,docs/apache-airflow/tutorial/pipeline_example.csv,*.min.js,*.lock,INTHEWILD.md,*.svg
          - --exclude-file=.codespellignorelines
  - repo: https://github.com/woodruffw/zizmor-pre-commit
    rev: d0bc12378d4f1619265f64726c5726f2c072a7ed  # frozen: v1.16.0
    hooks:
      - id: zizmor
        name: Run zizmor to check for github workflow syntax errors
        types: [yaml]
        files: ^\.github/workflows/.*$|^\.github/actions/.*$
        require_serial: true
        entry: zizmor
  - repo: local
    # Note that this is the 2nd "local" repo group in the .pre-commit-config.yaml file. This is because
    # we try to minimize the number of passes that must happen to apply some of the changes
    # done by prek-hooks. Some of the prek hooks not only check for errors but also fix them. This means
    # that output from an earlier prek hook becomes input to another prek hook. Splitting the local
    # scripts of our and adding some other non-local prek hook in-between allows us to handle such
    # changes quickly - especially when we want the early modifications from the first local group
    # to be applied before the non-local prek hooks are run
    hooks:
      - id: check-shared-distributions-structure
        name: Check shared distributions structure
        entry: ./scripts/ci/prek/check_shared_distributions_structure.py
        language: python
        pass_filenames: false
        files: ^shared/.*$
      - id: check-shared-distributions-usage
        name: Check shared distributions usage
        entry: ./scripts/ci/prek/check_shared_distributions_usage.py
        language: python
        pass_filenames: false
        files: ^shared/.*$|^.*/pyproject.toml$|^.*/_shared/.*$
      - id: ruff
        name: Run 'ruff' for extremely fast Python linting
        description: "Run 'ruff' for extremely fast Python linting"
        entry: ruff check --force-exclude
        language: python
        types_or: [python, pyi]
        args: [--fix]
        require_serial: true
        additional_dependencies: ['ruff==0.14.2']
        exclude: ^airflow-core/tests/unit/dags/test_imports\.py$|^performance/tests/test_.*\.py$
      - id: ruff-format
        name: Run 'ruff format'
        description: "Run 'ruff format' for extremely fast Python formatting"
        entry: ./scripts/ci/prek/ruff_format.py
        language: python
        types_or: [python, pyi]
        args: []
        require_serial: true
        exclude: ^airflow-core/tests/unit/dags/test_imports\.py$
      - id: replace-bad-characters
        name: Replace bad characters
        entry: ./scripts/ci/prek/replace_bad_characters.py
        language: python
        types: [file, text]
        exclude: >
          (?x)
          ^clients/gen/go\.sh$|
          ^\.gitmodules$|
          ^airflow-core/src/airflow/ui/openapi-gen/|
          ^providers/edge3/src/airflow/providers/edge3/plugins/www/openapi-gen/|
          .*/dist/.*|
          \.go$|
          /go\.(mod|sum)$
      - id: lint-dockerfile
        name: Lint Dockerfile
        language: python
        entry: ./scripts/ci/prek/lint_dockerfile.py
        files: Dockerfile.*$
        pass_filenames: true
        require_serial: true
      - id: check-airflow-k8s-not-used
        name: Check airflow.kubernetes imports are not used
        language: python
        files: ^airflow-core/src/airflow/.*\.py$
        require_serial: true
        exclude: ^airflow-core/src/airflow/kubernetes/
        entry: ./scripts/ci/prek/check_airflow_imports.py
          --pattern '^airflow\.kubernetes'
          --message "You should only import kubernetes code from `airflow.providers.cncf.kubernetes`."
      - id: check-common-compat-used-for-openlineage
        name: Check common.compat is used for OL deprecated classes
        language: python
        files: ^airflow-core/src/airflow/.*\.py$
        require_serial: true
        exclude: >
          (?x)
          ^airflow-core/src/airflow/openlineage/|
          ^airflow/providers/common/compat/openlineage/facet.py$
        entry: ./scripts/ci/prek/check_airflow_imports.py
          --pattern '^openlineage\.client\.(facet|run)'
          --message "You should import from `airflow.providers.common.compat.openlineage.facet` instead."
      - id: check-airflow-providers-bug-report-template
        name: Sort airflow-bug-report provider list
        language: python
        files: ^\.github/ISSUE_TEMPLATE/3-airflow_providers_bug_report\.yml$
        require_serial: true
        entry: ./scripts/ci/prek/check_airflow_bug_report_template.py
      - id: check-cncf-k8s-only-for-executors
        name: Check cncf.kubernetes imports used for executors only
        language: python
        files: ^airflow-core/src/airflow/.*\.py$
        require_serial: true
        exclude: >
          (?x)
          ^providers/.*/src/airflow/providers/|
          ^airflow-core/src/airflow/exceptions\.py$|
          ^airflow-core/src/airflow/models/renderedtifields\.py$|
          ^airflow-core/src/airflow/serialization/serialized_objects\.py$|
          ^airflow-core/src/airflow/serialization/serializers/kubernetes\.py$|
          ^airflow-core/src/airflow/utils/sqlalchemy\.py$
        entry: ./scripts/ci/prek/check_airflow_imports.py
            --pattern '^airflow\.providers\.cncf\.kubernetes'
            --message "Only few k8s executors exceptions are allowed to use `airflow.providers.cncf.kubernetes`."
      - id: update-local-yml-file
        name: Update mounts in the local yml file
        entry: ./scripts/ci/prek/local_yml_mounts.py
        language: python
        files: ^dev/breeze/src/airflow_breeze/utils/docker_command_utils\.py$|^scripts/ci/docker_compose/local\.yml$
        pass_filenames: false
      - id: check-extra-packages-references
        name: Checks setup extra packages
        description: Checks if all the extras defined in hatch_build.py are listed in extra-packages-ref.rst file
        language: python
        files: ^airflow-core/docs/extra-packages-ref\.rst$|^hatch_build\.py$
        pass_filenames: false
        entry: ./scripts/ci/prek/check_extra_packages_ref.py
      - id: check-extras-order
        name: Check order of extras in Dockerfile
        entry: ./scripts/ci/prek/check_order_dockerfile_extras.py
        language: python
        files: ^Dockerfile$
        pass_filenames: false
      - id: generate-airflow-diagrams
        name: Generate airflow diagrams
        entry: ./scripts/ci/prek/generate_airflow_diagrams.py
        language: python
        files: >
          (?x)
          ^airflow-core/docs/.*/diagram_[^/]*\.py$|
          ^docs/images/.*\.py$|
          ^airflow-ctl/docs/images/diagrams/.*\.py$
        pass_filenames: true
      - id: prevent-deprecated-sqlalchemy-usage
        name: Prevent deprecated sqlalchemy usage
        entry: ./scripts/ci/prek/prevent_deprecated_sqlalchemy_usage.py
        language: python
        files: >
            (?x)
            ^airflow-ctl.*\.py$|
            ^airflow-core/src/airflow/models/.*\.py$|
            ^task_sdk.*\.py$
        pass_filenames: true
      - id: update-supported-versions
        name: Updates supported versions in documentation
        entry: ./scripts/ci/prek/supported_versions.py
        language: python
        files: ^airflow-core/docs/installation/supported-versions\.rst$|^scripts/ci/prek/supported_versions\.py$|^README\.md$
        pass_filenames: false
      - id: check-revision-heads-map
        name: Check that the REVISION_HEADS_MAP is up-to-date
        language: python
        entry: ./scripts/ci/prek/check_revision_heads_map.py
        pass_filenames: false
        files: >
          (?x)
          ^scripts/ci/prek/version_heads_map\.py$|
          ^airflow-core/src/airflow/migrations/versions/.*$|
          ^airflow-core/src/airflow/migrations/versions|
          ^airflow-core/src/airflow/utils/db\.py$
      - id: update-version
        name: Update versions in docs
        entry: ./scripts/ci/prek/update_versions.py
        language: python
        files: ^docs|^airflow-core/src/airflow/__init__\.py$|.*/pyproject\.toml$
        pass_filenames: false
      - id: check-pydevd-left-in-code
        language: pygrep
        name: Check for pydevd debug statements accidentally left
        entry: "pydevd.*settrace\\("
        pass_filenames: true
        files: \.py$
      - id: check-safe-filter-usage-in-html
        language: pygrep
        name: Don't use safe in templates
        description: the Safe filter is error-prone, use Markup() in code instead
        entry: "\\|\\s*safe"
        files: \.html$
        pass_filenames: true
      - id: check-no-providers-in-core-examples
        language: pygrep
        name: No providers imports in core example DAGs
        description: The core example DAGs have no dependencies other than standard provider or core Airflow
        entry: "^\\s*from airflow\\.providers.(?!standard.)"
        pass_filenames: true
        files: ^airflow-core/src/airflow/example_dags/.*\.py$
      - id: check-urlparse-usage-in-code
        language: pygrep
        name: Don't use urlparse in code
        description: urlparse is not recommended, use urlsplit() in code instead
        entry: "^\\s*from urllib\\.parse import ((\\|, )(urlparse\\|urlunparse))+$"
        pass_filenames: true
        files: \.py$
      - id: check-only-new-session-with-provide-session
        name: Check NEW_SESSION is only used with @provide_session
        language: python
        entry: ./scripts/ci/prek/new_session_in_provide_session.py
        pass_filenames: true
        files: ^airflow-core/src/airflow/.+\.py$
        exclude: ^airflow-core/src/airflow/serialization/pydantic/.*
      - id: check-for-inclusive-language
        language: pygrep
        name: Check for language that we do not accept as community
        description: Please use more appropriate words for community documentation.
        entry: >
          (?ix)
          (black|white)[_-]?list|
          \bshe\b|
          \bhe\b|
          \bher\b|
          \bhis\b|
          \bmaster\b|
          \bslave\b|
          \bsanity\b|
          \bdummy\b
        pass_filenames: true
        exclude: >
          (?x)
          ^airflow-core/docs/.*commits\.rst$|
          ^airflow-core/newsfragments/41368\.significant\.rst$|
          ^airflow-core/newsfragments/41761.significant\.rst$|
          ^airflow-core/newsfragments/43349\.significant\.rst$|
          ^airflow-core/src/airflow/api_fastapi/auth/managers/simple/ui/pnpm-lock\.yaml$|
          ^airflow-core/src/airflow/cli/commands/local_commands/fastapi_api_command\.py$|
          ^airflow-core/src/airflow/config_templates/|
          ^airflow-core/src/airflow/models/baseoperator\.py$|
          ^airflow-core/src/airflow/operators/__init__\.py$|
          ^airflow-core/src/airflow/serialization/serialized_objects\.py$|
          ^airflow-core/src/airflow/ui/openapi-gen/|
          ^airflow-core/src/airflow/ui/pnpm-lock\.yaml$|
          ^airflow-core/src/airflow/ui/public/i18n/locales/de/README\.md$|
          ^airflow-core/src/airflow/ui/src/i18n/config\.ts$|
          ^airflow-core/src/airflow/utils/db\.py$|
          ^airflow-core/src/airflow/utils/trigger_rule\.py$|
          ^airflow-core/tests/|
          ^.*changelog\.(rst|txt)$|
          ^.*CHANGELOG\.(rst|txt)$|
          ^chart/values.schema\.json$|
          ^.*commits\.(rst|txt)$|
          ^.*/conf_constants\.py$|
          ^.*/conf\.py$|
          ^contributing-docs/03_contributors_quick_start\.rst$|
          ^dev/|
          ^devel-common/src/docs/README\.rst$|
          ^devel-common/src/sphinx_exts/removemarktransform\.py|
          ^devel-common/src/tests_common/test_utils/db\.py|
          .*/dist/.*|
          ^docs/apache-airflow-providers-amazon/secrets-backends/aws-ssm-parameter-store\.rst$|
          git|
          ^helm-tests/tests/chart_utils/helm_template_generator\.py$|
          ^helm-tests/tests/chart_utils/ingress-networking-v1beta1\.json$|
          package-lock\.json$|
          ^.*\.(png|gif|jp[e]?g|svg|tgz|lock)$|
          ^\.pre-commit-config\.yaml$|
          ^.*/provider_conf\.py$|
          ^providers/\.pre-commit-config\.yaml$|
          ^providers/amazon/src/airflow/providers/amazon/aws/hooks/emr\.py$|
          ^providers/amazon/src/airflow/providers/amazon/aws/operators/emr\.py$|
          ^providers/apache/cassandra/src/airflow/providers/apache/cassandra/hooks/cassandra\.py$|
          ^providers/apache/hdfs/docs/connections\.rst$|
          ^providers/apache/hive/src/airflow/providers/apache/hive/operators/hive_stats\.py$|
          ^providers/apache/hive/src/airflow/providers/apache/hive/transfers/vertica_to_hive\.py$|
          ^providers/apache/kafka/docs/connections/kafka\.rst$|
          ^providers/apache/spark/docs/decorators/pyspark\.rst$|
          ^providers/apache/spark/src/airflow/providers/apache/spark/decorators/|
          ^providers/apache/spark/src/airflow/providers/apache/spark/hooks/|
          ^providers/apache/spark/src/airflow/providers/apache/spark/operators/|
          ^providers/cncf/kubernetes/docs/operators\.rst$|
          ^providers/common/sql/tests/provider_tests/common/sql/operators/test_sql_execute\.py$|
          ^providers/edge3/src/airflow/providers/edge3/plugins/www/pnpm-lock.yaml$|
          ^providers/exasol/src/airflow/providers/exasol/hooks/exasol\.py$|
          ^providers/fab/docs/auth-manager/webserver-authentication\.rst$|
          ^providers/fab/src/airflow/providers/fab/auth_manager/security_manager/|
          ^providers/fab/src/airflow/providers/fab/www/static/|
          ^providers/fab/src/airflow/providers/fab/www/templates/|
          ^providers/google/docs/operators/cloud/kubernetes_engine\.rst$|
          ^providers/google/src/airflow/providers/google/cloud/hooks/bigquery\.py$|
          ^providers/google/src/airflow/providers/google/cloud/operators/cloud_build\.py$|
          ^providers/google/src/airflow/providers/google/cloud/operators/dataproc\.py$|
          ^providers/google/src/airflow/providers/google/cloud/operators/mlengine\.py$|
          ^providers/keycloak/src/airflow/providers/keycloak/auth_manager/cli/definition.py|
          ^providers/microsoft/azure/docs/connections/azure_cosmos\.rst$|
          ^providers/microsoft/azure/src/airflow/providers/microsoft/azure/hooks/cosmos\.py$|
          ^providers/microsoft/winrm/src/airflow/providers/microsoft/winrm/hooks/winrm\.py$|
          ^providers/microsoft/winrm/src/airflow/providers/microsoft/winrm/operators/winrm\.py$|
          ^providers/opsgenie/src/airflow/providers/opsgenie/hooks/opsgenie\.py$|
          ^providers/redis/src/airflow/providers/redis/provider\.yaml$|
          ^providers/.*/tests/|
          .rat-excludes|
          ^.*RELEASE_NOTES\.rst$|
          ^scripts/ci/docker-compose/integration-keycloak\.yml$|
          ^scripts/ci/docker-compose/keycloak/keycloak-entrypoint\.sh$|
          ^scripts/ci/prek/vendor_k8s_json_schema\.py$
      - id: check-base-operator-partial-arguments
        name: Check BaseOperator and partial() arguments
        language: python
        entry: ./scripts/ci/prek/check_base_operator_partial_arguments.py
        pass_filenames: false
        files: ^airflow-core/src/airflow/models/(?:base|mapped)operator\.py$
      - id: check-template-context-variable-in-sync
        name: Sync template context variable refs
        language: python
        entry: ./scripts/ci/prek/check_template_context_variable_in_sync.py
        files: ^airflow-core/src/airflow/models/taskinstance\.py$|^task-sdk/src/airflow/sdk/definitions/context\.py$|^airflow-core/docs/templates-ref\.rst$
      - id: check-base-operator-usage
        language: pygrep
        name: Check BaseOperator core imports
        description: Make sure BaseOperator is imported from airflow.models.baseoperator in core
        entry: "from airflow\\.models import.* BaseOperator\\b"
        files: \.py$
        pass_filenames: true
        exclude: >
          (?x)
          ^airflow-core/src/airflow/decorators/.*$|
          ^airflow-core/src/airflow/hooks/.*$|
          ^airflow-core/src/airflow/operators/.*$|
          ^providers/.*$
      - id: check-base-operator-usage
        language: pygrep
        name: Check BaseOperatorLink core imports
        description: Make sure BaseOperatorLink is not imported from airflow.models in core
        entry: "^\\s*from airflow\\.models\\.baseoperatorlink import BaseOperatorLink\\b"
        files: \.py$
        pass_filenames: true
        exclude: >
          (?x)
          ^airflow-core/src/airflow/decorators/.*$|
          ^airflow-core/src/airflow/hooks/.*$|
          ^airflow-core/src/airflow/operators/.*$|
          ^providers/.*/src/airflow/providers/.*$|
          ^providers/.*/src/airflow/providers/standard/sensors/.*$
      - id: check-decorated-operator-implements-custom-name
        name: Check @task decorator implements custom_operator_name
        language: python
        entry: ./scripts/ci/prek/decorator_operator_implements_custom_name.py
        pass_filenames: true
        files: ^airflow-core/src/airflow/.*\.py$
      - id: check-core-deprecation-classes
        language: pygrep
        name: Verify usage of Airflow deprecation classes in core
        entry: category=DeprecationWarning|category=PendingDeprecationWarning
        files: \.py$
        exclude: ^airflow-core/src/airflow/configuration\.py$|^airflow-core/tests/.*$|^providers/.*/src/airflow/providers/|^scripts/in_container/verify_providers\.py$|^providers/.*/tests/.*$|^devel-common/
        pass_filenames: true
      - id: check-provide-create-sessions-imports
        language: pygrep
        name: Check session util imports
        description: NEW_SESSION, provide_session, and create_session should be imported from airflow.utils.session to avoid import cycles.
        entry: "from airflow\\.utils\\.db import.* (NEW_SESSION|provide_session|create_session)"
        files: \.py$
        pass_filenames: true
      - id: check-incorrect-use-of-LoggingMixin
        language: pygrep
        name: Make sure LoggingMixin is not used alone
        entry: "LoggingMixin\\(\\)"
        files: \.py$
        pass_filenames: true
      - id: check-start-date-not-used-in-defaults
        language: pygrep
        name: start_date not in default_args
        entry: "default_args\\s*=\\s*{\\s*(\"|')start_date(\"|')|(\"|')start_date(\"|'):"
        files: \.*example_dags.*\.py$
        pass_filenames: true
      - id: check-apache-license-rat
        name: Check if licenses are OK for Apache
        entry: ./scripts/ci/prek/check_license.py
        language: python
        files: ^LICENSE$
        pass_filenames: false
      - id: check-boring-cyborg-configuration
        name: Checks for Boring Cyborg configuration consistency
        language: python
        entry: ./scripts/ci/prek/boring_cyborg.py
        pass_filenames: false
        require_serial: true
      - id: update-in-the-wild-to-be-sorted
        name: Sort INTHEWILD.md alphabetically
        entry: ./scripts/ci/prek/sort_in_the_wild.py
        language: python
        files: ^\.pre-commit-config\.yaml$|^INTHEWILD\.md$
        pass_filenames: false
        require_serial: true
      - id: update-installed-providers-to-be-sorted
        name: Sort and uniquify installed_providers.txt
        entry: ./scripts/ci/prek/sort_installed_providers.py
        language: python
        files: ^\.pre-commit-config\.yaml$|^.*_installed_providers\.txt$
        pass_filenames: false
        require_serial: true
      - id: update-spelling-wordlist-to-be-sorted
        name: Sort spelling_wordlist.txt
        entry: ./scripts/ci/prek/sort_spelling_wordlist.py
        language: python
        files: ^\.pre-commit-config\.yaml$|^docs/spelling_wordlist\.txt$
        require_serial: true
        pass_filenames: false
      - id: shellcheck
        name: Check Shell scripts syntax correctness
        language: docker_image
        entry: koalaman/shellcheck:v0.8.0 -x -a
        files: \.(bash|sh)$|^hooks/build$|^hooks/push$
        exclude: ^dev/breeze/autocomplete/.*$
      - id: compile-ui-assets
        name: Compile ui assets (manual)
        language: node
        stages: ['manual']
        types_or: [javascript, ts, tsx]
        files: ^airflow-core/src/airflow/ui/|^airflow-core/src/airflow/api_fastapi/auth/managers/simple/ui/
        entry: ./scripts/ci/prek/compile_ui_assets.py
        pass_filenames: false
        additional_dependencies: ['pnpm@9.7.1']
      - id: compile-ui-assets-dev
        name: Compile ui assets in dev mode (manual)
        language: node
        stages: ['manual']
        types_or: [javascript, ts, tsx]
        files: ^airflow-core/src/airflow/ui/|^airflow-core/src/airflow/api_fastapi/auth/managers/simple/ui/
        entry: ./scripts/ci/prek/compile_ui_assets_dev.py
        pass_filenames: false
        additional_dependencies: ['pnpm@9.7.1']
      - id: check-integrations-list-consistent
        name: Sync integrations list with docs
        entry: ./scripts/ci/prek/check_integrations_list.py
        language: python
        files: ^scripts/ci/docker-compose/integration-.*\.yml$|^contributing-docs/testing/integration_tests\.rst$
        require_serial: true
        pass_filenames: false
      - id: update-pyproject-toml
        name: Update Airflow's meta-package pyproject.toml
        language: python
        entry: ./scripts/ci/prek/update_airflow_pyproject_toml.py
        files: >
          (?x)
          ^.*/pyproject\.toml$|
          ^scripts/ci/prek/update_airflow_pyproject_toml\.py$|
          ^providers/.*/pyproject\.toml$|
          ^providers/.*/provider\.yaml$
        pass_filenames: false
        require_serial: true
      - id: update-reproducible-source-date-epoch
        name: Update Source Date Epoch for reproducible builds
        language: python
        entry: ./scripts/ci/prek/update_source_date_epoch.py
        files: ^RELEASE_NOTES\.rst$|^chart/RELEASE_NOTES\.rst$
        require_serial: true
      - id: check-breeze-top-dependencies-limited
        name: Check top-level breeze deps
        description: Breeze should have small number of top-level dependencies
        language: python
        entry: ./scripts/tools/check_if_limited_dependencies.py
        files: ^dev/breeze/.*$
        pass_filenames: false
        require_serial: true
      - id: check-tests-in-the-right-folders
        name: Check if tests are in the right folders
        entry: ./scripts/ci/prek/check_tests_in_right_folders.py
        language: python
        files: ^airflow-core/tests/.*\.py$
        pass_filenames: true
        require_serial: true
      - id: check-system-tests-present
        name: Check if system tests have required segments of code
        entry: ./scripts/ci/prek/check_system_tests.py
        language: python
        files: ^.*/tests/system/.*/example_[^/]*\.py$
        pass_filenames: true
      - id: generate-pypi-readme
        name: Generate PyPI README
        entry: ./scripts/ci/prek/generate_pypi_readme.py
        language: python
        files: ^README\.md$
        pass_filenames: false
      - id: lint-markdown
        name: Run markdownlint
        description: Checks the style of Markdown files.
        entry: markdownlint
        language: node
        types: [markdown]
        files: \.(md|mdown|markdown)$
        additional_dependencies: ['markdownlint-cli@0.38.0']
      - id: lint-json-schema
        name: Lint JSON Schema files
        entry: ./scripts/ci/prek/lint_json_schema.py
        args:
          - --spec-file
          - scripts/ci/prek/draft7_schema.json
        language: python
        pass_filenames: true
        files: .*\.schema\.json$
        require_serial: true
      - id: lint-json-schema
        name: Lint NodePort Service
        entry: ./scripts/ci/prek/lint_json_schema.py
        args:
          - --spec-url
          - https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/v1.20.2-standalone/service-v1.json
        language: python
        pass_filenames: true
        files: ^scripts/ci/kubernetes/nodeport\.yaml$
        require_serial: true
      - id: lint-json-schema
        name: Lint Docker compose files
        entry: ./scripts/ci/prek/lint_json_schema.py
        args:
          - --spec-url
          - https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
        language: python
        pass_filenames: true
        files: ^scripts/ci/docker-compose/.+\.ya?ml$|docker-compose\.ya?ml$
        exclude: >
          (?x)
          ^scripts/ci/docker-compose/grafana/.|
          ^scripts/ci/docker-compose/gremlin/.|
          ^scripts/ci/docker-compose/.+-config\.ya?ml$
        require_serial: true
      - id: lint-json-schema
        name: Lint config_templates/config.yml
        entry: ./scripts/ci/prek/lint_json_schema.py
        args:
          - --spec-file
          - airflow-core/src/airflow/config_templates/config.yml.schema.json
        language: python
        pass_filenames: true
        files: ^airflow-core/src/airflow/config_templates/config\.yml$
        require_serial: true
      - id: check-persist-credentials-disabled-in-github-workflows
        name: Check persistent creds in workflow files
        description: Check that workflow files have persist-credentials disabled
        entry: ./scripts/ci/prek/checkout_no_credentials.py
        language: python
        pass_filenames: true
        files: ^\.github/workflows/.*\.yml$
      - id: check-docstring-param-types
        name: Check that docstrings do not specify param types
        entry: ./scripts/ci/prek/docstring_param_type.py
        language: python
        pass_filenames: true
        files: \.py$
      - id: check-zip-file-is-not-committed
        name: Check no zip files are committed
        description: Zip files are not allowed in the repository
        language: fail
        entry: |
          Zip files are not allowed in the repository as they are hard to
          track and have security implications. Please remove the zip file from the repository.
        files: \.zip$
      - id: check-code-deprecations
        name: Check deprecations categories in decorators
        entry: ./scripts/ci/prek/check_deprecations.py
        language: python
        pass_filenames: true
        files: ^airflow-core/src/airflow/.*\.py$
      - id: update-inlined-dockerfile-scripts
        name: Inline Dockerfile and Dockerfile.ci scripts
        entry: ./scripts/ci/prek/inline_scripts_in_docker.py
        language: python
        pass_filenames: false
        files: ^Dockerfile$|^Dockerfile\.ci$|^scripts/docker/.*$
        require_serial: true
      - id: check-changelog-has-no-duplicates
        name: Check changelogs for duplicate entries
        language: python
        files: changelog\.(rst|txt)$
        entry: ./scripts/ci/prek/changelog_duplicates.py
        pass_filenames: true
      - id: check-changelog-format
        name: Check changelog format
        language: python
        files: changelog\.(rst|txt)$
        entry: ./scripts/ci/prek/check_changelog_format.py
        pass_filenames: true
      - id: check-newsfragments-are-valid
        name: Check newsfragments are valid
        language: python
        files: newsfragments/.*\.rst$
        entry: ./scripts/ci/prek/newsfragments.py
        pass_filenames: true
        # We sometimes won't have newsfragments in the repo, so always run it so `check-hooks-apply` passes
        # This is fast, so not too much downside
        always_run: true
      - id: check-significant-newsfragments-are-valid
        name: Check significant newsfragments are valid
        # Significant newsfragments follows a special format so that we can group information easily.
        language: python
        files: ^airflow-core/newsfragments/.*\.rst$
        entry: ./scripts/ci/prek/significant_newsfragments_checker.py
        pass_filenames: false
        # We sometimes won't have newsfragments in the repo, so always run it so `check-hooks-apply` passes
        # This is fast, so not too much downside
        always_run: true
      - id: update-breeze-cmd-output
        name: Update breeze docs
        description: Update output of breeze commands in Breeze documentation
        entry: ./scripts/ci/prek/breeze_cmd_line.py
        language: python
        files: >
          (?x)
          ^dev/breeze/.*$|
          ^\.pre-commit-config\.yaml$|
          ^scripts/ci/prek/breeze_cmd_line\.py$|
          ^generated/provider_dependencies\.json$
        require_serial: true
        pass_filenames: false
      - id: check-example-dags-urls
        name: Check that example dags url include provider versions
        entry: ./scripts/ci/prek/update_example_dags_paths.py
        language: python
        pass_filenames: true
        files: ^airflow-core/docs/.*example-dags\.rst$|^docs/.*index\.rst$^airflow-core/docs/.*index\.rst$
        always_run: true
      - id: check-lazy-logging
        name: Check that all logging methods are lazy
        entry: ./scripts/ci/prek/check_lazy_logging.py
        language: python
        pass_filenames: true
        files: \.py$
      - id: create-missing-init-py-files-tests
        name: Create missing init.py files in tests
        entry: ./scripts/ci/prek/check_init_in_tests.py
        language: python
        pass_filenames: false
        files: ^airflow-core/tests/.*\.py$
      - id: check-tests-unittest-testcase
        name: Unit tests do not inherit from unittest.TestCase
        description: Check that unit tests do not inherit from unittest.TestCase
        entry: ./scripts/ci/prek/unittest_testcase.py
        language: python
        pass_filenames: true
        files: ^airflow-core/tests/.*\.py$
      - id: bandit
        name: bandit
        description: "Bandit is a tool for finding common security issues in Python code"
        entry: bandit
        language: python
        language_version: python3
        types: [python]
        additional_dependencies: ['bandit==1.7.6']
        require_serial: true
        files: ^airflow-core/src/airflow/.*
        exclude:
          airflow/example_dags/.*
        args:
          - "--skip"
          - "B101,B301,B324,B403,B404,B603"
          - "--severity-level"
          - "high"  # TODO: remove this line when we fix all the issues
      - id: check-no-fab-migrations
        language: pygrep
        name: Check no migration is done on FAB related table
        description: >
          FAB tables are no longer used in core Airflow but in FAB provider.
          As such, it is forbidden to create migrations related to FAB tables in core Airflow.
          Such migrations should be in FAB provider. To achieve this, a new capability must be implemented:
          support migrations for providers. In other words, providers need to be able to specify migrations
          so that, any FAB related migration (besides the legacy ones) is defined in FAB provider.
          See https://github.com/apache/airflow/issues/32210
        entry: >
          (?ix)
          \bab_permission\b|
          \bab_view_menu\b|
          \bab_role\b|
          \bab_permission_view\b|
          \bab_permission_view_role\b|
          \bab_user\b|
          \bab_user_role\b|
          \bab_register_user\b
        pass_filenames: true
        files: ^airflow-core/src/airflow/migrations/versions/.*\.py$
        exclude:
          ^airflow-core/src/airflow/migrations/versions/0028_3_0_0_drop_ab_user_id_foreign_key.py$
      - id: ts-compile-lint-ui
        name: Compile / format / lint UI
        description: TS types generation / ESLint / Prettier new UI files
        language: node
        files: |
          (?x)
          ^airflow-core/src/airflow/ui/.*\.(js|ts|tsx|yaml|css|json)$|
          ^airflow-core/src/airflow/api_fastapi/core_api/openapi/.*\.yaml$|
          ^airflow-core/src/airflow/api_fastapi/auth/managers/simple/openapi/v1.*\.yaml$
        exclude: |
          (?x)
          ^airflow-core/src/airflow/ui/node-modules/.*|
          ^airflow-core/src/airflow/ui/.pnpm-store
        entry: ./scripts/ci/prek/ts_compile_lint_ui.py
        additional_dependencies: ['pnpm@9.7.1']
        pass_filenames: true
        require_serial: true
      - id: ts-compile-lint-simple-auth-manager-ui
        name: Compile / format / lint simple auth manager UI
        description: TS types generation / ESLint / Prettier new UI files
        language: node
        files: |
          (?x)
          ^airflow-core/src/airflow/api_fastapi/auth/managers/simple/ui/.*\.(js|ts|tsx|yaml|css|json)$|
          ^airflow-core/src/airflow/api_fastapi/core_api/openapi/.*\.yaml$|
          ^airflow-core/src/airflow/api_fastapi/auth/managers/simple/openapi/.*\.yaml$
        exclude: |
          (?x)
          ^airflow-core/src/airflow/api_fastapi/node-modules/.*|
          ^airflow-core/src/airflow/api_fastapi/.pnpm-store
        entry: ./scripts/ci/prek/ts_compile_lint_simple_auth_manager_ui.py
        additional_dependencies: ['pnpm@9.7.1']
        pass_filenames: true
        require_serial: true
        ## ADD MOST PREK HOOK ABOVE THAT LINE
        # The below prek hooks are those requiring CI image to be built
      - id: mypy-dev
        stages: ['pre-push']
        name: Run mypy for dev
        language: python
        entry: ./scripts/ci/prek/mypy.py
        files: ^dev/.*\.py$|^scripts/.*\.py$
        require_serial: true
      - id: mypy-dev
        stages: ['manual']
        name: Run mypy for dev (manual)
        language: python
        entry: ./scripts/ci/prek/mypy_folder.py dev
        pass_filenames: false
        files: ^.*\.py$
        require_serial: true
      - id: mypy-airflow-core
        stages: ['pre-push']
        name: Run mypy for airflow-core
        language: python
        entry: ./scripts/ci/prek/mypy.py
        files: ^airflow-core/.*\.py$
        require_serial: true
      - id: mypy-airflow-core
        stages: ['manual']
        name: Run mypy for airflow-core (manual)
        language: python
        entry: ./scripts/ci/prek/mypy_folder.py airflow-core
        pass_filenames: false
        files: ^airflow-core/.*\.py$
        require_serial: true
      - id: mypy-devel-common
        stages: ['pre-push']
        name: Run mypy for devel-common
        language: python
        entry: ./scripts/ci/prek/mypy.py
        files: ^devel-common/.*\.py$
        require_serial: true
      - id: mypy-devel-common
        stages: ['manual']
        name: Run mypy for devel-common (manual)
        language: python
        entry: ./scripts/ci/prek/mypy_folder.py devel-common
        pass_filenames: false
        files: ^.*\.py$
        require_serial: true
      - id: mypy-airflow-ctl
        stages: ['pre-push']
        name: Run mypy for airflow-ctl
        language: python
        entry: ./scripts/ci/prek/mypy.py
        files: ^airflow-ctl/src/airflowctl/.*\.py$|^airflow-ctl/tests/.*\.py$
        exclude: .*generated.py
        require_serial: true
      - id: mypy-airflow-ctl
        stages: ['manual']
        name: Run mypy for airflow-ctl (manual)
        language: python
        entry: ./scripts/ci/prek/mypy_folder.py airflow-ctl
        pass_filenames: false
        files: ^.*\.py$
        require_serial: true
      - id: generate-openapi-spec
        name: Generate the FastAPI API spec
        language: python
        entry: ./scripts/ci/prek/generate_openapi_spec.py
        pass_filenames: false
        files: ^airflow-core/src/airflow/api_fastapi/.*\.py$|^airflow-core/src/airflow/api_fastapi/auth/managers/simple/.*\.py$
        exclude: ^airflow-core/src/airflow/api_fastapi/execution_api/.*
      - id: check-i18n-json
        name: Check i18n files validity
        description: Check i18n files are valid json, have no TODOs, and auto-format them
        language: python
        files: ^airflow-core/src/airflow/ui/public/i18n/locales/.*\.json$
        entry: ./scripts/ci/prek/check_i18n_json.py
        pass_filenames: false
      - id: check-template-fields-valid
        name: Check templated fields mapped in operators/sensors
        language: python
        entry: ./scripts/ci/prek/check_template_fields.py
        files: ^(providers/.*/)?airflow-core/.*/(sensors|operators)/.*\.py$
        require_serial: true
      - id: update-migration-references
        name: Update migration ref doc
        language: python
        entry: ./scripts/ci/prek/migration_reference.py
        pass_filenames: false
        files: ^airflow-core/src/airflow/migrations/versions/.*\.py$|^airflow-core/docs/migrations-ref\.rst$
      - id: generate-tasksdk-datamodels
        name: Generate Datamodels for TaskSDK client
        language: python
        entry: uv run -p 3.12 --no-progress --active --group codegen --project apache-airflow-task-sdk --directory task-sdk -s dev/generate_task_sdk_models.py
        pass_filenames: false
        files: ^airflow-core/src/airflow/api_fastapi/execution_api/.*\.py$
        require_serial: true
      - id: generate-airflowctl-datamodels
        name: Generate Datamodels for AirflowCTL
        language: python
        entry: >
          bash -c '
          uv run -p 3.12 --no-dev --no-progress --active --group codegen --project apache-airflow-ctl --directory airflow-ctl/ datamodel-codegen &&
           uv run -p 3.12 --no-dev --no-progress --active --group codegen --project apache-airflow-ctl --directory airflow-ctl/ datamodel-codegen --input="../airflow-core/src/airflow/api_fastapi/auth/managers/simple/openapi/v2-simple-auth-manager-generated.yaml" --output="src/airflowctl/api/datamodels/auth_generated.py"'
        pass_filenames: false
        files: ^airflow-core/src/airflow/api_fastapi/core_api/datamodels/.*\.py$|^airflow-core/src/airflow/api_fastapi/auth/managers/simple/(datamodels|routes|services|openapi)/.*\.py$
        require_serial: true
      - id: update-er-diagram
        name: Update ER diagram
        language: python
        entry: ./scripts/ci/prek/update_er_diagram.py
        pass_filenames: false
        files: ^airflow-core/src/airflow/migrations/versions/.*\.py$|^airflow-core/docs/migrations-ref\.rst$
      - id: check-default-configuration
        name: Check the default configuration
        entry: ./scripts/ci/prek/check_default_configuration.py
        language: python
        require_serial: true
        pass_filenames: false
        files: ^airflow-core/src/airflow/config_templates/config\.yml$
      - id: generate-airflowctl-help-images
        name: Generate SVG from Airflow CTL Commands
        entry: ./scripts/ci/prek/capture_airflowctl_help.py
        language: python
        pass_filenames: false
        files:
          ^airflow-ctl/src/airflowctl/ctl/cli_config.py$|airflow-ctl/src/airflowctl/api/operations.py|airflow-ctl/src/airflowctl/ctl/commands/.*\.py
      - id: check-airflow-version-checks-in-core
        language: pygrep
        name: No AIRFLOW_V_* imports in airflow-core
        entry: "import AIRFLOW_V_"
        files: ^airflow-core/.*\.py$
        pass_filenames: true
         # TODO (@amoghrajesh): revisit last few in this list as they all rely on versioned secrets masker imports
        exclude: >
          (?x)
          ^airflow-core/tests/integration/otel/dags/otel_test_dag_with_pause_between_tasks\.py$|
          ^airflow-core/tests/integration/otel/dags/otel_test_dag_with_pause_in_task\.py$|
          ^airflow-core/tests/integration/otel/test_otel\.py$|
          ^airflow-core/tests/unit/core/test_configuration\.py$|
          ^airflow-core/tests/unit/models/test_renderedtifields\.py$|
          ^airflow-core/tests/unit/models/test_variable\.py$
      - id: check-sdk-imports
        name: Check for SDK imports in core files
        entry: ./scripts/ci/prek/check_sdk_imports.py
        language: python
        types: [python]
        files: ^airflow-core/src/airflow/
        exclude: |
          (?x)
          # Allow SDK imports in these legitimate locations
          ^airflow-core/src/airflow/example_dags/.*\.py$|

          # TODO: These files need to be refactored to remove SDK coupling
          ^airflow-core/src/airflow/__init__\.py$|
          ^airflow-core/src/airflow/api/common/mark_tasks\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/datamodels/assets\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/datamodels/connections\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/datamodels/hitl\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/datamodels/variables\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/routes/ui/grid\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/routes/ui/structure\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/services/public/connections\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/services/ui/connections\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/services/ui/grid\.py$|
          ^airflow-core/src/airflow/api_fastapi/core_api/services/ui/task_group.py$|
          ^airflow-core/src/airflow/api_fastapi/execution_api/routes/hitl\.py$|
          ^airflow-core/src/airflow/api_fastapi/execution_api/routes/task_instances\.py$|
          ^airflow-core/src/airflow/api_fastapi/logging/decorators\.py$|
          ^airflow-core/src/airflow/assets/evaluation\.py$|
          ^airflow-core/src/airflow/assets/manager\.py$|
          ^airflow-core/src/airflow/cli/commands/connection_command\.py$|
          ^airflow-core/src/airflow/cli/commands/task_command\.py$|
          ^airflow-core/src/airflow/cli/commands/triggerer_command.py$|
          ^airflow-core/src/airflow/configuration\.py$|
          ^airflow-core/src/airflow/dag_processing/collection\.py$|
          ^airflow-core/src/airflow/dag_processing/manager\.py$|
          ^airflow-core/src/airflow/dag_processing/processor\.py$|
          ^airflow-core/src/airflow/dag_processing/dagbag\.py$|
          ^airflow-core/src/airflow/datasets/metadata\.py$|
          ^airflow-core/src/airflow/exceptions\.py$|
          ^airflow-core/src/airflow/executors/local_executor\.py$|
          ^airflow-core/src/airflow/jobs/triggerer_job_runner\.py$|
          ^airflow-core/src/airflow/lineage/hook\.py$|
          ^airflow-core/src/airflow/listeners/spec/asset\.py$|
          ^airflow-core/src/airflow/listeners/spec/taskinstance\.py$|
          ^airflow-core/src/airflow/logging/remote\.py$|
          ^airflow-core/src/airflow/models/__init__\.py$|
          ^airflow-core/src/airflow/models/asset\.py$|
          ^airflow-core/src/airflow/models/baseoperator\.py$|
          ^airflow-core/src/airflow/models/callback\.py$|
          ^airflow-core/src/airflow/models/connection\.py$|
          ^airflow-core/src/airflow/models/dag\.py$|
          ^airflow-core/src/airflow/models/dagrun\.py$|
          ^airflow-core/src/airflow/models/deadline\.py$|
          ^airflow-core/src/airflow/models/expandinput\.py$|
          ^airflow-core/src/airflow/models/mappedoperator\.py$|
          ^airflow-core/src/airflow/models/operator\.py$|
          ^airflow-core/src/airflow/models/param\.py$|
          ^airflow-core/src/airflow/models/renderedtifields\.py$|
          ^airflow-core/src/airflow/models/serialized_dag\.py$|
          ^airflow-core/src/airflow/models/taskinstance\.py$|
          ^airflow-core/src/airflow/models/taskinstancekey\.py$|
          ^airflow-core/src/airflow/models/taskmap\.py$|
          ^airflow-core/src/airflow/models/taskmixin\.py$|
          ^airflow-core/src/airflow/models/taskreschedule\.py$|
          ^airflow-core/src/airflow/models/variable\.py$|
          ^airflow-core/src/airflow/models/xcom\.py$|
          ^airflow-core/src/airflow/models/xcom_arg\.py$|
          ^airflow-core/src/airflow/operators/subdag\.py$|
          ^airflow-core/src/airflow/plugins_manager\.py$|
          ^airflow-core/src/airflow/providers_manager\.py$|
          ^airflow-core/src/airflow/secrets/__init__.py$|
          ^airflow-core/src/airflow/serialization/definitions/[_a-z]+\.py$|
          ^airflow-core/src/airflow/serialization/enums\.py$|
          ^airflow-core/src/airflow/serialization/helpers\.py$|
          ^airflow-core/src/airflow/serialization/serialized_objects\.py$|
          ^airflow-core/src/airflow/settings\.py$|
          ^airflow-core/src/airflow/task/task_runner/bash_task_runner\.py$|
          ^airflow-core/src/airflow/task/task_runner/standard_task_runner\.py$|
          ^airflow-core/src/airflow/ti_deps/deps/mapped_task_upstream_dep\.py$|
          ^airflow-core/src/airflow/ti_deps/deps/prev_dagrun_dep\.py$|
          ^airflow-core/src/airflow/ti_deps/deps/trigger_rule_dep\.py$|
          ^airflow-core/src/airflow/timetables/assets\.py$|
          ^airflow-core/src/airflow/timetables/base\.py$|
          ^airflow-core/src/airflow/timetables/simple\.py$|
          ^airflow-core/src/airflow/utils/cli\.py$|
          ^airflow-core/src/airflow/utils/context\.py$|
          ^airflow-core/src/airflow/utils/dag_cycle_tester\.py$|
          ^airflow-core/src/airflow/utils/dag_edges\.py$|
          ^airflow-core/src/airflow/utils/dag_parsing_context\.py$|
          ^airflow-core/src/airflow/utils/decorators\.py$|
          ^airflow-core/src/airflow/utils/dot_renderer\.py$|
          ^airflow-core/src/airflow/utils/edgemodifier\.py$|
          ^airflow-core/src/airflow/utils/email\.py$|
          ^airflow-core/src/airflow/utils/helpers\.py$|
          ^airflow-core/src/airflow/utils/operator_helpers\.py$|
          ^airflow-core/src/airflow/utils/session\.py$|
          ^airflow-core/src/airflow/utils/task_group\.py$|
          ^airflow-core/src/airflow/utils/trigger_rule\.py$|
          ^airflow-core/src/airflow/utils/types\.py$
        ## ONLY ADD PREK HOOKS HERE THAT REQUIRE CI IMAGE
      - id: check-schema-defaults
        name: Check schema defaults match server-side defaults
        entry: ./scripts/ci/prek/check_schema_defaults.py
        language: python
        files: ^airflow-core/src/airflow/serialization/schema\.json$|^airflow-core/src/airflow/serialization/serialized_objects\.py$
        pass_filenames: false
        require_serial: true
      - id: check-contextmanager-class-decorators
        name: Check for problematic context manager class decorators
        entry: ./scripts/ci/prek/check_contextmanager_class_decorators.py
        language: python
        files: .*test.*\.py$
        pass_filenames: true
