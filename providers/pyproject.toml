# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "local-providers"
version = "0.1.0"
description = "Placeholder package for local/from-sources providers."
requires-python = ">=3.8, <3.13"
classifiers = [
    "Private :: Do Not Upload",
]

[tool.hatch.publish.index]
# Lets make doubly sure this never goes to PyPi
disable = true

[tool.hatch.build.targets.wheel]
packages = ["src/airflow"]
exclude = [
  ".gitignore",
  ".latest-doc-only-change.txt",
  "CHANGELOG.rst",
  "MANAGING_PROVIDERS_LIFECYCLE.rst",
]

[tool.ruff]
extend = "../pyproject.toml"
src = ["src"]
namespace-packages = ["src/airflow/providers"]
extend-exclude = [
    # The files generated by stubgen aren't 100% valid syntax it turns out, and we don't ship them, so we can
    # ignore them in ruff
    "src/airflow/providers/common/sql/*/*.pyi",
]

[tool.ruff.lint.per-file-ignores]

# Ignore Doc rules et al for anything outside of tests
"!src/*" = ["D", "TID253", "S101", "TRY002"]

# All of the modules which have an extra license header (i.e. that we copy from another project) need to
# ignore E402 -- module level import not at top level
"tests/amazon/aws/auth_manager/security_manager/test_aws_security_manager_override.py" = ["E402"]
"tests/common/io/xcom/test_backend.py" = ["E402"]
"tests/elasticsearch/log/elasticmock/__init__.py" = ["E402"]
"tests/elasticsearch/log/elasticmock/utilities/__init__.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_batch_prediction_job.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_hyperparameter_tuning_job.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_auto_ml.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_custom_job.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_dataset.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_endpoint_service.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_generative_model.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_model_service.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_pipeline_job.py" = ["E402"]
"tests/google/cloud/hooks/vertex_ai/test_prediction_service.py" = ["E402"]
"tests/google/cloud/links/test_translate.py" = ["E402"]
"tests/google/cloud/operators/test_automl.py"= ["E402"]
"tests/google/cloud/operators/test_vertex_ai.py" = ["E402"]
"tests/google/cloud/operators/vertex_ai/test_generative_model.py" = ["E402"]
"tests/google/cloud/triggers/test_vertex_ai.py" = ["E402"]
"tests/openai/hooks/test_openai.py" = ["E402"]
"tests/openai/operators/test_openai.py" = ["E402"]
"tests/openai/triggers/test_openai.py" = ["E402"]
"tests/opensearch/conftest.py" = ["E402"]
"tests/opensearch/hooks/test_opensearch.py" = ["E402"]
"tests/opensearch/log/test_os_json_formatter.py" = ["E402"]
"tests/opensearch/log/test_os_response.py" = ["E402"]
"tests/opensearch/log/test_os_task_handler.py" = ["E402"]
"tests/opensearch/operators/test_opensearch.py" = ["E402"]
"tests/qdrant/hooks/test_qdrant.py" = ["E402"]
"tests/qdrant/operators/test_qdrant.py" = ["E402"]
"tests/snowflake/operators/test_snowflake_sql.py" = ["E402"]
"tests/yandex/**/*.py" = ["E402"]
