[
  {
    "eventType": "START",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "airflowDagRun": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag",
      "facets": {
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "DAG",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        },
        "documentation": {
          "description": "OpenLineage complex DAG description",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/DocumentationJobFacet.json\\#\\/\\$defs\\/DocumentationJobFacet\") }}"
        },
        "ownership": {
          "owners": [
              {
                  "name": "airflow"
              },
              {
                  "name": "owner\"1"
              },
              {
                  "name": "owner'2"
              },
              {
                  "name": "owner3"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "airflow": {
          "taskGroups": {
            "section_1": {
              "ui_color": "CornflowerBlue",
              "ui_fgcolor": "#000",
              "ui_label": "section_1"
            },
            "section_1.section_2": {
              "parent_group": "section_1",
              "ui_color": "CornflowerBlue",
              "ui_fgcolor": "#000",
              "ui_label": "section_2"
            },
            "section_1.section_2.section_3": {
              "parent_group": "section_1.section_2",
              "ui_color": "CornflowerBlue",
              "ui_fgcolor": "#000",
              "ui_label": "section_3"
            }
          },
          "taskTree": {},
          "tasks": {
            "section_1.section_2.section_3.task_7": {
              "downstream_task_ids": [
                "check_events_number"
              ],
              "emits_ol_events": "{{ result == true }}",
              "is_setup": false,
              "is_teardown": false,
              "operator": "airflow.providers.standard.operators.python.PythonOperator",
              "task_group": "section_1.section_2.section_3",
              "ui_color": "#ffefeb",
              "ui_fgcolor": "#000",
              "ui_label": "task_7"
            },
            "section_1.section_2.task_6": {
              "downstream_task_ids": [
                "check_events_number"
              ],
              "emits_ol_events": "{{ result == true }}",
              "is_setup": false,
              "is_teardown": false,
              "operator": "airflow.providers.standard.operators.empty.EmptyOperator",
              "task_group": "section_1.section_2",
              "ui_color": "#e8f7e4",
              "ui_fgcolor": "#000",
              "ui_label": "task_6"
            },
            "section_1.task_5": {
              "downstream_task_ids": [
                "section_1.section_2.task_6"
              ],
              "emits_ol_events": "{{ result == true }}",
              "is_setup": false,
              "is_teardown": false,
              "operator": "airflow.providers.standard.operators.python.PythonOperator",
              "task_group": "section_1",
              "ui_color": "#ffefeb",
              "ui_fgcolor": "#000",
              "ui_label": "task_5"
            },
            "task_0": {
              "downstream_task_ids": [],
              "emits_ol_events": false,
              "is_setup": false,
              "is_teardown": false,
              "operator": "airflow.providers.standard.operators.empty.EmptyOperator",
              "ui_color": "#e8f7e4",
              "ui_fgcolor": "#000",
              "ui_label": "task_0"
            },
            "task_1.id.with.dots": {
              "downstream_task_ids": "{{ result | sort == ['section_1.section_2.section_3.task_7', 'task_2'] }}",
              "emits_ol_events": "{{ result == true }}",
              "is_setup": false,
              "is_teardown": false,
              "operator": "airflow.providers.standard.operators.bash.BashOperator",
              "ui_color": "#f0ede4",
              "ui_fgcolor": "#000",
              "ui_label": "task_1.id.with.dots"
            },
            "task_2": {
              "downstream_task_ids": "{{ result | sort == ['check_events_number', 'task_3'] }}",
              "emits_ol_events": "{{ result == true }}",
              "is_setup": false,
              "is_teardown": false,
              "operator": "airflow.providers.standard.operators.python.PythonOperator",
              "ui_color": "#ffefeb",
              "ui_fgcolor": "#000",
              "ui_label": "task_2"
            },
            "task_3": {
              "downstream_task_ids": "{{ result | sort == ['section_1.task_5', 'task_4'] }}",
              "emits_ol_events": "{{ result == true }}",
              "is_setup": false,
              "is_teardown": false,
              "operator": "airflow.providers.standard.operators.empty.EmptyOperator",
              "ui_color": "#e8f7e4",
              "ui_fgcolor": "#000",
              "ui_label": "task_3"
            },
            "task_4": {
              "downstream_task_ids": [
                "section_1.section_2.task_6"
              ],
              "emits_ol_events": "{{ result == true }}",
              "is_setup": false,
              "is_teardown": false,
              "operator": "{{ result.endswith('openlineage_base_complex_dag.SomeCustomOperator') }}",
              "ui_color": "#f0ede4",
              "ui_fgcolor": "#000",
              "ui_label": "task_4"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/JobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "START",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "depends_on_past": false,
            "downstream_task_ids": "{{ 'task_2' in result and 'section_1.section_2.section_3.task_7' in result }}",
            "execution_timeout": "456.0 seconds",
            "executor_config": {},
            "ignore_first_depends_on_past": false,
            "inlets": "[]",
            "mapped": false,
            "multiple_outputs": false,
            "operator_class": "BashOperator",
            "operator_class_path": "airflow.providers.standard.operators.bash.BashOperator",
            "outlets": "[]",
            "owner": "owner'2",
            "priority_weight": 1,
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_id": "task_1.id.with.dots",
            "trigger_rule": "all_success",
            "upstream_task_ids": "[]",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.task_1.id.with.dots",
      "facets": {
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        },
        "documentation": {
          "description": "OpenLineage complex DAG description",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/DocumentationJobFacet.json\\#\\/\\$defs\\/DocumentationJobFacet\") }}"
        },
        "ownership": {
          "owners": [
              {
                  "name": "owner'2"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "sourceCode": {
          "language": "bash",
          "sourceCode": "exit 0;",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/SourceCodeJobFacet.json\\#\\/\\$defs\\/SourceCodeJobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "COMPLETE",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "depends_on_past": false,
            "downstream_task_ids": "{{ 'task_2' in result and 'section_1.section_2.section_3.task_7' in result }}",
            "execution_timeout": "456.0 seconds",
            "executor_config": {},
            "ignore_first_depends_on_past": false,
            "inlets": "[]",
            "mapped": false,
            "multiple_outputs": false,
            "operator_class": "BashOperator",
            "operator_class_path": "airflow.providers.standard.operators.bash.BashOperator",
            "outlets": "[]",
            "owner": "owner'2",
            "priority_weight": 1,
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_id": "task_1.id.with.dots",
            "trigger_rule": "all_success",
            "upstream_task_ids": "[]",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.task_1.id.with.dots",
      "facets": {
        "ownership": {
          "owners": [
              {
                  "name": "owner'2"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "START",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "depends_on_past": false,
            "downstream_task_ids": "{{ 'task_3' in result and 'check_events_number' in result }}",
            "executor_config": {},
            "ignore_first_depends_on_past": false,
            "inlets": "[{'uri': 's3://bucket2/dir2/file2.txt', 'extra': {}}]",
            "mapped": false,
            "max_retry_delay": "42.0 seconds",
            "multiple_outputs": false,
            "operator_class": "PythonOperator",
            "operator_class_path": "airflow.providers.standard.operators.python.PythonOperator",
            "outlets": "[]",
            "owner": "airflow",
            "priority_weight": 1,
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_id": "task_2",
            "trigger_rule": "all_success",
            "upstream_task_ids": "['task_1.id.with.dots']",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.task_2",
      "facets": {
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        },
        "documentation": {
          "description": "OpenLineage complex DAG description",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/DocumentationJobFacet.json\\#\\/\\$defs\\/DocumentationJobFacet\") }}"
        },
        "ownership": {
          "owners": [
              {
                  "name": "airflow"
              },
              {
                  "name": "owner\"1"
              },
              {
                  "name": "owner'2"
              },
              {
                  "name": "owner3"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "sourceCode": {
          "language": "python",
          "sourceCode": "def do_nothing():\n    pass\n",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/SourceCodeJobFacet.json\\#\\/\\$defs\\/SourceCodeJobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "COMPLETE",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "depends_on_past": false,
            "downstream_task_ids": "{{ 'task_3' in result and 'check_events_number' in result }}",
            "executor_config": {},
            "ignore_first_depends_on_past": false,
            "inlets": "[{'uri': 's3://bucket2/dir2/file2.txt', 'extra': {}}]",
            "mapped": false,
            "max_retry_delay": "42.0 seconds",
            "multiple_outputs": false,
            "operator_class": "PythonOperator",
            "operator_class_path": "airflow.providers.standard.operators.python.PythonOperator",
            "outlets": "[]",
            "owner": "airflow",
            "priority_weight": 1,
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_id": "task_2",
            "trigger_rule": "all_success",
            "upstream_task_ids": "['task_1.id.with.dots']",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.task_2",
      "facets": {
        "ownership": {
          "owners": [
              {
                  "name": "airflow"
              },
              {
                  "name": "owner\"1"
              },
              {
                  "name": "owner'2"
              },
              {
                  "name": "owner3"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "START",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "depends_on_past": false,
            "downstream_task_ids": "{{ 'task_4' in result and 'section_1.task_5' in result }}",
            "executor_config": {},
            "ignore_first_depends_on_past": false,
            "inlets": "[]",
            "mapped": false,
            "multiple_outputs": false,
            "operator_class": "EmptyOperator",
            "operator_class_path": "airflow.providers.standard.operators.empty.EmptyOperator",
            "outlets": "[{'uri': 's3://bucket/dir/file.txt', 'extra': {}}]",
            "owner": "airflow",
            "priority_weight": 1,
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_id": "task_3",
            "trigger_rule": "all_success",
            "upstream_task_ids": "['task_2']",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.task_3",
      "facets": {
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        },
        "documentation": {
          "description": "OpenLineage complex DAG description",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/DocumentationJobFacet.json\\#\\/\\$defs\\/DocumentationJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "ownership": {
          "owners": [
              {
                  "name": "airflow"
              },
              {
                  "name": "owner\"1"
              },
              {
                  "name": "owner'2"
              },
              {
                  "name": "owner3"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "COMPLETE",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "depends_on_past": false,
            "downstream_task_ids": "{{ 'task_4' in result and 'section_1.task_5' in result }}",
            "executor_config": {},
            "ignore_first_depends_on_past": false,
            "inlets": "[]",
            "mapped": false,
            "multiple_outputs": false,
            "operator_class": "EmptyOperator",
            "operator_class_path": "airflow.providers.standard.operators.empty.EmptyOperator",
            "outlets": "[{'uri': 's3://bucket/dir/file.txt', 'extra': {}}]",
            "owner": "airflow",
            "priority_weight": 1,
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_id": "task_3",
            "trigger_rule": "all_success",
            "upstream_task_ids": "['task_2']",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.task_3",
      "facets": {
        "ownership": {
          "owners": [
              {
                  "name": "airflow"
              },
              {
                  "name": "owner\"1"
              },
              {
                  "name": "owner'2"
              },
              {
                  "name": "owner3"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "START",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "deferrable": "{{ result == true }}",
            "depends_on_past": false,
            "downstream_task_ids": "['section_1.section_2.task_6']",
            "executor_config": {},
            "external_dag_id": "external_dag_id",
            "external_task_id": "external_task_id",
            "ignore_first_depends_on_past": false,
            "inlets": "[]",
            "mapped": false,
            "max_active_tis_per_dag": 7,
            "max_active_tis_per_dagrun": 2,
            "multiple_outputs": false,
            "operator_class": "SomeCustomOperator",
            "operator_class_path": "{{ result.endswith('openlineage_base_complex_dag.SomeCustomOperator') }}",
            "outlets": "[]",
            "owner": "owner3",
            "priority_weight": 1,
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_id": "task_4",
            "trigger_rule": "all_success",
            "upstream_task_ids": "['task_3']",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.task_4",
      "facets": {
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "documentation": {
          "description": "OpenLineage complex DAG description",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/DocumentationJobFacet.json\\#\\/\\$defs\\/DocumentationJobFacet\") }}"
        },
        "ownership": {
          "owners": [
              {
                  "name": "owner3"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "COMPLETE",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "deferrable": "{{ result == true }}",
            "depends_on_past": false,
            "downstream_task_ids": "['section_1.section_2.task_6']",
            "executor_config": {},
            "external_dag_id": "external_dag_id",
            "external_task_id": "external_task_id",
            "ignore_first_depends_on_past": false,
            "inlets": "[]",
            "mapped": false,
            "max_active_tis_per_dag": 7,
            "max_active_tis_per_dagrun": 2,
            "multiple_outputs": false,
            "operator_class": "SomeCustomOperator",
            "operator_class_path": "{{ result.endswith('openlineage_base_complex_dag.SomeCustomOperator') }}",
            "outlets": "[]",
            "owner": "owner3",
            "priority_weight": 1,
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_id": "task_4",
            "trigger_rule": "all_success",
            "upstream_task_ids": "['task_3']",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.task_4",
      "facets": {
        "ownership": {
          "owners": [
              {
                  "name": "owner3"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "START",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "depends_on_past": false,
            "downstream_task_ids": "['check_events_number']",
            "executor_config": {},
            "ignore_first_depends_on_past": false,
            "inlets": "[]",
            "mapped": false,
            "multiple_outputs": false,
            "operator_class": "EmptyOperator",
            "operator_class_path": "airflow.providers.standard.operators.empty.EmptyOperator",
            "outlets": "[]",
            "owner": "airflow",
            "priority_weight": 1,
            "run_as_user": "some_user",
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_group": {
              "downstream_group_ids": "[]",
              "downstream_task_ids": "[]",
              "group_id": "section_2",
              "prefix_group_id": "{{ result == true }}",
              "tooltip": "group_tooltip",
              "upstream_group_ids": "[]",
              "upstream_task_ids": "[]"
            },
            "task_id": "section_1.section_2.task_6",
            "trigger_rule": "all_success",
            "upstream_task_ids": "{{ 'task_4' in result and 'section_1.task_5' in result }}",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.section_1.section_2.task_6",
      "facets": {
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        },
        "documentation": {
          "description": "OpenLineage complex DAG description",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/DocumentationJobFacet.json\\#\\/\\$defs\\/DocumentationJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "ownership": {
          "owners": [
              {
                  "name": "airflow"
              },
              {
                  "name": "owner\"1"
              },
              {
                  "name": "owner'2"
              },
              {
                  "name": "owner3"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        }
      }
    }
  },
  {
    "eventType": "COMPLETE",
    "eventTime": "{{ is_datetime(result) }}",
    "producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
    "schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunEvent$\") }}",
    "inputs": [],
    "outputs": [],
    "run": {
      "runId": "{{ is_uuid(result) }}",
      "facets": {
        "parent": {
          "job": {
            "namespace": "{{ result is string }}",
            "name": "openlineage_base_complex_dag"
          },
          "run": {
            "runId": "{{ is_uuid(result) }}"
          },
          "root": {
            "job": {
              "name": "openlineage_base_complex_dag",
              "namespace": "{{ result is string }}"
            },
            "run": {
              "runId": "{{ is_uuid(result) }}"
            }
          },
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ParentRunFacet.json\\#\\/\\$defs\\/ParentRunFacet$\") }}"
        },
        "airflow": {
          "dag": {
            "dag_id": "openlineage_base_complex_dag",
            "description": "OpenLineage complex DAG description",
            "fileloc": "{{ result.endswith('openlineage/example_openlineage_base_complex_dag.py') }}",
            "owner": "{{ result.split(', ') | sort == ['airflow', 'owner\"1', 'owner\\'2', 'owner3'] }}",
            "owner_links": {
              "airflow": "https://airflow.apache.org/"
            },
            "start_date": "{{ is_datetime(result) }}",
            "tags": "{{ result[1:-1].split(', ') | sort == ['\"with\\'quote\"', \"'first'\", \"'second@'\", '\\'z\"e\\''] }}",
            "timetable": {},
            "timetable_summary": "None"
          },
          "dagRun": {
            "conf": {},
            "dag_id": "openlineage_base_complex_dag",
            "data_interval_end": "{{ is_datetime(result) }}",
            "data_interval_start": "{{ is_datetime(result) }}",
            "logical_date": "{{ is_datetime(result) }}",
            "run_after": "{{ is_datetime(result) }}",
            "run_id": "{{ result is string }}",
            "run_type": "manual",
            "start_date": "{{ is_datetime(result) }}"
          },
          "taskInstance": {
            "try_number": "{{ result is number }}"
          },
          "task": {
            "depends_on_past": false,
            "downstream_task_ids": "['check_events_number']",
            "executor_config": {},
            "ignore_first_depends_on_past": false,
            "inlets": "[]",
            "mapped": false,
            "multiple_outputs": false,
            "operator_class": "EmptyOperator",
            "operator_class_path": "airflow.providers.standard.operators.empty.EmptyOperator",
            "outlets": "[]",
            "owner": "airflow",
            "priority_weight": 1,
            "run_as_user": "some_user",
            "queue": "{{ result is string }}",
            "retries": "{{ result is number }}",
            "retry_exponential_backoff": false,
            "task_group": {
              "downstream_group_ids": "[]",
              "downstream_task_ids": "[]",
              "group_id": "section_2",
              "prefix_group_id": "{{ result == true }}",
              "tooltip": "group_tooltip",
              "upstream_group_ids": "[]",
              "upstream_task_ids": "[]"
            },
            "task_id": "section_1.section_2.task_6",
            "trigger_rule": "all_success",
            "upstream_task_ids": "{{ 'task_4' in result and 'section_1.task_5' in result }}",
            "wait_for_downstream": false,
            "wait_for_past_depends_before_skipping": false
          },
          "taskUuid": "{{ is_uuid(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/[\\d-]+\\/OpenLineage.json\\#\\/\\$defs\\/RunFacet\") }}"
        },
        "nominalTime": {
          "nominalEndTime": "{{ is_datetime(result) }}",
          "nominalStartTime": "{{ is_datetime(result) }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/NominalTimeRunFacet.json\\#\\/\\$defs\\/NominalTimeRunFacet$\") }}"
        },
        "processing_engine": {
          "name": "Airflow",
          "openlineageAdapterVersion": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "version": "{{ regex_match(result, \"^[\\d]+\\.[\\d]+\\.[\\d]+.*\") }}",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/ProcessingEngineRunFacet.json\\#\\/\\$defs\\/ProcessingEngineRunFacet$\") }}"
        }
      }
    },
    "job": {
      "namespace": "{{ result is string }}",
      "name": "openlineage_base_complex_dag.section_1.section_2.task_6",
      "facets": {
        "ownership": {
          "owners": [
              {
                  "name": "airflow"
              },
              {
                  "name": "owner\"1"
              },
              {
                  "name": "owner'2"
              },
              {
                  "name": "owner3"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/OwnershipJobFacet.json\\#\\/\\$defs\\/OwnershipJobFacet\") }}"
        },
        "tags": {
          "tags": [
              {
                  "key": "first",
                  "value": "first",
                  "source": "AIRFLOW"
              },
              {
                  "key": "second@",
                  "value": "second@",
                  "source": "AIRFLOW"
              },
              {
                  "key": "with'quote",
                  "value": "with'quote",
                  "source": "AIRFLOW"
              },
              {
                  "key": "z\"e",
                  "value": "z\"e",
                  "source": "AIRFLOW"
              }
          ],
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/TagsJobFacet.json\\#\\/\\$defs\\/TagsJobFacet\") }}"
        },
        "jobType": {
          "integration": "AIRFLOW",
          "jobType": "TASK",
          "processingType": "BATCH",
          "_producer": "{{ regex_match(result, \"^https:\\/\\/github.com/apache/airflow/tree/providers-openlineage\\/[\\d]+\\.[\\d]+\\.[\\d]+.*$\") }}",
          "_schemaURL": "{{ regex_match(result, \"^https:\\/\\/openlineage.io\\/spec\\/facets\\/[\\d-]+\\/JobTypeJobFacet.json\\#\\/\\$defs\\/JobTypeJobFacet\") }}"
        }
      }
    }
  }
]
