 .. Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

 ..   http://www.apache.org/licenses/LICENSE-2.0

 .. Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils
=====================================================================

.. py:module:: airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils


Classes
-------

.. autoapisummary::

   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.ResourceVersion
   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.KubernetesJobWatcher
   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.AirflowKubernetesScheduler


Functions
---------

.. autoapisummary::

   airflow.providers.cncf.kubernetes.executors.kubernetes_executor_utils.get_base_pod_from_template


Module Contents
---------------

.. py:class:: ResourceVersion

   Singleton for tracking resourceVersion from Kubernetes.


   .. py:attribute:: resource_version
      :type:  dict[str, str]


.. py:class:: KubernetesJobWatcher(namespace, watcher_queue, resource_version, scheduler_job_id, kube_config)

   Bases: :py:obj:`multiprocessing.Process`, :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`


   Watches for Kubernetes jobs.


   .. py:attribute:: namespace


   .. py:attribute:: scheduler_job_id


   .. py:attribute:: watcher_queue


   .. py:attribute:: resource_version


   .. py:attribute:: kube_config


   .. py:method:: run()

      Perform watching.



   .. py:method:: process_error(event)

      Process error response.



   .. py:method:: process_status(pod_name, namespace, status, annotations, resource_version, event)

      Process status response.



.. py:class:: AirflowKubernetesScheduler(kube_config, result_queue, kube_client, scheduler_job_id)

   Bases: :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`


   Airflow Scheduler for Kubernetes.


   .. py:attribute:: kube_config


   .. py:attribute:: result_queue


   .. py:attribute:: namespace


   .. py:attribute:: kube_client


   .. py:attribute:: watcher_queue


   .. py:attribute:: scheduler_job_id


   .. py:attribute:: kube_watchers


   .. py:method:: run_pod_async(pod, **kwargs)

      Run POD asynchronously.



   .. py:method:: run_next(next_job)

      Receives the next job to run, builds the pod, and creates it.



   .. py:method:: delete_pod(pod_name, namespace)

      Delete Pod from a namespace; does not raise if it does not exist.



   .. py:method:: patch_pod_executor_done(*, pod_name, namespace)

      Add a "done" annotation to ensure we don't continually adopt pods.



   .. py:method:: sync()

      Check the status of all currently running kubernetes jobs.

      If a job is completed, its status is placed in the result queue to be sent back to the scheduler.



   .. py:method:: process_watcher_task(task)

      Process the task by watcher.



   .. py:method:: terminate()

      Terminates the watcher.



.. py:function:: get_base_pod_from_template(pod_template_file, kube_config)

   Get base pod from template.

   Reads either the pod_template_file set in the executor_config or the base pod_template_file
   set in the airflow.cfg to craft a "base pod" that will be used by the KubernetesExecutor

   :param pod_template_file: absolute path to a pod_template_file.yaml or None
   :param kube_config: The KubeConfig class generated by airflow that contains all kube metadata
   :return: a V1Pod that can be used as the base pod for k8s tasks
