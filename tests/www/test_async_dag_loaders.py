# -*- coding: utf-8 -*-
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

"""Unit tests for asynchronous DAG loaders."""

import time
import unittest
from unittest import mock

from airflow import example_dags
from airflow.contrib import example_dags as contrib_example_dags
from airflow.hooks.base_hook import BaseHook
from airflow.models import Connection
from airflow.www import async_dag_loaders


# airflow/example_dags/
EXAMPLE_DAGS = [
    'example_bash_operator',
    'example_branch_operator',
    'example_branch_dop_operator_v3',
    'example_http_operator',
    'latest_only_with_trigger',
    'latest_only',
    'example_passing_params_via_test_command',
    'example_pig_operator',
    'example_python_operator',
    'example_short_circuit_operator',
    'example_skip_dag',
    'example_subdag_operator',
    'example_trigger_controller_dag',
    'example_trigger_target_dag',
    'example_xcom',
    'test_utils',
    'tutorial'
]

# airflow/contrib/example_dags/
CONTRIB_EXAMPLE_DAGS = [
    'aci_example',
    'example_azure_cosmosdb_sensor',
    'example_databricks_operator',
    'example_dingding_operator',
    'emr_job_flow_automatic_steps_dag',
    'emr_job_flow_manual_steps_dag',
    'example_gcp_bigtable_operators',
    'example_gcp_cloud_build',
    'example_gcp_compute',
    'example_gcp_compute_igm',
    'example_gcp_dataproc_create_cluster',
    'example_gcp_dataproc_pig_operator',
    'example_gcp_function',
    'example_gcp_natural_language',
    'example_gcp_spanner',
    'example_gcp_speech',
    'example_gcp_sql',
    'example_gcp_sql_query',
    'example_gcp_transfer',
    'example_gcp_translate',
    'example_gcp_video_intelligence',
    'example_gcp_vision_autogenerated_id',
    'example_gcp_vision_explicit_id',
    'example_gcp_vision_annotate_image',
    'example_gcs_acl',
    'example_gcs_to_bq_operator',
    'example_kubernetes_executor',
    'example_kubernetes_executor_config',
    'example_kubernetes_operator',
    'pubsub-end-to-end',
    'example_qubole_operator',
    'example_qubole_sensor',
    'example_twitter_dag',
    'POC_winrm_parallel'
]

ASYNC_DAG_LOADING_TIMEOUT = 60
CHECK_DAG_INTERVAL = 10


def validate_async_dag_loader(module, dag_ids):
    """Tests that asynchronous DAG loader can load DAGs from a module."""
    dagbag = async_dag_loaders.create_async_dagbag(module.__path__[0])
    stringified_dags = {}
    start_time = time.time()
    while True:
        for k in set(dag_ids) - set(stringified_dags.keys()):
            if k in dagbag.dags:
                stringified_dags[k] = dagbag.dags[k]
        if len(stringified_dags) == len(dag_ids):
            break
        if time.time() - start_time > ASYNC_DAG_LOADING_TIMEOUT:
            raise Exception('Asynchronous DAG loader timeout.')
        time.sleep(CHECK_DAG_INTERVAL)


class TestAsyncDagLoaders(unittest.TestCase):
    """Unit tests for asynchronous DAG loaders."""

    def setUp(self):
        super().setUp()
        BaseHook.get_connection = mock.Mock(
            return_value=Connection(
                extra=('{'
                       '"project_id": "mock", '
                       '"location": "mock", '
                       '"instance": "mock", '
                       '"database_type": "postgres", '
                       '"use_proxy": "False", '
                       '"use_ssl": "False"'
                       '}')))

    def test_load_example_dags(self):
        """Tests that asynchronous DAG loader can load example_dags."""
        validate_async_dag_loader(example_dags, EXAMPLE_DAGS)

    def test_load_contrib_example_dags(self):
        """Tests that asynchronous DAG loader can load contrib_example_dags."""
        validate_async_dag_loader(contrib_example_dags, CONTRIB_EXAMPLE_DAGS)


if __name__ == '__main__':
    unittest.main()
