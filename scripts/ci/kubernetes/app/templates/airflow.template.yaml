# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: admin-rbac
subjects:
  - kind: ServiceAccount
    # Reference to upper's `metadata.name`
    name: default
    # Reference to upper's `metadata.namespace`
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: airflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: airflow
    spec:
      securityContext:
        runAsUser:  50000
        runAsGroup: 50000
        fsGroup: 50000
      initContainers:
        - name: "init-dags"
          image: {{AIRFLOW_KUBERNETES_IMAGE}}
          imagePullPolicy: Never
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: airflow-configmap
              mountPath: /opt/airflow/airflow.cfg
              subPath: airflow.cfg
            - name: {{INIT_DAGS_VOLUME_NAME}}
              mountPath: /opt/airflow/dags
          env:
            - name: SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: airflow-secrets
                  key: sql_alchemy_conn
          command:
            - "bash"
          args:
            - "-cx"
            - "/tmp/airflow-test-env-init-dags.sh"
        - name: "init-db"
          image: {{AIRFLOW_KUBERNETES_IMAGE}}
          imagePullPolicy: Never
          volumeMounts:
          - name: airflow-configmap
            mountPath: /opt/airflow/airflow.cfg
            subPath: airflow.cfg
          - name: {{INIT_DAGS_VOLUME_NAME}}
            mountPath: /opt/airflow/dags
          env:
          - name: SQL_ALCHEMY_CONN
            valueFrom:
              secretKeyRef:
                name: airflow-secrets
                key: sql_alchemy_conn
          command:
            - "bash"
          args:
            - "-cx"
            - "/tmp/airflow-test-env-init-db.sh"
{{INIT_GIT_SYNC}}
      containers:
      - name: webserver
        image: {{AIRFLOW_KUBERNETES_IMAGE}}
        imagePullPolicy: Never
        ports:
        - name: webserver
          containerPort: 8080
        args: ["webserver"]
        env:
        - name: AIRFLOW__KUBERNETES__NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: sql_alchemy_conn
        volumeMounts:
        - name: airflow-configmap
          mountPath: /opt/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: {{POD_AIRFLOW_DAGS_VOLUME_NAME}}
          mountPath: /opt/airflow/dags
        - name: airflow-logs
          mountPath: /opt/airflow/logs
      - name: scheduler
        image: {{AIRFLOW_KUBERNETES_IMAGE}}
        imagePullPolicy: Never
        args: ["scheduler"]
        env:
        - name: AIRFLOW__KUBERNETES__NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: sql_alchemy_conn
        volumeMounts:
        - name: airflow-configmap
          mountPath: /opt/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: {{POD_AIRFLOW_DAGS_VOLUME_NAME}}
          mountPath: /opt/airflow/dags
        - name: airflow-logs
          mountPath: /opt/airflow/logs
      volumes:
      - name: airflow-dags
        persistentVolumeClaim:
          claimName: airflow-dags
      - name: airflow-dags-fake
        emptyDir: {}
      - name: airflow-dags-git
        emptyDir: {}
      - name: airflow-logs
        emptyDir: {}
      - name: airflow-configmap
        configMap:
          name: airflow-configmap
---
apiVersion: v1
kind: Service
metadata:
  name: airflow
spec:
  type: NodePort
  ports:
    - port: 8080
      nodePort: 30809
  selector:
    name: airflow
---
apiVersion: v1
kind: Pod
metadata:
  name: init-dags
  namespace: test-namespace
spec:
  containers:
    - name: "init-dags-test-namespace"
      image: {{AIRFLOW_KUBERNETES_IMAGE}}
      imagePullPolicy: Never
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: airflow-configmap
          mountPath: /opt/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: {{INIT_DAGS_VOLUME_NAME}}
          mountPath: /opt/airflow/dags
      env:
        - name: SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-secrets
              key: sql_alchemy_conn
      command:
        - "bash"
      args:
        - "-cx"
        - "/tmp/airflow-test-env-init-dags.sh"
  volumes:
  - name: airflow-dags
    persistentVolumeClaim:
      claimName: airflow-dags
  - name: airflow-dags-fake
    emptyDir: {}
  - name: airflow-dags-git
    emptyDir: {}
  - name: airflow-logs
    emptyDir: {}
  - name: airflow-configmap
    configMap:
      name: airflow-configmap
