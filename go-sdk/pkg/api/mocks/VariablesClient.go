// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/apache/airflow/go-sdk/pkg/api"
	mock "github.com/stretchr/testify/mock"
	"resty.dev/v3"
)

// NewVariablesClient creates a new instance of VariablesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVariablesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *VariablesClient {
	mock := &VariablesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VariablesClient is an autogenerated mock type for the VariablesClient type
type VariablesClient struct {
	mock.Mock
}

type VariablesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *VariablesClient) EXPECT() *VariablesClient_Expecter {
	return &VariablesClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type VariablesClient
func (_mock *VariablesClient) Delete(ctx context.Context, variableKey string) (*api.HTTPValidationError, error) {
	ret := _mock.Called(ctx, variableKey)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *api.HTTPValidationError
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*api.HTTPValidationError, error)); ok {
		return returnFunc(ctx, variableKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *api.HTTPValidationError); ok {
		r0 = returnFunc(ctx, variableKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.HTTPValidationError)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, variableKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VariablesClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type VariablesClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - variableKey string
func (_e *VariablesClient_Expecter) Delete(ctx interface{}, variableKey interface{}) *VariablesClient_Delete_Call {
	return &VariablesClient_Delete_Call{Call: _e.mock.On("Delete", ctx, variableKey)}
}

func (_c *VariablesClient_Delete_Call) Run(run func(ctx context.Context, variableKey string)) *VariablesClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VariablesClient_Delete_Call) Return(hTTPValidationError *api.HTTPValidationError, err error) *VariablesClient_Delete_Call {
	_c.Call.Return(hTTPValidationError, err)
	return _c
}

func (_c *VariablesClient_Delete_Call) RunAndReturn(run func(ctx context.Context, variableKey string) (*api.HTTPValidationError, error)) *VariablesClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResponse provides a mock function for the type VariablesClient
func (_mock *VariablesClient) DeleteResponse(ctx context.Context, variableKey string) (*resty.Response, error) {
	ret := _mock.Called(ctx, variableKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResponse")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*resty.Response, error)); ok {
		return returnFunc(ctx, variableKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *resty.Response); ok {
		r0 = returnFunc(ctx, variableKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, variableKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VariablesClient_DeleteResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResponse'
type VariablesClient_DeleteResponse_Call struct {
	*mock.Call
}

// DeleteResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - variableKey string
func (_e *VariablesClient_Expecter) DeleteResponse(ctx interface{}, variableKey interface{}) *VariablesClient_DeleteResponse_Call {
	return &VariablesClient_DeleteResponse_Call{Call: _e.mock.On("DeleteResponse", ctx, variableKey)}
}

func (_c *VariablesClient_DeleteResponse_Call) Run(run func(ctx context.Context, variableKey string)) *VariablesClient_DeleteResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VariablesClient_DeleteResponse_Call) Return(response *resty.Response, err error) *VariablesClient_DeleteResponse_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *VariablesClient_DeleteResponse_Call) RunAndReturn(run func(ctx context.Context, variableKey string) (*resty.Response, error)) *VariablesClient_DeleteResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type VariablesClient
func (_mock *VariablesClient) Get(ctx context.Context, variableKey string) (*api.VariableResponse, error) {
	ret := _mock.Called(ctx, variableKey)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *api.VariableResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*api.VariableResponse, error)); ok {
		return returnFunc(ctx, variableKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *api.VariableResponse); ok {
		r0 = returnFunc(ctx, variableKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.VariableResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, variableKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VariablesClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type VariablesClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - variableKey string
func (_e *VariablesClient_Expecter) Get(ctx interface{}, variableKey interface{}) *VariablesClient_Get_Call {
	return &VariablesClient_Get_Call{Call: _e.mock.On("Get", ctx, variableKey)}
}

func (_c *VariablesClient_Get_Call) Run(run func(ctx context.Context, variableKey string)) *VariablesClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VariablesClient_Get_Call) Return(variableResponse *api.VariableResponse, err error) *VariablesClient_Get_Call {
	_c.Call.Return(variableResponse, err)
	return _c
}

func (_c *VariablesClient_Get_Call) RunAndReturn(run func(ctx context.Context, variableKey string) (*api.VariableResponse, error)) *VariablesClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetResponse provides a mock function for the type VariablesClient
func (_mock *VariablesClient) GetResponse(ctx context.Context, variableKey string) (*resty.Response, error) {
	ret := _mock.Called(ctx, variableKey)

	if len(ret) == 0 {
		panic("no return value specified for GetResponse")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*resty.Response, error)); ok {
		return returnFunc(ctx, variableKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *resty.Response); ok {
		r0 = returnFunc(ctx, variableKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, variableKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VariablesClient_GetResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResponse'
type VariablesClient_GetResponse_Call struct {
	*mock.Call
}

// GetResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - variableKey string
func (_e *VariablesClient_Expecter) GetResponse(ctx interface{}, variableKey interface{}) *VariablesClient_GetResponse_Call {
	return &VariablesClient_GetResponse_Call{Call: _e.mock.On("GetResponse", ctx, variableKey)}
}

func (_c *VariablesClient_GetResponse_Call) Run(run func(ctx context.Context, variableKey string)) *VariablesClient_GetResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VariablesClient_GetResponse_Call) Return(response *resty.Response, err error) *VariablesClient_GetResponse_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *VariablesClient_GetResponse_Call) RunAndReturn(run func(ctx context.Context, variableKey string) (*resty.Response, error)) *VariablesClient_GetResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type VariablesClient
func (_mock *VariablesClient) Put(ctx context.Context, variableKey string, body *api.VariablePostBody) (*interface{}, error) {
	ret := _mock.Called(ctx, variableKey, body)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *api.VariablePostBody) (*interface{}, error)); ok {
		return returnFunc(ctx, variableKey, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *api.VariablePostBody) *interface{}); ok {
		r0 = returnFunc(ctx, variableKey, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *api.VariablePostBody) error); ok {
		r1 = returnFunc(ctx, variableKey, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VariablesClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type VariablesClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - variableKey string
//   - body *api.VariablePostBody
func (_e *VariablesClient_Expecter) Put(ctx interface{}, variableKey interface{}, body interface{}) *VariablesClient_Put_Call {
	return &VariablesClient_Put_Call{Call: _e.mock.On("Put", ctx, variableKey, body)}
}

func (_c *VariablesClient_Put_Call) Run(run func(ctx context.Context, variableKey string, body *api.VariablePostBody)) *VariablesClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *api.VariablePostBody
		if args[2] != nil {
			arg2 = args[2].(*api.VariablePostBody)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VariablesClient_Put_Call) Return(ifaceVal *interface{}, err error) *VariablesClient_Put_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *VariablesClient_Put_Call) RunAndReturn(run func(ctx context.Context, variableKey string, body *api.VariablePostBody) (*interface{}, error)) *VariablesClient_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutResponse provides a mock function for the type VariablesClient
func (_mock *VariablesClient) PutResponse(ctx context.Context, variableKey string, body *api.VariablePostBody) (*resty.Response, error) {
	ret := _mock.Called(ctx, variableKey, body)

	if len(ret) == 0 {
		panic("no return value specified for PutResponse")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *api.VariablePostBody) (*resty.Response, error)); ok {
		return returnFunc(ctx, variableKey, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *api.VariablePostBody) *resty.Response); ok {
		r0 = returnFunc(ctx, variableKey, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *api.VariablePostBody) error); ok {
		r1 = returnFunc(ctx, variableKey, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VariablesClient_PutResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutResponse'
type VariablesClient_PutResponse_Call struct {
	*mock.Call
}

// PutResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - variableKey string
//   - body *api.VariablePostBody
func (_e *VariablesClient_Expecter) PutResponse(ctx interface{}, variableKey interface{}, body interface{}) *VariablesClient_PutResponse_Call {
	return &VariablesClient_PutResponse_Call{Call: _e.mock.On("PutResponse", ctx, variableKey, body)}
}

func (_c *VariablesClient_PutResponse_Call) Run(run func(ctx context.Context, variableKey string, body *api.VariablePostBody)) *VariablesClient_PutResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *api.VariablePostBody
		if args[2] != nil {
			arg2 = args[2].(*api.VariablePostBody)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VariablesClient_PutResponse_Call) Return(response *resty.Response, err error) *VariablesClient_PutResponse_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *VariablesClient_PutResponse_Call) RunAndReturn(run func(ctx context.Context, variableKey string, body *api.VariablePostBody) (*resty.Response, error)) *VariablesClient_PutResponse_Call {
	_c.Call.Return(run)
	return _c
}
