// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/apache/airflow/go-sdk/pkg/api"
	mock "github.com/stretchr/testify/mock"
	"resty.dev/v3"
)

// NewAssetsClient creates a new instance of AssetsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetsClient {
	mock := &AssetsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AssetsClient is an autogenerated mock type for the AssetsClient type
type AssetsClient struct {
	mock.Mock
}

type AssetsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetsClient) EXPECT() *AssetsClient_Expecter {
	return &AssetsClient_Expecter{mock: &_m.Mock}
}

// GetByName provides a mock function for the type AssetsClient
func (_mock *AssetsClient) GetByName(ctx context.Context, params *api.GetAssetByNameParams) (*api.AssetResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *api.AssetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetByNameParams) (*api.AssetResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetByNameParams) *api.AssetResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.AssetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.GetAssetByNameParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetsClient_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type AssetsClient_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.GetAssetByNameParams
func (_e *AssetsClient_Expecter) GetByName(ctx interface{}, params interface{}) *AssetsClient_GetByName_Call {
	return &AssetsClient_GetByName_Call{Call: _e.mock.On("GetByName", ctx, params)}
}

func (_c *AssetsClient_GetByName_Call) Run(run func(ctx context.Context, params *api.GetAssetByNameParams)) *AssetsClient_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.GetAssetByNameParams
		if args[1] != nil {
			arg1 = args[1].(*api.GetAssetByNameParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AssetsClient_GetByName_Call) Return(assetResponse *api.AssetResponse, err error) *AssetsClient_GetByName_Call {
	_c.Call.Return(assetResponse, err)
	return _c
}

func (_c *AssetsClient_GetByName_Call) RunAndReturn(run func(ctx context.Context, params *api.GetAssetByNameParams) (*api.AssetResponse, error)) *AssetsClient_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNameResponse provides a mock function for the type AssetsClient
func (_mock *AssetsClient) GetByNameResponse(ctx context.Context, params *api.GetAssetByNameParams) (*resty.Response, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetByNameResponse")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetByNameParams) (*resty.Response, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetByNameParams) *resty.Response); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.GetAssetByNameParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetsClient_GetByNameResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNameResponse'
type AssetsClient_GetByNameResponse_Call struct {
	*mock.Call
}

// GetByNameResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.GetAssetByNameParams
func (_e *AssetsClient_Expecter) GetByNameResponse(ctx interface{}, params interface{}) *AssetsClient_GetByNameResponse_Call {
	return &AssetsClient_GetByNameResponse_Call{Call: _e.mock.On("GetByNameResponse", ctx, params)}
}

func (_c *AssetsClient_GetByNameResponse_Call) Run(run func(ctx context.Context, params *api.GetAssetByNameParams)) *AssetsClient_GetByNameResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.GetAssetByNameParams
		if args[1] != nil {
			arg1 = args[1].(*api.GetAssetByNameParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AssetsClient_GetByNameResponse_Call) Return(response *resty.Response, err error) *AssetsClient_GetByNameResponse_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *AssetsClient_GetByNameResponse_Call) RunAndReturn(run func(ctx context.Context, params *api.GetAssetByNameParams) (*resty.Response, error)) *AssetsClient_GetByNameResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUri provides a mock function for the type AssetsClient
func (_mock *AssetsClient) GetByUri(ctx context.Context, params *api.GetAssetByUriParams) (*api.AssetResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetByUri")
	}

	var r0 *api.AssetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetByUriParams) (*api.AssetResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetByUriParams) *api.AssetResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.AssetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.GetAssetByUriParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetsClient_GetByUri_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUri'
type AssetsClient_GetByUri_Call struct {
	*mock.Call
}

// GetByUri is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.GetAssetByUriParams
func (_e *AssetsClient_Expecter) GetByUri(ctx interface{}, params interface{}) *AssetsClient_GetByUri_Call {
	return &AssetsClient_GetByUri_Call{Call: _e.mock.On("GetByUri", ctx, params)}
}

func (_c *AssetsClient_GetByUri_Call) Run(run func(ctx context.Context, params *api.GetAssetByUriParams)) *AssetsClient_GetByUri_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.GetAssetByUriParams
		if args[1] != nil {
			arg1 = args[1].(*api.GetAssetByUriParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AssetsClient_GetByUri_Call) Return(assetResponse *api.AssetResponse, err error) *AssetsClient_GetByUri_Call {
	_c.Call.Return(assetResponse, err)
	return _c
}

func (_c *AssetsClient_GetByUri_Call) RunAndReturn(run func(ctx context.Context, params *api.GetAssetByUriParams) (*api.AssetResponse, error)) *AssetsClient_GetByUri_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUriResponse provides a mock function for the type AssetsClient
func (_mock *AssetsClient) GetByUriResponse(ctx context.Context, params *api.GetAssetByUriParams) (*resty.Response, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetByUriResponse")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetByUriParams) (*resty.Response, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetByUriParams) *resty.Response); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.GetAssetByUriParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetsClient_GetByUriResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUriResponse'
type AssetsClient_GetByUriResponse_Call struct {
	*mock.Call
}

// GetByUriResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.GetAssetByUriParams
func (_e *AssetsClient_Expecter) GetByUriResponse(ctx interface{}, params interface{}) *AssetsClient_GetByUriResponse_Call {
	return &AssetsClient_GetByUriResponse_Call{Call: _e.mock.On("GetByUriResponse", ctx, params)}
}

func (_c *AssetsClient_GetByUriResponse_Call) Run(run func(ctx context.Context, params *api.GetAssetByUriParams)) *AssetsClient_GetByUriResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.GetAssetByUriParams
		if args[1] != nil {
			arg1 = args[1].(*api.GetAssetByUriParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AssetsClient_GetByUriResponse_Call) Return(response *resty.Response, err error) *AssetsClient_GetByUriResponse_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *AssetsClient_GetByUriResponse_Call) RunAndReturn(run func(ctx context.Context, params *api.GetAssetByUriParams) (*resty.Response, error)) *AssetsClient_GetByUriResponse_Call {
	_c.Call.Return(run)
	return _c
}
