// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/oapi-codegen/runtime/types"
	mock "github.com/stretchr/testify/mock"
	"resty.dev/v3"
)

// NewTaskReschedulesClient creates a new instance of TaskReschedulesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskReschedulesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskReschedulesClient {
	mock := &TaskReschedulesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TaskReschedulesClient is an autogenerated mock type for the TaskReschedulesClient type
type TaskReschedulesClient struct {
	mock.Mock
}

type TaskReschedulesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskReschedulesClient) EXPECT() *TaskReschedulesClient_Expecter {
	return &TaskReschedulesClient_Expecter{mock: &_m.Mock}
}

// GetStartDate provides a mock function for the type TaskReschedulesClient
func (_mock *TaskReschedulesClient) GetStartDate(ctx context.Context, taskInstanceId types.UUID) (*time.Time, error) {
	ret := _mock.Called(ctx, taskInstanceId)

	if len(ret) == 0 {
		panic("no return value specified for GetStartDate")
	}

	var r0 *time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UUID) (*time.Time, error)); ok {
		return returnFunc(ctx, taskInstanceId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UUID) *time.Time); ok {
		r0 = returnFunc(ctx, taskInstanceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UUID) error); ok {
		r1 = returnFunc(ctx, taskInstanceId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskReschedulesClient_GetStartDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartDate'
type TaskReschedulesClient_GetStartDate_Call struct {
	*mock.Call
}

// GetStartDate is a helper method to define mock.On call
//   - ctx context.Context
//   - taskInstanceId types.UUID
func (_e *TaskReschedulesClient_Expecter) GetStartDate(ctx interface{}, taskInstanceId interface{}) *TaskReschedulesClient_GetStartDate_Call {
	return &TaskReschedulesClient_GetStartDate_Call{Call: _e.mock.On("GetStartDate", ctx, taskInstanceId)}
}

func (_c *TaskReschedulesClient_GetStartDate_Call) Run(run func(ctx context.Context, taskInstanceId types.UUID)) *TaskReschedulesClient_GetStartDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UUID
		if args[1] != nil {
			arg1 = args[1].(types.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskReschedulesClient_GetStartDate_Call) Return(time1 *time.Time, err error) *TaskReschedulesClient_GetStartDate_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *TaskReschedulesClient_GetStartDate_Call) RunAndReturn(run func(ctx context.Context, taskInstanceId types.UUID) (*time.Time, error)) *TaskReschedulesClient_GetStartDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartDateResponse provides a mock function for the type TaskReschedulesClient
func (_mock *TaskReschedulesClient) GetStartDateResponse(ctx context.Context, taskInstanceId types.UUID) (*resty.Response, error) {
	ret := _mock.Called(ctx, taskInstanceId)

	if len(ret) == 0 {
		panic("no return value specified for GetStartDateResponse")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UUID) (*resty.Response, error)); ok {
		return returnFunc(ctx, taskInstanceId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.UUID) *resty.Response); ok {
		r0 = returnFunc(ctx, taskInstanceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.UUID) error); ok {
		r1 = returnFunc(ctx, taskInstanceId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskReschedulesClient_GetStartDateResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartDateResponse'
type TaskReschedulesClient_GetStartDateResponse_Call struct {
	*mock.Call
}

// GetStartDateResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - taskInstanceId types.UUID
func (_e *TaskReschedulesClient_Expecter) GetStartDateResponse(ctx interface{}, taskInstanceId interface{}) *TaskReschedulesClient_GetStartDateResponse_Call {
	return &TaskReschedulesClient_GetStartDateResponse_Call{Call: _e.mock.On("GetStartDateResponse", ctx, taskInstanceId)}
}

func (_c *TaskReschedulesClient_GetStartDateResponse_Call) Run(run func(ctx context.Context, taskInstanceId types.UUID)) *TaskReschedulesClient_GetStartDateResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.UUID
		if args[1] != nil {
			arg1 = args[1].(types.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskReschedulesClient_GetStartDateResponse_Call) Return(response *resty.Response, err error) *TaskReschedulesClient_GetStartDateResponse_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *TaskReschedulesClient_GetStartDateResponse_Call) RunAndReturn(run func(ctx context.Context, taskInstanceId types.UUID) (*resty.Response, error)) *TaskReschedulesClient_GetStartDateResponse_Call {
	_c.Call.Return(run)
	return _c
}
