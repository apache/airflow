// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/apache/airflow/go-sdk/pkg/api"
	mock "github.com/stretchr/testify/mock"
	"resty.dev/v3"
)

// NewAssetEventsClient creates a new instance of AssetEventsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAssetEventsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AssetEventsClient {
	mock := &AssetEventsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AssetEventsClient is an autogenerated mock type for the AssetEventsClient type
type AssetEventsClient struct {
	mock.Mock
}

type AssetEventsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AssetEventsClient) EXPECT() *AssetEventsClient_Expecter {
	return &AssetEventsClient_Expecter{mock: &_m.Mock}
}

// GetByAssetAlias provides a mock function for the type AssetEventsClient
func (_mock *AssetEventsClient) GetByAssetAlias(ctx context.Context, params *api.GetAssetEventByAssetAliasParams) (*api.AssetEventsResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetAlias")
	}

	var r0 *api.AssetEventsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetEventByAssetAliasParams) (*api.AssetEventsResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetEventByAssetAliasParams) *api.AssetEventsResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.AssetEventsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.GetAssetEventByAssetAliasParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetEventsClient_GetByAssetAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetAlias'
type AssetEventsClient_GetByAssetAlias_Call struct {
	*mock.Call
}

// GetByAssetAlias is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.GetAssetEventByAssetAliasParams
func (_e *AssetEventsClient_Expecter) GetByAssetAlias(ctx interface{}, params interface{}) *AssetEventsClient_GetByAssetAlias_Call {
	return &AssetEventsClient_GetByAssetAlias_Call{Call: _e.mock.On("GetByAssetAlias", ctx, params)}
}

func (_c *AssetEventsClient_GetByAssetAlias_Call) Run(run func(ctx context.Context, params *api.GetAssetEventByAssetAliasParams)) *AssetEventsClient_GetByAssetAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.GetAssetEventByAssetAliasParams
		if args[1] != nil {
			arg1 = args[1].(*api.GetAssetEventByAssetAliasParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AssetEventsClient_GetByAssetAlias_Call) Return(assetEventsResponse *api.AssetEventsResponse, err error) *AssetEventsClient_GetByAssetAlias_Call {
	_c.Call.Return(assetEventsResponse, err)
	return _c
}

func (_c *AssetEventsClient_GetByAssetAlias_Call) RunAndReturn(run func(ctx context.Context, params *api.GetAssetEventByAssetAliasParams) (*api.AssetEventsResponse, error)) *AssetEventsClient_GetByAssetAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetAliasResponse provides a mock function for the type AssetEventsClient
func (_mock *AssetEventsClient) GetByAssetAliasResponse(ctx context.Context, params *api.GetAssetEventByAssetAliasParams) (*resty.Response, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetAliasResponse")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetEventByAssetAliasParams) (*resty.Response, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetEventByAssetAliasParams) *resty.Response); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.GetAssetEventByAssetAliasParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetEventsClient_GetByAssetAliasResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetAliasResponse'
type AssetEventsClient_GetByAssetAliasResponse_Call struct {
	*mock.Call
}

// GetByAssetAliasResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.GetAssetEventByAssetAliasParams
func (_e *AssetEventsClient_Expecter) GetByAssetAliasResponse(ctx interface{}, params interface{}) *AssetEventsClient_GetByAssetAliasResponse_Call {
	return &AssetEventsClient_GetByAssetAliasResponse_Call{Call: _e.mock.On("GetByAssetAliasResponse", ctx, params)}
}

func (_c *AssetEventsClient_GetByAssetAliasResponse_Call) Run(run func(ctx context.Context, params *api.GetAssetEventByAssetAliasParams)) *AssetEventsClient_GetByAssetAliasResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.GetAssetEventByAssetAliasParams
		if args[1] != nil {
			arg1 = args[1].(*api.GetAssetEventByAssetAliasParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AssetEventsClient_GetByAssetAliasResponse_Call) Return(response *resty.Response, err error) *AssetEventsClient_GetByAssetAliasResponse_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *AssetEventsClient_GetByAssetAliasResponse_Call) RunAndReturn(run func(ctx context.Context, params *api.GetAssetEventByAssetAliasParams) (*resty.Response, error)) *AssetEventsClient_GetByAssetAliasResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetNameUri provides a mock function for the type AssetEventsClient
func (_mock *AssetEventsClient) GetByAssetNameUri(ctx context.Context, params *api.GetAssetEventByAssetNameUriParams) (*api.AssetEventsResponse, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetNameUri")
	}

	var r0 *api.AssetEventsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetEventByAssetNameUriParams) (*api.AssetEventsResponse, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetEventByAssetNameUriParams) *api.AssetEventsResponse); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.AssetEventsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.GetAssetEventByAssetNameUriParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetEventsClient_GetByAssetNameUri_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetNameUri'
type AssetEventsClient_GetByAssetNameUri_Call struct {
	*mock.Call
}

// GetByAssetNameUri is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.GetAssetEventByAssetNameUriParams
func (_e *AssetEventsClient_Expecter) GetByAssetNameUri(ctx interface{}, params interface{}) *AssetEventsClient_GetByAssetNameUri_Call {
	return &AssetEventsClient_GetByAssetNameUri_Call{Call: _e.mock.On("GetByAssetNameUri", ctx, params)}
}

func (_c *AssetEventsClient_GetByAssetNameUri_Call) Run(run func(ctx context.Context, params *api.GetAssetEventByAssetNameUriParams)) *AssetEventsClient_GetByAssetNameUri_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.GetAssetEventByAssetNameUriParams
		if args[1] != nil {
			arg1 = args[1].(*api.GetAssetEventByAssetNameUriParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AssetEventsClient_GetByAssetNameUri_Call) Return(assetEventsResponse *api.AssetEventsResponse, err error) *AssetEventsClient_GetByAssetNameUri_Call {
	_c.Call.Return(assetEventsResponse, err)
	return _c
}

func (_c *AssetEventsClient_GetByAssetNameUri_Call) RunAndReturn(run func(ctx context.Context, params *api.GetAssetEventByAssetNameUriParams) (*api.AssetEventsResponse, error)) *AssetEventsClient_GetByAssetNameUri_Call {
	_c.Call.Return(run)
	return _c
}

// GetByAssetNameUriResponse provides a mock function for the type AssetEventsClient
func (_mock *AssetEventsClient) GetByAssetNameUriResponse(ctx context.Context, params *api.GetAssetEventByAssetNameUriParams) (*resty.Response, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetByAssetNameUriResponse")
	}

	var r0 *resty.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetEventByAssetNameUriParams) (*resty.Response, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *api.GetAssetEventByAssetNameUriParams) *resty.Response); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *api.GetAssetEventByAssetNameUriParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AssetEventsClient_GetByAssetNameUriResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAssetNameUriResponse'
type AssetEventsClient_GetByAssetNameUriResponse_Call struct {
	*mock.Call
}

// GetByAssetNameUriResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *api.GetAssetEventByAssetNameUriParams
func (_e *AssetEventsClient_Expecter) GetByAssetNameUriResponse(ctx interface{}, params interface{}) *AssetEventsClient_GetByAssetNameUriResponse_Call {
	return &AssetEventsClient_GetByAssetNameUriResponse_Call{Call: _e.mock.On("GetByAssetNameUriResponse", ctx, params)}
}

func (_c *AssetEventsClient_GetByAssetNameUriResponse_Call) Run(run func(ctx context.Context, params *api.GetAssetEventByAssetNameUriParams)) *AssetEventsClient_GetByAssetNameUriResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *api.GetAssetEventByAssetNameUriParams
		if args[1] != nil {
			arg1 = args[1].(*api.GetAssetEventByAssetNameUriParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AssetEventsClient_GetByAssetNameUriResponse_Call) Return(response *resty.Response, err error) *AssetEventsClient_GetByAssetNameUriResponse_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *AssetEventsClient_GetByAssetNameUriResponse_Call) RunAndReturn(run func(ctx context.Context, params *api.GetAssetEventByAssetNameUriParams) (*resty.Response, error)) *AssetEventsClient_GetByAssetNameUriResponse_Call {
	_c.Call.Return(run)
	return _c
}
