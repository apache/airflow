// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/apache/airflow/go-sdk/pkg/api"
	mock "github.com/stretchr/testify/mock"
)

// NewClientInterface creates a new instance of ClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientInterface {
	mock := &ClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

type ClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientInterface) EXPECT() *ClientInterface_Expecter {
	return &ClientInterface_Expecter{mock: &_m.Mock}
}

// AssetEvents provides a mock function for the type ClientInterface
func (_mock *ClientInterface) AssetEvents() api.AssetEventsClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AssetEvents")
	}

	var r0 api.AssetEventsClient
	if returnFunc, ok := ret.Get(0).(func() api.AssetEventsClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.AssetEventsClient)
		}
	}
	return r0
}

// ClientInterface_AssetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssetEvents'
type ClientInterface_AssetEvents_Call struct {
	*mock.Call
}

// AssetEvents is a helper method to define mock.On call
func (_e *ClientInterface_Expecter) AssetEvents() *ClientInterface_AssetEvents_Call {
	return &ClientInterface_AssetEvents_Call{Call: _e.mock.On("AssetEvents")}
}

func (_c *ClientInterface_AssetEvents_Call) Run(run func()) *ClientInterface_AssetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientInterface_AssetEvents_Call) Return(assetEventsClient api.AssetEventsClient) *ClientInterface_AssetEvents_Call {
	_c.Call.Return(assetEventsClient)
	return _c
}

func (_c *ClientInterface_AssetEvents_Call) RunAndReturn(run func() api.AssetEventsClient) *ClientInterface_AssetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// Assets provides a mock function for the type ClientInterface
func (_mock *ClientInterface) Assets() api.AssetsClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Assets")
	}

	var r0 api.AssetsClient
	if returnFunc, ok := ret.Get(0).(func() api.AssetsClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.AssetsClient)
		}
	}
	return r0
}

// ClientInterface_Assets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Assets'
type ClientInterface_Assets_Call struct {
	*mock.Call
}

// Assets is a helper method to define mock.On call
func (_e *ClientInterface_Expecter) Assets() *ClientInterface_Assets_Call {
	return &ClientInterface_Assets_Call{Call: _e.mock.On("Assets")}
}

func (_c *ClientInterface_Assets_Call) Run(run func()) *ClientInterface_Assets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientInterface_Assets_Call) Return(assetsClient api.AssetsClient) *ClientInterface_Assets_Call {
	_c.Call.Return(assetsClient)
	return _c
}

func (_c *ClientInterface_Assets_Call) RunAndReturn(run func() api.AssetsClient) *ClientInterface_Assets_Call {
	_c.Call.Return(run)
	return _c
}

// Connections provides a mock function for the type ClientInterface
func (_mock *ClientInterface) Connections() api.ConnectionsClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connections")
	}

	var r0 api.ConnectionsClient
	if returnFunc, ok := ret.Get(0).(func() api.ConnectionsClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ConnectionsClient)
		}
	}
	return r0
}

// ClientInterface_Connections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connections'
type ClientInterface_Connections_Call struct {
	*mock.Call
}

// Connections is a helper method to define mock.On call
func (_e *ClientInterface_Expecter) Connections() *ClientInterface_Connections_Call {
	return &ClientInterface_Connections_Call{Call: _e.mock.On("Connections")}
}

func (_c *ClientInterface_Connections_Call) Run(run func()) *ClientInterface_Connections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientInterface_Connections_Call) Return(connectionsClient api.ConnectionsClient) *ClientInterface_Connections_Call {
	_c.Call.Return(connectionsClient)
	return _c
}

func (_c *ClientInterface_Connections_Call) RunAndReturn(run func() api.ConnectionsClient) *ClientInterface_Connections_Call {
	_c.Call.Return(run)
	return _c
}

// DagRuns provides a mock function for the type ClientInterface
func (_mock *ClientInterface) DagRuns() api.DagRunsClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DagRuns")
	}

	var r0 api.DagRunsClient
	if returnFunc, ok := ret.Get(0).(func() api.DagRunsClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.DagRunsClient)
		}
	}
	return r0
}

// ClientInterface_DagRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DagRuns'
type ClientInterface_DagRuns_Call struct {
	*mock.Call
}

// DagRuns is a helper method to define mock.On call
func (_e *ClientInterface_Expecter) DagRuns() *ClientInterface_DagRuns_Call {
	return &ClientInterface_DagRuns_Call{Call: _e.mock.On("DagRuns")}
}

func (_c *ClientInterface_DagRuns_Call) Run(run func()) *ClientInterface_DagRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientInterface_DagRuns_Call) Return(dagRunsClient api.DagRunsClient) *ClientInterface_DagRuns_Call {
	_c.Call.Return(dagRunsClient)
	return _c
}

func (_c *ClientInterface_DagRuns_Call) RunAndReturn(run func() api.DagRunsClient) *ClientInterface_DagRuns_Call {
	_c.Call.Return(run)
	return _c
}

// TaskInstances provides a mock function for the type ClientInterface
func (_mock *ClientInterface) TaskInstances() api.TaskInstancesClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TaskInstances")
	}

	var r0 api.TaskInstancesClient
	if returnFunc, ok := ret.Get(0).(func() api.TaskInstancesClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.TaskInstancesClient)
		}
	}
	return r0
}

// ClientInterface_TaskInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskInstances'
type ClientInterface_TaskInstances_Call struct {
	*mock.Call
}

// TaskInstances is a helper method to define mock.On call
func (_e *ClientInterface_Expecter) TaskInstances() *ClientInterface_TaskInstances_Call {
	return &ClientInterface_TaskInstances_Call{Call: _e.mock.On("TaskInstances")}
}

func (_c *ClientInterface_TaskInstances_Call) Run(run func()) *ClientInterface_TaskInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientInterface_TaskInstances_Call) Return(taskInstancesClient api.TaskInstancesClient) *ClientInterface_TaskInstances_Call {
	_c.Call.Return(taskInstancesClient)
	return _c
}

func (_c *ClientInterface_TaskInstances_Call) RunAndReturn(run func() api.TaskInstancesClient) *ClientInterface_TaskInstances_Call {
	_c.Call.Return(run)
	return _c
}

// TaskReschedules provides a mock function for the type ClientInterface
func (_mock *ClientInterface) TaskReschedules() api.TaskReschedulesClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TaskReschedules")
	}

	var r0 api.TaskReschedulesClient
	if returnFunc, ok := ret.Get(0).(func() api.TaskReschedulesClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.TaskReschedulesClient)
		}
	}
	return r0
}

// ClientInterface_TaskReschedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskReschedules'
type ClientInterface_TaskReschedules_Call struct {
	*mock.Call
}

// TaskReschedules is a helper method to define mock.On call
func (_e *ClientInterface_Expecter) TaskReschedules() *ClientInterface_TaskReschedules_Call {
	return &ClientInterface_TaskReschedules_Call{Call: _e.mock.On("TaskReschedules")}
}

func (_c *ClientInterface_TaskReschedules_Call) Run(run func()) *ClientInterface_TaskReschedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientInterface_TaskReschedules_Call) Return(taskReschedulesClient api.TaskReschedulesClient) *ClientInterface_TaskReschedules_Call {
	_c.Call.Return(taskReschedulesClient)
	return _c
}

func (_c *ClientInterface_TaskReschedules_Call) RunAndReturn(run func() api.TaskReschedulesClient) *ClientInterface_TaskReschedules_Call {
	_c.Call.Return(run)
	return _c
}

// Variables provides a mock function for the type ClientInterface
func (_mock *ClientInterface) Variables() api.VariablesClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Variables")
	}

	var r0 api.VariablesClient
	if returnFunc, ok := ret.Get(0).(func() api.VariablesClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.VariablesClient)
		}
	}
	return r0
}

// ClientInterface_Variables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Variables'
type ClientInterface_Variables_Call struct {
	*mock.Call
}

// Variables is a helper method to define mock.On call
func (_e *ClientInterface_Expecter) Variables() *ClientInterface_Variables_Call {
	return &ClientInterface_Variables_Call{Call: _e.mock.On("Variables")}
}

func (_c *ClientInterface_Variables_Call) Run(run func()) *ClientInterface_Variables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientInterface_Variables_Call) Return(variablesClient api.VariablesClient) *ClientInterface_Variables_Call {
	_c.Call.Return(variablesClient)
	return _c
}

func (_c *ClientInterface_Variables_Call) RunAndReturn(run func() api.VariablesClient) *ClientInterface_Variables_Call {
	_c.Call.Return(run)
	return _c
}

// Xcoms provides a mock function for the type ClientInterface
func (_mock *ClientInterface) Xcoms() api.XcomsClient {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Xcoms")
	}

	var r0 api.XcomsClient
	if returnFunc, ok := ret.Get(0).(func() api.XcomsClient); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.XcomsClient)
		}
	}
	return r0
}

// ClientInterface_Xcoms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Xcoms'
type ClientInterface_Xcoms_Call struct {
	*mock.Call
}

// Xcoms is a helper method to define mock.On call
func (_e *ClientInterface_Expecter) Xcoms() *ClientInterface_Xcoms_Call {
	return &ClientInterface_Xcoms_Call{Call: _e.mock.On("Xcoms")}
}

func (_c *ClientInterface_Xcoms_Call) Run(run func()) *ClientInterface_Xcoms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientInterface_Xcoms_Call) Return(xcomsClient api.XcomsClient) *ClientInterface_Xcoms_Call {
	_c.Call.Return(xcomsClient)
	return _c
}

func (_c *ClientInterface_Xcoms_Call) RunAndReturn(run func() api.XcomsClient) *ClientInterface_Xcoms_Call {
	_c.Call.Return(run)
	return _c
}
