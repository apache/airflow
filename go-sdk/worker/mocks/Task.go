// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"log/slog"

	mock "github.com/stretchr/testify/mock"
)

// NewTask creates a new instance of Task. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *Task {
	mock := &Task{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Task is an autogenerated mock type for the Task type
type Task struct {
	mock.Mock
}

type Task_Expecter struct {
	mock *mock.Mock
}

func (_m *Task) EXPECT() *Task_Expecter {
	return &Task_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type Task
func (_mock *Task) Execute(ctx context.Context, logger *slog.Logger) error {
	ret := _mock.Called(ctx, logger)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *slog.Logger) error); ok {
		r0 = returnFunc(ctx, logger)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Task_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Task_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - logger *slog.Logger
func (_e *Task_Expecter) Execute(ctx interface{}, logger interface{}) *Task_Execute_Call {
	return &Task_Execute_Call{Call: _e.mock.On("Execute", ctx, logger)}
}

func (_c *Task_Execute_Call) Run(run func(ctx context.Context, logger *slog.Logger)) *Task_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *slog.Logger
		if args[1] != nil {
			arg1 = args[1].(*slog.Logger)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Task_Execute_Call) Return(err error) *Task_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Task_Execute_Call) RunAndReturn(run func(ctx context.Context, logger *slog.Logger) error) *Task_Execute_Call {
	_c.Call.Return(run)
	return _c
}
