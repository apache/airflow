// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/apache/airflow/go-sdk/pkg/api"
	"github.com/apache/airflow/go-sdk/worker"
	mock "github.com/stretchr/testify/mock"
)

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

type Worker_Expecter struct {
	mock *mock.Mock
}

func (_m *Worker) EXPECT() *Worker_Expecter {
	return &Worker_Expecter{mock: &_m.Mock}
}

// ExecuteTaskWorkload provides a mock function for the type Worker
func (_mock *Worker) ExecuteTaskWorkload(ctx context.Context, workload api.ExecuteTaskWorkload) error {
	ret := _mock.Called(ctx, workload)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTaskWorkload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, api.ExecuteTaskWorkload) error); ok {
		r0 = returnFunc(ctx, workload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Worker_ExecuteTaskWorkload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTaskWorkload'
type Worker_ExecuteTaskWorkload_Call struct {
	*mock.Call
}

// ExecuteTaskWorkload is a helper method to define mock.On call
//   - ctx context.Context
//   - workload api.ExecuteTaskWorkload
func (_e *Worker_Expecter) ExecuteTaskWorkload(ctx interface{}, workload interface{}) *Worker_ExecuteTaskWorkload_Call {
	return &Worker_ExecuteTaskWorkload_Call{Call: _e.mock.On("ExecuteTaskWorkload", ctx, workload)}
}

func (_c *Worker_ExecuteTaskWorkload_Call) Run(run func(ctx context.Context, workload api.ExecuteTaskWorkload)) *Worker_ExecuteTaskWorkload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 api.ExecuteTaskWorkload
		if args[1] != nil {
			arg1 = args[1].(api.ExecuteTaskWorkload)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Worker_ExecuteTaskWorkload_Call) Return(err error) *Worker_ExecuteTaskWorkload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Worker_ExecuteTaskWorkload_Call) RunAndReturn(run func(ctx context.Context, workload api.ExecuteTaskWorkload) error) *Worker_ExecuteTaskWorkload_Call {
	_c.Call.Return(run)
	return _c
}

// LookupTask provides a mock function for the type Worker
func (_mock *Worker) LookupTask(dagId string, taskId string) (worker.Task, bool) {
	ret := _mock.Called(dagId, taskId)

	if len(ret) == 0 {
		panic("no return value specified for LookupTask")
	}

	var r0 worker.Task
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string, string) (worker.Task, bool)); ok {
		return returnFunc(dagId, taskId)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) worker.Task); ok {
		r0 = returnFunc(dagId, taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(worker.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = returnFunc(dagId, taskId)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// Worker_LookupTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupTask'
type Worker_LookupTask_Call struct {
	*mock.Call
}

// LookupTask is a helper method to define mock.On call
//   - dagId string
//   - taskId string
func (_e *Worker_Expecter) LookupTask(dagId interface{}, taskId interface{}) *Worker_LookupTask_Call {
	return &Worker_LookupTask_Call{Call: _e.mock.On("LookupTask", dagId, taskId)}
}

func (_c *Worker_LookupTask_Call) Run(run func(dagId string, taskId string)) *Worker_LookupTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Worker_LookupTask_Call) Return(task worker.Task, exists bool) *Worker_LookupTask_Call {
	_c.Call.Return(task, exists)
	return _c
}

func (_c *Worker_LookupTask_Call) RunAndReturn(run func(dagId string, taskId string) (worker.Task, bool)) *Worker_LookupTask_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterTask provides a mock function for the type Worker
func (_mock *Worker) RegisterTask(dagid string, fn any) {
	_mock.Called(dagid, fn)
	return
}

// Worker_RegisterTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterTask'
type Worker_RegisterTask_Call struct {
	*mock.Call
}

// RegisterTask is a helper method to define mock.On call
//   - dagid string
//   - fn any
func (_e *Worker_Expecter) RegisterTask(dagid interface{}, fn interface{}) *Worker_RegisterTask_Call {
	return &Worker_RegisterTask_Call{Call: _e.mock.On("RegisterTask", dagid, fn)}
}

func (_c *Worker_RegisterTask_Call) Run(run func(dagid string, fn any)) *Worker_RegisterTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Worker_RegisterTask_Call) Return() *Worker_RegisterTask_Call {
	_c.Call.Return()
	return _c
}

func (_c *Worker_RegisterTask_Call) RunAndReturn(run func(dagid string, fn any)) *Worker_RegisterTask_Call {
	_c.Run(run)
	return _c
}

// RegisterTaskWithName provides a mock function for the type Worker
func (_mock *Worker) RegisterTaskWithName(dagId string, taskId string, fn any) {
	_mock.Called(dagId, taskId, fn)
	return
}

// Worker_RegisterTaskWithName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterTaskWithName'
type Worker_RegisterTaskWithName_Call struct {
	*mock.Call
}

// RegisterTaskWithName is a helper method to define mock.On call
//   - dagId string
//   - taskId string
//   - fn any
func (_e *Worker_Expecter) RegisterTaskWithName(dagId interface{}, taskId interface{}, fn interface{}) *Worker_RegisterTaskWithName_Call {
	return &Worker_RegisterTaskWithName_Call{Call: _e.mock.On("RegisterTaskWithName", dagId, taskId, fn)}
}

func (_c *Worker_RegisterTaskWithName_Call) Run(run func(dagId string, taskId string, fn any)) *Worker_RegisterTaskWithName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Worker_RegisterTaskWithName_Call) Return() *Worker_RegisterTaskWithName_Call {
	_c.Call.Return()
	return _c
}

func (_c *Worker_RegisterTaskWithName_Call) RunAndReturn(run func(dagId string, taskId string, fn any)) *Worker_RegisterTaskWithName_Call {
	_c.Run(run)
	return _c
}

// WithServer provides a mock function for the type Worker
func (_mock *Worker) WithServer(server string) (worker.Worker, error) {
	ret := _mock.Called(server)

	if len(ret) == 0 {
		panic("no return value specified for WithServer")
	}

	var r0 worker.Worker
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (worker.Worker, error)); ok {
		return returnFunc(server)
	}
	if returnFunc, ok := ret.Get(0).(func(string) worker.Worker); ok {
		r0 = returnFunc(server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(worker.Worker)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(server)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Worker_WithServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithServer'
type Worker_WithServer_Call struct {
	*mock.Call
}

// WithServer is a helper method to define mock.On call
//   - server string
func (_e *Worker_Expecter) WithServer(server interface{}) *Worker_WithServer_Call {
	return &Worker_WithServer_Call{Call: _e.mock.On("WithServer", server)}
}

func (_c *Worker_WithServer_Call) Run(run func(server string)) *Worker_WithServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Worker_WithServer_Call) Return(worker1 worker.Worker, err error) *Worker_WithServer_Call {
	_c.Call.Return(worker1, err)
	return _c
}

func (_c *Worker_WithServer_Call) RunAndReturn(run func(server string) (worker.Worker, error)) *Worker_WithServer_Call {
	_c.Call.Return(run)
	return _c
}
